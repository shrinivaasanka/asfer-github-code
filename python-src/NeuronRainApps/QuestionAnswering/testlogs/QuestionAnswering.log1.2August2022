*** Introductory Examples for the NLTK Book ***
Loading text1, ..., text9 and sent1, ..., sent9
Type the name of the text or sentence to view it.
Type: 'texts()' or 'sents()' to list the materials.
text1: Moby Dick by Herman Melville 1851
text2: Sense and Sensibility by Jane Austen 1811
text3: The Book of Genesis
text4: Inaugural Address Corpus
text5: Chat Corpus
text6: Monty Python and the Holy Grail
text7: Wall Street Journal
text8: Personals Corpus
text9: The Man Who Was Thursday by G . K . Chesterton 1908
================================================================
Question: which is the largest country in the world
2
defaultdict(<class 'list'>, {'average': ['large'], 'extent': ['large'], 'nation': ['nation'], 'everything': ['universe'], 'exists': ['universe'], 'size': ['large'], 'people': ['nation'], 'magnitude': ['large'], 'quantity': ['large'], 'anywhere': ['universe'], 'live': ['nation'], 'number': ['large'], 'country': ['nation']})
('definitiongraph networkx edges:', OutEdgeView([('average', 'large'), ('large', 'average'), ('large', 'extent'), ('large', 'size'), ('large', 'magnitude'), ('large', 'quantity'), ('large', 'number'), ('extent', 'large'), ('nation', 'nation'), ('nation', 'people'), ('nation', 'live'), ('nation', 'country'), ('everything', 'universe'), ('universe', 'everything'), ('universe', 'exists'), ('universe', 'anywhere'), ('exists', 'universe'), ('size', 'large'), ('people', 'nation'), ('magnitude', 'large'), ('quantity', 'large'), ('anywhere', 'universe'), ('live', 'nation'), ('number', 'large'), ('country', 'nation')]))
('Core number (sorted) :', [('average', 2), ('large', 2), ('extent', 2), ('nation', 2), ('everything', 2), ('universe', 2), ('exists', 2), ('size', 2), ('people', 2), ('magnitude', 2), ('quantity', 2), ('anywhere', 2), ('live', 2), ('number', 2), ('country', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'average', ',core number=', 2)
('This document belongs to class:', 'large', ',core number=', 2)
('This document belongs to class:', 'extent', ',core number=', 2)
('This document belongs to class:', 'nation', ',core number=', 2)
('This document belongs to class:', 'everything', ',core number=', 2)
('This document belongs to class:', 'universe', ',core number=', 2)
('This document belongs to class:', 'exists', ',core number=', 2)
('This document belongs to class:', 'size', ',core number=', 2)
('This document belongs to class:', 'people', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('large', 0.16483516483516486), ('nation', 0.03296703296703297), ('universe', 0.03296703296703297), ('average', 0.0), ('extent', 0.0), ('everything', 0.0), ('exists', 0.0), ('size', 0.0), ('people', 0.0), ('magnitude', 0.0), ('quantity', 0.0), ('anywhere', 0.0), ('live', 0.0), ('number', 0.0), ('country', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('large', 0.42857142857142855), ('average', 0.23376623376623373), ('extent', 0.23376623376623373), ('size', 0.23376623376623373), ('magnitude', 0.23376623376623373), ('quantity', 0.23376623376623373), ('number', 0.23376623376623373), ('nation', 0.21428571428571427), ('universe', 0.21428571428571427), ('everything', 0.12857142857142856), ('exists', 0.12857142857142856), ('people', 0.12857142857142856), ('anywhere', 0.12857142857142856), ('live', 0.12857142857142856), ('country', 0.12857142857142856)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('large', 0.8571428571428571), ('nation', 0.42857142857142855), ('universe', 0.42857142857142855), ('average', 0.14285714285714285), ('extent', 0.14285714285714285), ('everything', 0.14285714285714285), ('exists', 0.14285714285714285), ('size', 0.14285714285714285), ('people', 0.14285714285714285), ('magnitude', 0.14285714285714285), ('quantity', 0.14285714285714285), ('anywhere', 0.14285714285714285), ('live', 0.14285714285714285), ('number', 0.14285714285714285), ('country', 0.14285714285714285)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('large', 0.21981806411806756), ('nation', 0.12792722564722694), ('universe', 0.12792722564722694), ('everything', 0.04624648033981323), ('exists', 0.04624648033981323), ('people', 0.04624648033981323), ('anywhere', 0.04624648033981323), ('live', 0.04624648033981323), ('country', 0.04624648033981323), ('average', 0.041141433758099866), ('extent', 0.041141433758099866), ('size', 0.041141433758099866), ('magnitude', 0.041141433758099866), ('quantity', 0.041141433758099866), ('number', 0.041141433758099866)]
Question Textgraph: ([('average', 2), ('large', 2), ('extent', 2), ('nation', 2), ('everything', 2), ('universe', 2), ('exists', 2), ('size', 2), ('people', 2), ('magnitude', 2), ('quantity', 2), ('anywhere', 2), ('live', 2), ('number', 2), ('country', 2)], [('large', 0.21981806411806756), ('nation', 0.12792722564722694), ('universe', 0.12792722564722694), ('everything', 0.04624648033981323), ('exists', 0.04624648033981323), ('people', 0.04624648033981323), ('anywhere', 0.04624648033981323), ('live', 0.04624648033981323), ('country', 0.04624648033981323), ('average', 0.041141433758099866), ('extent', 0.041141433758099866), ('size', 0.041141433758099866), ('magnitude', 0.041141433758099866), ('quantity', 0.041141433758099866), ('number', 0.041141433758099866)])
Init of ConceptNet Client
wikipedia search result: List of countries and dependencies by area
Exception
2
defaultdict(<class 'list'>, {'particular': ['area'], 'items': ['list'], 'topics': ['list'], 'containing': ['list'], 'usually': ['area'], 'distant': ['colony'], 'names': ['list'], 'ordered': ['list'], 'purpose': ['area'], 'distinguished': ['area'], 'politically': ['colony'], 'boundary': ['area'], 'geography': ['area'], 'database': ['list'], 'country': ['colony'], 'serving': ['area'], 'region': ['area'], 'controlled': ['colony'], 'cities': ['country'], 'indefinite': ['area'], 'area': ['country', 'colony'], 'people': ['area'], 'outside': ['country'], 'culture': ['area'], 'towns': ['country'], 'array': ['list'], 'special': ['area'], 'geographical': ['colony', 'area']})
('definitiongraph networkx edges:', OutEdgeView([('particular', 'area'), ('area', 'particular'), ('area', 'usually'), ('area', 'purpose'), ('area', 'distinguished'), ('area', 'boundary'), ('area', 'geography'), ('area', 'serving'), ('area', 'region'), ('area', 'indefinite'), ('area', 'country'), ('area', 'colony'), ('area', 'people'), ('area', 'culture'), ('area', 'special'), ('area', 'geographical'), ('items', 'list'), ('list', 'items'), ('list', 'topics'), ('list', 'containing'), ('list', 'names'), ('list', 'ordered'), ('list', 'database'), ('list', 'array'), ('topics', 'list'), ('containing', 'list'), ('usually', 'area'), ('distant', 'colony'), ('colony', 'distant'), ('colony', 'politically'), ('colony', 'country'), ('colony', 'controlled'), ('colony', 'area'), ('colony', 'geographical'), ('names', 'list'), ('ordered', 'list'), ('purpose', 'area'), ('distinguished', 'area'), ('politically', 'colony'), ('boundary', 'area'), ('geography', 'area'), ('database', 'list'), ('country', 'colony'), ('country', 'cities'), ('country', 'area'), ('country', 'outside'), ('country', 'towns'), ('serving', 'area'), ('region', 'area'), ('controlled', 'colony'), ('cities', 'country'), ('indefinite', 'area'), ('people', 'area'), ('outside', 'country'), ('culture', 'area'), ('towns', 'country'), ('array', 'list'), ('special', 'area'), ('geographical', 'colony'), ('geographical', 'area')]))
('Core number (sorted) :', [('area', 4), ('colony', 4), ('country', 4), ('geographical', 4), ('particular', 2), ('items', 2), ('list', 2), ('topics', 2), ('containing', 2), ('usually', 2), ('distant', 2), ('names', 2), ('ordered', 2), ('purpose', 2), ('distinguished', 2), ('politically', 2), ('boundary', 2), ('geography', 2), ('database', 2), ('serving', 2), ('region', 2), ('controlled', 2), ('cities', 2), ('indefinite', 2), ('people', 2), ('outside', 2), ('culture', 2), ('towns', 2), ('array', 2), ('special', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'area', ',core number=', 4)
('This document belongs to class:', 'colony', ',core number=', 4)
('This document belongs to class:', 'country', ',core number=', 4)
('This document belongs to class:', 'geographical', ',core number=', 4)
('This document belongs to class:', 'particular', ',core number=', 2)
('This document belongs to class:', 'items', ',core number=', 2)
('This document belongs to class:', 'list', ',core number=', 2)
('This document belongs to class:', 'topics', ',core number=', 2)
('This document belongs to class:', 'containing', ',core number=', 2)
('This document belongs to class:', 'usually', ',core number=', 2)
('This document belongs to class:', 'distant', ',core number=', 2)
('This document belongs to class:', 'names', ',core number=', 2)
('This document belongs to class:', 'ordered', ',core number=', 2)
('This document belongs to class:', 'purpose', ',core number=', 2)
('This document belongs to class:', 'distinguished', ',core number=', 2)
('This document belongs to class:', 'politically', ',core number=', 2)
('\tmax_core_number', 4)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('area', 0.43349753694581283), ('colony', 0.14532019704433496), ('country', 0.14039408866995073), ('list', 0.05172413793103448), ('particular', 0.0), ('items', 0.0), ('topics', 0.0), ('containing', 0.0), ('usually', 0.0), ('distant', 0.0), ('names', 0.0), ('ordered', 0.0), ('purpose', 0.0), ('distinguished', 0.0), ('politically', 0.0), ('boundary', 0.0), ('geography', 0.0), ('database', 0.0), ('serving', 0.0), ('region', 0.0), ('controlled', 0.0), ('cities', 0.0), ('indefinite', 0.0), ('people', 0.0), ('outside', 0.0), ('culture', 0.0), ('towns', 0.0), ('array', 0.0), ('special', 0.0), ('geographical', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('area', 0.5632183908045977), ('colony', 0.4224137931034483), ('country', 0.4109972041006524), ('geographical', 0.3536487570168404), ('particular', 0.3235509904622157), ('usually', 0.3235509904622157), ('purpose', 0.3235509904622157), ('distinguished', 0.3235509904622157), ('boundary', 0.3235509904622157), ('geography', 0.3235509904622157), ('serving', 0.3235509904622157), ('region', 0.3235509904622157), ('indefinite', 0.3235509904622157), ('people', 0.3235509904622157), ('culture', 0.3235509904622157), ('special', 0.3235509904622157), ('distant', 0.27155172413793105), ('politically', 0.27155172413793105), ('controlled', 0.27155172413793105), ('cities', 0.26678765880217786), ('outside', 0.26678765880217786), ('towns', 0.26678765880217786), ('list', 0.2413793103448276), ('items', 0.129973474801061), ('topics', 0.129973474801061), ('containing', 0.129973474801061), ('names', 0.129973474801061), ('ordered', 0.129973474801061), ('database', 0.129973474801061), ('array', 0.129973474801061)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('area', 1.0344827586206897), ('list', 0.48275862068965514), ('colony', 0.41379310344827586), ('country', 0.3448275862068966), ('geographical', 0.13793103448275862), ('particular', 0.06896551724137931), ('items', 0.06896551724137931), ('topics', 0.06896551724137931), ('containing', 0.06896551724137931), ('usually', 0.06896551724137931), ('distant', 0.06896551724137931), ('names', 0.06896551724137931), ('ordered', 0.06896551724137931), ('purpose', 0.06896551724137931), ('distinguished', 0.06896551724137931), ('politically', 0.06896551724137931), ('boundary', 0.06896551724137931), ('geography', 0.06896551724137931), ('database', 0.06896551724137931), ('serving', 0.06896551724137931), ('region', 0.06896551724137931), ('controlled', 0.06896551724137931), ('cities', 0.06896551724137931), ('indefinite', 0.06896551724137931), ('people', 0.06896551724137931), ('outside', 0.06896551724137931), ('culture', 0.06896551724137931), ('towns', 0.06896551724137931), ('array', 0.06896551724137931), ('special', 0.06896551724137931)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('area', 0.2228129791682017), ('list', 0.12523152019733258), ('colony', 0.08764940414774916), ('country', 0.07553931535421209), ('geographical', 0.030043036054264758), ('items', 0.020205020924190575), ('topics', 0.020205020924190575), ('containing', 0.020205020924190575), ('names', 0.020205020924190575), ('ordered', 0.020205020924190575), ('database', 0.020205020924190575), ('array', 0.020205020924190575), ('cities', 0.01784170496046662), ('outside', 0.01784170496046662), ('towns', 0.01784170496046662), ('particular', 0.017626041729412397), ('usually', 0.017626041729412397), ('purpose', 0.017626041729412397), ('distinguished', 0.017626041729412397), ('boundary', 0.017626041729412397), ('geography', 0.017626041729412397), ('serving', 0.017626041729412397), ('region', 0.017626041729412397), ('indefinite', 0.017626041729412397), ('people', 0.017626041729412397), ('culture', 0.017626041729412397), ('special', 0.017626041729412397), ('distant', 0.017416994324852362), ('politically', 0.017416994324852362), ('controlled', 0.017416994324852362)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('particular', 'area'), ('area', 'particular'), ('area', 'usually'), ('area', 'purpose'), ('area', 'distinguished'), ('area', 'boundary'), ('area', 'geography'), ('area', 'serving'), ('area', 'region'), ('area', 'indefinite'), ('area', 'country'), ('area', 'colony'), ('area', 'people'), ('area', 'culture'), ('area', 'special'), ('area', 'geographical'), ('items', 'list'), ('list', 'items'), ('list', 'topics'), ('list', 'containing'), ('list', 'names'), ('list', 'ordered'), ('list', 'database'), ('list', 'array'), ('topics', 'list'), ('containing', 'list'), ('usually', 'area'), ('distant', 'colony'), ('colony', 'distant'), ('colony', 'politically'), ('colony', 'country'), ('colony', 'controlled'), ('colony', 'area'), ('colony', 'geographical'), ('names', 'list'), ('ordered', 'list'), ('purpose', 'area'), ('distinguished', 'area'), ('politically', 'colony'), ('boundary', 'area'), ('geography', 'area'), ('database', 'list'), ('country', 'colony'), ('country', 'cities'), ('country', 'area'), ('country', 'outside'), ('country', 'towns'), ('serving', 'area'), ('region', 'area'), ('controlled', 'colony'), ('cities', 'country'), ('indefinite', 'area'), ('people', 'area'), ('outside', 'country'), ('culture', 'area'), ('towns', 'country'), ('array', 'list'), ('special', 'area'), ('geographical', 'colony'), ('geographical', 'area')]
Answer Textgraph  1 : ([('area', 4), ('colony', 4), ('country', 4), ('geographical', 4), ('particular', 2), ('items', 2), ('list', 2), ('topics', 2), ('containing', 2), ('usually', 2), ('distant', 2), ('names', 2), ('ordered', 2), ('purpose', 2), ('distinguished', 2), ('politically', 2), ('boundary', 2), ('geography', 2), ('database', 2), ('serving', 2), ('region', 2), ('controlled', 2), ('cities', 2), ('indefinite', 2), ('people', 2), ('outside', 2), ('culture', 2), ('towns', 2), ('array', 2), ('special', 2)], [('area', 0.2228129791682017), ('list', 0.12523152019733258), ('colony', 0.08764940414774916), ('country', 0.07553931535421209), ('geographical', 0.030043036054264758), ('items', 0.020205020924190575), ('topics', 0.020205020924190575), ('containing', 0.020205020924190575), ('names', 0.020205020924190575), ('ordered', 0.020205020924190575), ('database', 0.020205020924190575), ('array', 0.020205020924190575), ('cities', 0.01784170496046662), ('outside', 0.01784170496046662), ('towns', 0.01784170496046662), ('particular', 0.017626041729412397), ('usually', 0.017626041729412397), ('purpose', 0.017626041729412397), ('distinguished', 0.017626041729412397), ('boundary', 0.017626041729412397), ('geography', 0.017626041729412397), ('serving', 0.017626041729412397), ('region', 0.017626041729412397), ('indefinite', 0.017626041729412397), ('people', 0.017626041729412397), ('culture', 0.017626041729412397), ('special', 0.017626041729412397), ('distant', 0.017416994324852362), ('politically', 0.017416994324852362), ('controlled', 0.017416994324852362)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.03333333333333333, 0.03333333333333333, 0.03333333333333333], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11613333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights: [0.11613333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31828
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights: [0.11613333333333334, 0.31828, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52402
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights updated after Gradient :  [0.11613333333333334, 0.31828, 0.52402]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11613333333333334, 0.31828, 0.52402], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11613333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights: [0.11613333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31828
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights: [0.11613333333333334, 0.31828, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52402
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights updated after Gradient :  [0.11613333333333334, 0.31828, 0.52402]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11613333333333334, 0.31828, 0.52402], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11613333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights: [0.11613333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31828
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights: [0.11613333333333334, 0.31828, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52402
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights updated after Gradient :  [0.11613333333333334, 0.31828, 0.52402]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11613333333333334, 0.31828, 0.52402], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( particular , particular ): 1.012
Key weight for textgraph edge ( particular , particular ): 4.024
Value weight for textgraph edge ( particular , particular ): 7.036
Query weight for textgraph edge ( particular , area ): 2.0132
Key weight for textgraph edge ( particular , area ): 5.0504
Value weight for textgraph edge ( particular , area ): 8.0876
Query weight for textgraph edge ( particular , items ): 3.0338
Key weight for textgraph edge ( particular , items ): 6.2636
Value weight for textgraph edge ( particular , items ): 9.4934
Query weight for textgraph edge ( area , particular ): 0.11613333333333334
Key weight for textgraph edge ( area , particular ): 0.11613333333333334
Value weight for textgraph edge ( area , particular ): 0.11613333333333334
Query weight for textgraph edge ( area , area ): 0.31828
Key weight for textgraph edge ( area , area ): 0.31828
Value weight for textgraph edge ( area , area ): 0.31828
Query weight for textgraph edge ( area , items ): 0.52402
Key weight for textgraph edge ( area , items ): 0.52402
Value weight for textgraph edge ( area , items ): 0.52402
Query weight for textgraph edge ( items , particular ): 3.02
Key weight for textgraph edge ( items , particular ): 3.02
Value weight for textgraph edge ( items , particular ): 3.02
Query weight for textgraph edge ( items , area ): 4.038
Key weight for textgraph edge ( items , area ): 4.038
Value weight for textgraph edge ( items , area ): 4.038
Query weight for textgraph edge ( items , items ): 5.187
Key weight for textgraph edge ( items , items ): 5.187
Value weight for textgraph edge ( items , items ): 5.187
wikipedia search result: List of largest church buildings
wikipedia search result summary: A church can be measured by various criteria in order to determine its size. Such measures include area, volume, length, width, height, or capacity. Several churches individually claim to be "the largest church", which may be due to any one of these criteria.


2
defaultdict(<class 'list'>, {'extent': ['large'], 'particular': ['church'], 'items': ['list'], 'topics': ['list'], 'containing': ['list'], 'size': ['large'], 'one': ['building'], 'quantity': ['large'], 'magnitude': ['large'], 'names': ['list'], 'ordered': ['list'], 'permanently': ['building'], 'church': ['church'], 'stands': ['building'], 'number': ['large'], 'belong': ['church'], 'database': ['list'], 'place': ['building'], 'average': ['large'], 'local': ['church'], 'walls': ['building'], 'roof': ['building'], 'attend': ['church'], 'people': ['church'], 'array': ['list'], 'less': ['building'], 'structure': ['building'], 'body': ['church']})
('definitiongraph networkx edges:', OutEdgeView([('extent', 'large'), ('large', 'extent'), ('large', 'size'), ('large', 'quantity'), ('large', 'magnitude'), ('large', 'number'), ('large', 'average'), ('particular', 'church'), ('church', 'particular'), ('church', 'church'), ('church', 'belong'), ('church', 'local'), ('church', 'attend'), ('church', 'people'), ('church', 'body'), ('items', 'list'), ('list', 'items'), ('list', 'topics'), ('list', 'containing'), ('list', 'names'), ('list', 'ordered'), ('list', 'database'), ('list', 'array'), ('topics', 'list'), ('containing', 'list'), ('size', 'large'), ('one', 'building'), ('building', 'one'), ('building', 'permanently'), ('building', 'stands'), ('building', 'place'), ('building', 'walls'), ('building', 'roof'), ('building', 'less'), ('building', 'structure'), ('quantity', 'large'), ('magnitude', 'large'), ('names', 'list'), ('ordered', 'list'), ('permanently', 'building'), ('stands', 'building'), ('number', 'large'), ('belong', 'church'), ('database', 'list'), ('place', 'building'), ('average', 'large'), ('local', 'church'), ('walls', 'building'), ('roof', 'building'), ('attend', 'church'), ('people', 'church'), ('array', 'list'), ('less', 'building'), ('structure', 'building'), ('body', 'church')]))
('Core number (sorted) :', [('extent', 2), ('large', 2), ('particular', 2), ('church', 2), ('items', 2), ('list', 2), ('topics', 2), ('containing', 2), ('size', 2), ('one', 2), ('building', 2), ('quantity', 2), ('magnitude', 2), ('names', 2), ('ordered', 2), ('permanently', 2), ('stands', 2), ('number', 2), ('belong', 2), ('database', 2), ('place', 2), ('average', 2), ('local', 2), ('walls', 2), ('roof', 2), ('attend', 2), ('people', 2), ('array', 2), ('less', 2), ('structure', 2), ('body', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'extent', ',core number=', 2)
('This document belongs to class:', 'large', ',core number=', 2)
('This document belongs to class:', 'particular', ',core number=', 2)
('This document belongs to class:', 'church', ',core number=', 2)
('This document belongs to class:', 'items', ',core number=', 2)
('This document belongs to class:', 'list', ',core number=', 2)
('This document belongs to class:', 'topics', ',core number=', 2)
('This document belongs to class:', 'containing', ',core number=', 2)
('This document belongs to class:', 'size', ',core number=', 2)
('This document belongs to class:', 'one', ',core number=', 2)
('This document belongs to class:', 'building', ',core number=', 2)
('This document belongs to class:', 'quantity', ',core number=', 2)
('This document belongs to class:', 'magnitude', ',core number=', 2)
('This document belongs to class:', 'names', ',core number=', 2)
('This document belongs to class:', 'ordered', ',core number=', 2)
('This document belongs to class:', 'permanently', ',core number=', 2)
('This document belongs to class:', 'stands', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('building', 0.06436781609195402), ('list', 0.04827586206896552), ('large', 0.034482758620689655), ('church', 0.034482758620689655), ('extent', 0.0), ('particular', 0.0), ('items', 0.0), ('topics', 0.0), ('containing', 0.0), ('size', 0.0), ('one', 0.0), ('quantity', 0.0), ('magnitude', 0.0), ('names', 0.0), ('ordered', 0.0), ('permanently', 0.0), ('stands', 0.0), ('number', 0.0), ('belong', 0.0), ('database', 0.0), ('place', 0.0), ('average', 0.0), ('local', 0.0), ('walls', 0.0), ('roof', 0.0), ('attend', 0.0), ('people', 0.0), ('array', 0.0), ('less', 0.0), ('structure', 0.0), ('body', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('building', 0.26666666666666666), ('list', 0.23333333333333334), ('large', 0.2), ('church', 0.2), ('one', 0.14222222222222222), ('permanently', 0.14222222222222222), ('stands', 0.14222222222222222), ('place', 0.14222222222222222), ('walls', 0.14222222222222222), ('roof', 0.14222222222222222), ('less', 0.14222222222222222), ('structure', 0.14222222222222222), ('items', 0.12564102564102564), ('topics', 0.12564102564102564), ('containing', 0.12564102564102564), ('names', 0.12564102564102564), ('ordered', 0.12564102564102564), ('database', 0.12564102564102564), ('array', 0.12564102564102564), ('extent', 0.10909090909090909), ('particular', 0.10909090909090909), ('size', 0.10909090909090909), ('quantity', 0.10909090909090909), ('magnitude', 0.10909090909090909), ('number', 0.10909090909090909), ('belong', 0.10909090909090909), ('average', 0.10909090909090909), ('local', 0.10909090909090909), ('attend', 0.10909090909090909), ('people', 0.10909090909090909), ('body', 0.10909090909090909)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('building', 0.5333333333333333), ('list', 0.4666666666666667), ('large', 0.4), ('church', 0.4), ('extent', 0.06666666666666667), ('particular', 0.06666666666666667), ('items', 0.06666666666666667), ('topics', 0.06666666666666667), ('containing', 0.06666666666666667), ('size', 0.06666666666666667), ('one', 0.06666666666666667), ('quantity', 0.06666666666666667), ('magnitude', 0.06666666666666667), ('names', 0.06666666666666667), ('ordered', 0.06666666666666667), ('permanently', 0.06666666666666667), ('stands', 0.06666666666666667), ('number', 0.06666666666666667), ('belong', 0.06666666666666667), ('database', 0.06666666666666667), ('place', 0.06666666666666667), ('average', 0.06666666666666667), ('local', 0.06666666666666667), ('walls', 0.06666666666666667), ('roof', 0.06666666666666667), ('attend', 0.06666666666666667), ('people', 0.06666666666666667), ('array', 0.06666666666666667), ('less', 0.06666666666666667), ('structure', 0.06666666666666667), ('body', 0.06666666666666667)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('building', 0.13600891136855248), ('list', 0.12118736181820632), ('large', 0.1063658122678601), ('church', 0.1063658122678601), ('extent', 0.01990677322417385), ('particular', 0.01990677322417385), ('size', 0.01990677322417385), ('quantity', 0.01990677322417385), ('magnitude', 0.01990677322417385), ('number', 0.01990677322417385), ('belong', 0.01990677322417385), ('average', 0.01990677322417385), ('local', 0.01990677322417385), ('attend', 0.01990677322417385), ('people', 0.01990677322417385), ('body', 0.01990677322417385), ('items', 0.019553879187260845), ('topics', 0.019553879187260845), ('containing', 0.019553879187260845), ('names', 0.019553879187260845), ('ordered', 0.019553879187260845), ('database', 0.019553879187260845), ('array', 0.019553879187260845), ('one', 0.01928920865957609), ('permanently', 0.01928920865957609), ('stands', 0.01928920865957609), ('place', 0.01928920865957609), ('walls', 0.01928920865957609), ('roof', 0.01928920865957609), ('less', 0.01928920865957609), ('structure', 0.01928920865957609)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('extent', 'large'), ('large', 'extent'), ('large', 'size'), ('large', 'quantity'), ('large', 'magnitude'), ('large', 'number'), ('large', 'average'), ('particular', 'church'), ('church', 'particular'), ('church', 'church'), ('church', 'belong'), ('church', 'local'), ('church', 'attend'), ('church', 'people'), ('church', 'body'), ('items', 'list'), ('list', 'items'), ('list', 'topics'), ('list', 'containing'), ('list', 'names'), ('list', 'ordered'), ('list', 'database'), ('list', 'array'), ('topics', 'list'), ('containing', 'list'), ('size', 'large'), ('one', 'building'), ('building', 'one'), ('building', 'permanently'), ('building', 'stands'), ('building', 'place'), ('building', 'walls'), ('building', 'roof'), ('building', 'less'), ('building', 'structure'), ('quantity', 'large'), ('magnitude', 'large'), ('names', 'list'), ('ordered', 'list'), ('permanently', 'building'), ('stands', 'building'), ('number', 'large'), ('belong', 'church'), ('database', 'list'), ('place', 'building'), ('average', 'large'), ('local', 'church'), ('walls', 'building'), ('roof', 'building'), ('attend', 'church'), ('people', 'church'), ('array', 'list'), ('less', 'building'), ('structure', 'building'), ('body', 'church')]
Answer Textgraph  2 : ([('extent', 2), ('large', 2), ('particular', 2), ('church', 2), ('items', 2), ('list', 2), ('topics', 2), ('containing', 2), ('size', 2), ('one', 2), ('building', 2), ('quantity', 2), ('magnitude', 2), ('names', 2), ('ordered', 2), ('permanently', 2), ('stands', 2), ('number', 2), ('belong', 2), ('database', 2), ('place', 2), ('average', 2), ('local', 2), ('walls', 2), ('roof', 2), ('attend', 2), ('people', 2), ('array', 2), ('less', 2), ('structure', 2), ('body', 2)], [('building', 0.13600891136855248), ('list', 0.12118736181820632), ('large', 0.1063658122678601), ('church', 0.1063658122678601), ('extent', 0.01990677322417385), ('particular', 0.01990677322417385), ('size', 0.01990677322417385), ('quantity', 0.01990677322417385), ('magnitude', 0.01990677322417385), ('number', 0.01990677322417385), ('belong', 0.01990677322417385), ('average', 0.01990677322417385), ('local', 0.01990677322417385), ('attend', 0.01990677322417385), ('people', 0.01990677322417385), ('body', 0.01990677322417385), ('items', 0.019553879187260845), ('topics', 0.019553879187260845), ('containing', 0.019553879187260845), ('names', 0.019553879187260845), ('ordered', 0.019553879187260845), ('database', 0.019553879187260845), ('array', 0.019553879187260845), ('one', 0.01928920865957609), ('permanently', 0.01928920865957609), ('stands', 0.01928920865957609), ('place', 0.01928920865957609), ('walls', 0.01928920865957609), ('roof', 0.01928920865957609), ('less', 0.01928920865957609), ('structure', 0.01928920865957609)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( extent , extent ): 1.012
Key weight for textgraph edge ( extent , extent ): 4.024
Value weight for textgraph edge ( extent , extent ): 7.036
Query weight for textgraph edge ( extent , large ): 2.0132
Key weight for textgraph edge ( extent , large ): 5.0504
Value weight for textgraph edge ( extent , large ): 8.0876
Query weight for textgraph edge ( extent , particular ): 3.0338
Key weight for textgraph edge ( extent , particular ): 6.2636
Value weight for textgraph edge ( extent , particular ): 9.4934
Query weight for textgraph edge ( large , extent ): 0.11513333333333334
Key weight for textgraph edge ( large , extent ): 0.11513333333333334
Value weight for textgraph edge ( large , extent ): 0.11513333333333334
Query weight for textgraph edge ( large , large ): 0.31618
Key weight for textgraph edge ( large , large ): 0.31618
Value weight for textgraph edge ( large , large ): 0.31618
Query weight for textgraph edge ( large , particular ): 0.51637
Key weight for textgraph edge ( large , particular ): 0.51637
Value weight for textgraph edge ( large , particular ): 0.51637
Query weight for textgraph edge ( particular , extent ): 3.02
Key weight for textgraph edge ( particular , extent ): 3.02
Value weight for textgraph edge ( particular , extent ): 3.02
Query weight for textgraph edge ( particular , large ): 4.038
Key weight for textgraph edge ( particular , large ): 4.038
Value weight for textgraph edge ( particular , large ): 4.038
Query weight for textgraph edge ( particular , particular ): 5.187
Key weight for textgraph edge ( particular , particular ): 5.187
Value weight for textgraph edge ( particular , particular ): 5.187
wikipedia search result: List of largest buildings
wikipedia search result summary: Buildings around the world listed by usable space (volume), footprint (area), and floor space (area) comprise single structures that are suitable for continuous human occupancy. There are, however, some exceptions, including factories and warehouses.
The Aerium near Berlin is the largest uninterrupted volume in the world, while Boeing's factory in Everett, Washington, United States is the world's largest building by volume. The AvtoVAZ main assembly building in Tolyatti, Russia is the largest building in area footprint. The Yiwu International Trade City in Yiwu, China is the largest building in terms of total floor area. Due to the incomplete nature of this list, buildings are not ranked.
2
defaultdict(<class 'list'>, {'extent': ['large'], 'items': ['list'], 'topics': ['list'], 'containing': ['list'], 'size': ['large'], 'one': ['building'], 'quantity': ['large'], 'magnitude': ['large'], 'names': ['list'], 'ordered': ['list'], 'permanently': ['building'], 'stands': ['building'], 'number': ['large'], 'database': ['list'], 'place': ['building'], 'average': ['large'], 'walls': ['building'], 'roof': ['building'], 'array': ['list'], 'less': ['building'], 'structure': ['building']})
('definitiongraph networkx edges:', OutEdgeView([('extent', 'large'), ('large', 'extent'), ('large', 'size'), ('large', 'quantity'), ('large', 'magnitude'), ('large', 'number'), ('large', 'average'), ('items', 'list'), ('list', 'items'), ('list', 'topics'), ('list', 'containing'), ('list', 'names'), ('list', 'ordered'), ('list', 'database'), ('list', 'array'), ('topics', 'list'), ('containing', 'list'), ('size', 'large'), ('one', 'building'), ('building', 'one'), ('building', 'permanently'), ('building', 'stands'), ('building', 'place'), ('building', 'walls'), ('building', 'roof'), ('building', 'less'), ('building', 'structure'), ('quantity', 'large'), ('magnitude', 'large'), ('names', 'list'), ('ordered', 'list'), ('permanently', 'building'), ('stands', 'building'), ('number', 'large'), ('database', 'list'), ('place', 'building'), ('average', 'large'), ('walls', 'building'), ('roof', 'building'), ('array', 'list'), ('less', 'building'), ('structure', 'building')]))
('Core number (sorted) :', [('extent', 2), ('large', 2), ('items', 2), ('list', 2), ('topics', 2), ('containing', 2), ('size', 2), ('one', 2), ('building', 2), ('quantity', 2), ('magnitude', 2), ('names', 2), ('ordered', 2), ('permanently', 2), ('stands', 2), ('number', 2), ('database', 2), ('place', 2), ('average', 2), ('walls', 2), ('roof', 2), ('array', 2), ('less', 2), ('structure', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'extent', ',core number=', 2)
('This document belongs to class:', 'large', ',core number=', 2)
('This document belongs to class:', 'items', ',core number=', 2)
('This document belongs to class:', 'list', ',core number=', 2)
('This document belongs to class:', 'topics', ',core number=', 2)
('This document belongs to class:', 'containing', ',core number=', 2)
('This document belongs to class:', 'size', ',core number=', 2)
('This document belongs to class:', 'one', ',core number=', 2)
('This document belongs to class:', 'building', ',core number=', 2)
('This document belongs to class:', 'quantity', ',core number=', 2)
('This document belongs to class:', 'magnitude', ',core number=', 2)
('This document belongs to class:', 'names', ',core number=', 2)
('This document belongs to class:', 'ordered', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('building', 0.11067193675889328), ('list', 0.08300395256916995), ('large', 0.05928853754940711), ('extent', 0.0), ('items', 0.0), ('topics', 0.0), ('containing', 0.0), ('size', 0.0), ('one', 0.0), ('quantity', 0.0), ('magnitude', 0.0), ('names', 0.0), ('ordered', 0.0), ('permanently', 0.0), ('stands', 0.0), ('number', 0.0), ('database', 0.0), ('place', 0.0), ('average', 0.0), ('walls', 0.0), ('roof', 0.0), ('array', 0.0), ('less', 0.0), ('structure', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('building', 0.34782608695652173), ('list', 0.30434782608695654), ('large', 0.2608695652173913), ('one', 0.1855072463768116), ('permanently', 0.1855072463768116), ('stands', 0.1855072463768116), ('place', 0.1855072463768116), ('walls', 0.1855072463768116), ('roof', 0.1855072463768116), ('less', 0.1855072463768116), ('structure', 0.1855072463768116), ('items', 0.16387959866220736), ('topics', 0.16387959866220736), ('containing', 0.16387959866220736), ('names', 0.16387959866220736), ('ordered', 0.16387959866220736), ('database', 0.16387959866220736), ('array', 0.16387959866220736), ('extent', 0.14229249011857706), ('size', 0.14229249011857706), ('quantity', 0.14229249011857706), ('magnitude', 0.14229249011857706), ('number', 0.14229249011857706), ('average', 0.14229249011857706)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('building', 0.6956521739130435), ('list', 0.6086956521739131), ('large', 0.5217391304347826), ('extent', 0.08695652173913043), ('items', 0.08695652173913043), ('topics', 0.08695652173913043), ('containing', 0.08695652173913043), ('size', 0.08695652173913043), ('one', 0.08695652173913043), ('quantity', 0.08695652173913043), ('magnitude', 0.08695652173913043), ('names', 0.08695652173913043), ('ordered', 0.08695652173913043), ('permanently', 0.08695652173913043), ('stands', 0.08695652173913043), ('number', 0.08695652173913043), ('database', 0.08695652173913043), ('place', 0.08695652173913043), ('average', 0.08695652173913043), ('walls', 0.08695652173913043), ('roof', 0.08695652173913043), ('array', 0.08695652173913043), ('less', 0.08695652173913043), ('structure', 0.08695652173913043)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('building', 0.17567354939327667), ('list', 0.15652970900376093), ('large', 0.13738586861424515), ('extent', 0.02571346634207023), ('size', 0.02571346634207023), ('quantity', 0.02571346634207023), ('magnitude', 0.02571346634207023), ('number', 0.02571346634207023), ('average', 0.02571346634207023), ('items', 0.025257660618510334), ('topics', 0.025257660618510334), ('containing', 0.025257660618510334), ('names', 0.025257660618510334), ('ordered', 0.025257660618510334), ('database', 0.025257660618510334), ('array', 0.025257660618510334), ('one', 0.024915806325840416), ('permanently', 0.024915806325840416), ('stands', 0.024915806325840416), ('place', 0.024915806325840416), ('walls', 0.024915806325840416), ('roof', 0.024915806325840416), ('less', 0.024915806325840416), ('structure', 0.024915806325840416)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('extent', 'large'), ('large', 'extent'), ('large', 'size'), ('large', 'quantity'), ('large', 'magnitude'), ('large', 'number'), ('large', 'average'), ('items', 'list'), ('list', 'items'), ('list', 'topics'), ('list', 'containing'), ('list', 'names'), ('list', 'ordered'), ('list', 'database'), ('list', 'array'), ('topics', 'list'), ('containing', 'list'), ('size', 'large'), ('one', 'building'), ('building', 'one'), ('building', 'permanently'), ('building', 'stands'), ('building', 'place'), ('building', 'walls'), ('building', 'roof'), ('building', 'less'), ('building', 'structure'), ('quantity', 'large'), ('magnitude', 'large'), ('names', 'list'), ('ordered', 'list'), ('permanently', 'building'), ('stands', 'building'), ('number', 'large'), ('database', 'list'), ('place', 'building'), ('average', 'large'), ('walls', 'building'), ('roof', 'building'), ('array', 'list'), ('less', 'building'), ('structure', 'building')]
Answer Textgraph  3 : ([('extent', 2), ('large', 2), ('items', 2), ('list', 2), ('topics', 2), ('containing', 2), ('size', 2), ('one', 2), ('building', 2), ('quantity', 2), ('magnitude', 2), ('names', 2), ('ordered', 2), ('permanently', 2), ('stands', 2), ('number', 2), ('database', 2), ('place', 2), ('average', 2), ('walls', 2), ('roof', 2), ('array', 2), ('less', 2), ('structure', 2)], [('building', 0.17567354939327667), ('list', 0.15652970900376093), ('large', 0.13738586861424515), ('extent', 0.02571346634207023), ('size', 0.02571346634207023), ('quantity', 0.02571346634207023), ('magnitude', 0.02571346634207023), ('number', 0.02571346634207023), ('average', 0.02571346634207023), ('items', 0.025257660618510334), ('topics', 0.025257660618510334), ('containing', 0.025257660618510334), ('names', 0.025257660618510334), ('ordered', 0.025257660618510334), ('database', 0.025257660618510334), ('array', 0.025257660618510334), ('one', 0.024915806325840416), ('permanently', 0.024915806325840416), ('stands', 0.024915806325840416), ('place', 0.024915806325840416), ('walls', 0.024915806325840416), ('roof', 0.024915806325840416), ('less', 0.024915806325840416), ('structure', 0.024915806325840416)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( extent , extent ): 1.012
Key weight for textgraph edge ( extent , extent ): 4.024
Value weight for textgraph edge ( extent , extent ): 7.036
Query weight for textgraph edge ( extent , large ): 2.0132
Key weight for textgraph edge ( extent , large ): 5.0504
Value weight for textgraph edge ( extent , large ): 8.0876
Query weight for textgraph edge ( extent , items ): 3.0338
Key weight for textgraph edge ( extent , items ): 6.2636
Value weight for textgraph edge ( extent , items ): 9.4934
Query weight for textgraph edge ( large , extent ): 0.11513333333333334
Key weight for textgraph edge ( large , extent ): 0.11513333333333334
Value weight for textgraph edge ( large , extent ): 0.11513333333333334
Query weight for textgraph edge ( large , large ): 0.31618
Key weight for textgraph edge ( large , large ): 0.31618
Value weight for textgraph edge ( large , large ): 0.31618
Query weight for textgraph edge ( large , items ): 0.51637
Key weight for textgraph edge ( large , items ): 0.51637
Value weight for textgraph edge ( large , items ): 0.51637
Query weight for textgraph edge ( items , extent ): 3.02
Key weight for textgraph edge ( items , extent ): 3.02
Value weight for textgraph edge ( items , extent ): 3.02
Query weight for textgraph edge ( items , large ): 4.038
Key weight for textgraph edge ( items , large ): 4.038
Value weight for textgraph edge ( items , large ): 4.038
Query weight for textgraph edge ( items , items ): 5.187
Key weight for textgraph edge ( items , items ): 5.187
Value weight for textgraph edge ( items , items ): 5.187
wikipedia search result: List of largest cities
wikipedia search result summary: The United Nations uses three definitions for what constitutes a city, as not all cities in all jurisdictions are classified using the same criteria. Cities may be defined as the cities proper, the extent of their urban area, or their metropolitan regions. The largest city by population using the city proper definition, which is the area under the administrative boundaries of a local government, is Chongqing, China. The largest city by population using the metropolitan area definition, which is a loose term referring to urban area and its primary commuter areas, is Tokyo, Japan. The largest city by population using the urban area definition, which is a loose term referring to a contiguous area with a certain population density, is also Tokyo, Japan.
2
defaultdict(<class 'list'>, {'include': ['city'], 'independent': ['city'], 'extent': ['large'], 'districts': ['city'], 'administrative': ['city'], 'items': ['list'], 'topics': ['list'], 'containing': ['list'], 'size': ['large'], 'populated': ['city'], 'quantity': ['large'], 'magnitude': ['large'], 'names': ['list'], 'ordered': ['list'], 'number': ['large'], 'urban': ['city'], 'database': ['list'], 'average': ['large'], 'densely': ['city'], 'several': ['city'], 'area': ['city'], 'array': ['list'], 'large': ['city']})
('definitiongraph networkx edges:', OutEdgeView([('include', 'city'), ('city', 'include'), ('city', 'independent'), ('city', 'districts'), ('city', 'administrative'), ('city', 'populated'), ('city', 'urban'), ('city', 'densely'), ('city', 'several'), ('city', 'area'), ('city', 'large'), ('independent', 'city'), ('extent', 'large'), ('large', 'extent'), ('large', 'size'), ('large', 'quantity'), ('large', 'magnitude'), ('large', 'number'), ('large', 'average'), ('large', 'city'), ('districts', 'city'), ('administrative', 'city'), ('items', 'list'), ('list', 'items'), ('list', 'topics'), ('list', 'containing'), ('list', 'names'), ('list', 'ordered'), ('list', 'database'), ('list', 'array'), ('topics', 'list'), ('containing', 'list'), ('size', 'large'), ('populated', 'city'), ('quantity', 'large'), ('magnitude', 'large'), ('names', 'list'), ('ordered', 'list'), ('number', 'large'), ('urban', 'city'), ('database', 'list'), ('average', 'large'), ('densely', 'city'), ('several', 'city'), ('area', 'city'), ('array', 'list')]))
('Core number (sorted) :', [('include', 2), ('city', 2), ('independent', 2), ('extent', 2), ('large', 2), ('districts', 2), ('administrative', 2), ('items', 2), ('list', 2), ('topics', 2), ('containing', 2), ('size', 2), ('populated', 2), ('quantity', 2), ('magnitude', 2), ('names', 2), ('ordered', 2), ('number', 2), ('urban', 2), ('database', 2), ('average', 2), ('densely', 2), ('several', 2), ('area', 2), ('array', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'include', ',core number=', 2)
('This document belongs to class:', 'city', ',core number=', 2)
('This document belongs to class:', 'independent', ',core number=', 2)
('This document belongs to class:', 'extent', ',core number=', 2)
('This document belongs to class:', 'large', ',core number=', 2)
('This document belongs to class:', 'districts', ',core number=', 2)
('This document belongs to class:', 'administrative', ',core number=', 2)
('This document belongs to class:', 'items', ',core number=', 2)
('This document belongs to class:', 'list', ',core number=', 2)
('This document belongs to class:', 'topics', ',core number=', 2)
('This document belongs to class:', 'containing', ',core number=', 2)
('This document belongs to class:', 'size', ',core number=', 2)
('This document belongs to class:', 'populated', ',core number=', 2)
('This document belongs to class:', 'quantity', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('city', 0.358695652173913), ('large', 0.2717391304347826), ('list', 0.07608695652173914), ('include', 0.0), ('independent', 0.0), ('extent', 0.0), ('districts', 0.0), ('administrative', 0.0), ('items', 0.0), ('topics', 0.0), ('containing', 0.0), ('size', 0.0), ('populated', 0.0), ('quantity', 0.0), ('magnitude', 0.0), ('names', 0.0), ('ordered', 0.0), ('number', 0.0), ('urban', 0.0), ('database', 0.0), ('average', 0.0), ('densely', 0.0), ('several', 0.0), ('area', 0.0), ('array', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('city', 0.48484848484848486), ('large', 0.42666666666666664), ('list', 0.2916666666666667), ('include', 0.2882882882882883), ('independent', 0.2882882882882883), ('districts', 0.2882882882882883), ('administrative', 0.2882882882882883), ('populated', 0.2882882882882883), ('urban', 0.2882882882882883), ('densely', 0.2882882882882883), ('several', 0.2882882882882883), ('area', 0.2882882882882883), ('extent', 0.26666666666666666), ('size', 0.26666666666666666), ('quantity', 0.26666666666666666), ('magnitude', 0.26666666666666666), ('number', 0.26666666666666666), ('average', 0.26666666666666666), ('items', 0.15705128205128205), ('topics', 0.15705128205128205), ('containing', 0.15705128205128205), ('names', 0.15705128205128205), ('ordered', 0.15705128205128205), ('database', 0.15705128205128205), ('array', 0.15705128205128205)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('city', 0.8333333333333333), ('large', 0.5833333333333333), ('list', 0.5833333333333333), ('include', 0.08333333333333333), ('independent', 0.08333333333333333), ('extent', 0.08333333333333333), ('districts', 0.08333333333333333), ('administrative', 0.08333333333333333), ('items', 0.08333333333333333), ('topics', 0.08333333333333333), ('containing', 0.08333333333333333), ('size', 0.08333333333333333), ('populated', 0.08333333333333333), ('quantity', 0.08333333333333333), ('magnitude', 0.08333333333333333), ('names', 0.08333333333333333), ('ordered', 0.08333333333333333), ('number', 0.08333333333333333), ('urban', 0.08333333333333333), ('database', 0.08333333333333333), ('average', 0.08333333333333333), ('densely', 0.08333333333333333), ('several', 0.08333333333333333), ('area', 0.08333333333333333), ('array', 0.08333333333333333)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('city', 0.19704111242738964), ('list', 0.15026691853519095), ('large', 0.14012834413603203), ('items', 0.02424758306640129), ('topics', 0.02424758306640129), ('containing', 0.02424758306640129), ('names', 0.02424758306640129), ('ordered', 0.02424758306640129), ('database', 0.02424758306640129), ('array', 0.02424758306640129), ('extent', 0.023015391140034328), ('size', 0.023015391140034328), ('quantity', 0.023015391140034328), ('magnitude', 0.023015391140034328), ('number', 0.023015391140034328), ('average', 0.023015391140034328), ('include', 0.02274868851070807), ('independent', 0.02274868851070807), ('districts', 0.02274868851070807), ('administrative', 0.02274868851070807), ('populated', 0.02274868851070807), ('urban', 0.02274868851070807), ('densely', 0.02274868851070807), ('several', 0.02274868851070807), ('area', 0.02274868851070807)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('include', 'city'), ('city', 'include'), ('city', 'independent'), ('city', 'districts'), ('city', 'administrative'), ('city', 'populated'), ('city', 'urban'), ('city', 'densely'), ('city', 'several'), ('city', 'area'), ('city', 'large'), ('independent', 'city'), ('extent', 'large'), ('large', 'extent'), ('large', 'size'), ('large', 'quantity'), ('large', 'magnitude'), ('large', 'number'), ('large', 'average'), ('large', 'city'), ('districts', 'city'), ('administrative', 'city'), ('items', 'list'), ('list', 'items'), ('list', 'topics'), ('list', 'containing'), ('list', 'names'), ('list', 'ordered'), ('list', 'database'), ('list', 'array'), ('topics', 'list'), ('containing', 'list'), ('size', 'large'), ('populated', 'city'), ('quantity', 'large'), ('magnitude', 'large'), ('names', 'list'), ('ordered', 'list'), ('number', 'large'), ('urban', 'city'), ('database', 'list'), ('average', 'large'), ('densely', 'city'), ('several', 'city'), ('area', 'city'), ('array', 'list')]
Answer Textgraph  4 : ([('include', 2), ('city', 2), ('independent', 2), ('extent', 2), ('large', 2), ('districts', 2), ('administrative', 2), ('items', 2), ('list', 2), ('topics', 2), ('containing', 2), ('size', 2), ('populated', 2), ('quantity', 2), ('magnitude', 2), ('names', 2), ('ordered', 2), ('number', 2), ('urban', 2), ('database', 2), ('average', 2), ('densely', 2), ('several', 2), ('area', 2), ('array', 2)], [('city', 0.19704111242738964), ('list', 0.15026691853519095), ('large', 0.14012834413603203), ('items', 0.02424758306640129), ('topics', 0.02424758306640129), ('containing', 0.02424758306640129), ('names', 0.02424758306640129), ('ordered', 0.02424758306640129), ('database', 0.02424758306640129), ('array', 0.02424758306640129), ('extent', 0.023015391140034328), ('size', 0.023015391140034328), ('quantity', 0.023015391140034328), ('magnitude', 0.023015391140034328), ('number', 0.023015391140034328), ('average', 0.023015391140034328), ('include', 0.02274868851070807), ('independent', 0.02274868851070807), ('districts', 0.02274868851070807), ('administrative', 0.02274868851070807), ('populated', 0.02274868851070807), ('urban', 0.02274868851070807), ('densely', 0.02274868851070807), ('several', 0.02274868851070807), ('area', 0.02274868851070807)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.05, 0.05, 0.05], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( include , include ): 1.012
Key weight for textgraph edge ( include , include ): 4.024
Value weight for textgraph edge ( include , include ): 7.036
Query weight for textgraph edge ( include , city ): 2.0132
Key weight for textgraph edge ( include , city ): 5.0504
Value weight for textgraph edge ( include , city ): 8.0876
Query weight for textgraph edge ( include , independent ): 3.0338
Key weight for textgraph edge ( include , independent ): 6.2636
Value weight for textgraph edge ( include , independent ): 9.4934
Query weight for textgraph edge ( city , include ): 0.11580000000000001
Key weight for textgraph edge ( city , include ): 0.11580000000000001
Value weight for textgraph edge ( city , include ): 0.11580000000000001
Query weight for textgraph edge ( city , city ): 0.31758
Key weight for textgraph edge ( city , city ): 0.31758
Value weight for textgraph edge ( city , city ): 0.31758
Query weight for textgraph edge ( city , independent ): 0.52147
Key weight for textgraph edge ( city , independent ): 0.52147
Value weight for textgraph edge ( city , independent ): 0.52147
Query weight for textgraph edge ( independent , include ): 3.02
Key weight for textgraph edge ( independent , include ): 3.02
Value weight for textgraph edge ( independent , include ): 3.02
Query weight for textgraph edge ( independent , city ): 4.038
Key weight for textgraph edge ( independent , city ): 4.038
Value weight for textgraph edge ( independent , city ): 4.038
Query weight for textgraph edge ( independent , independent ): 5.187
Key weight for textgraph edge ( independent , independent ): 5.187
Value weight for textgraph edge ( independent , independent ): 5.187
wikipedia search result: List of islands by area
wikipedia search result summary: This list of islands by area includes all islands in the world larger than 2,500 km2 (970 sq mi) and most of the islands over 1,000 km2 (390 sq mi), sorted in descending order by area. For comparison, four very large continental landmasses are also shown.


2
defaultdict(<class 'list'>, {'particular': ['area'], 'island': ['island'], 'items': ['list'], 'topics': ['list'], 'containing': ['list'], 'names': ['list'], 'ordered': ['list'], 'purpose': ['area'], 'distinguished': ['area'], 'geography': ['area'], 'boundary': ['area'], 'database': ['list'], 'serving': ['area'], 'region': ['area'], 'special': ['area'], 'indefinite': ['area'], 'area': ['island'], 'people': ['area'], 'culture': ['area'], 'array': ['list'], 'resembling': ['island'], 'usually': ['area'], 'zone': ['island'], 'geographical': ['area']})
('definitiongraph networkx edges:', OutEdgeView([('particular', 'area'), ('area', 'particular'), ('area', 'purpose'), ('area', 'distinguished'), ('area', 'geography'), ('area', 'boundary'), ('area', 'serving'), ('area', 'region'), ('area', 'special'), ('area', 'indefinite'), ('area', 'island'), ('area', 'people'), ('area', 'culture'), ('area', 'usually'), ('area', 'geographical'), ('island', 'island'), ('island', 'area'), ('island', 'resembling'), ('island', 'zone'), ('items', 'list'), ('list', 'items'), ('list', 'topics'), ('list', 'containing'), ('list', 'names'), ('list', 'ordered'), ('list', 'database'), ('list', 'array'), ('topics', 'list'), ('containing', 'list'), ('names', 'list'), ('ordered', 'list'), ('purpose', 'area'), ('distinguished', 'area'), ('geography', 'area'), ('boundary', 'area'), ('database', 'list'), ('serving', 'area'), ('region', 'area'), ('special', 'area'), ('indefinite', 'area'), ('people', 'area'), ('culture', 'area'), ('array', 'list'), ('resembling', 'island'), ('usually', 'area'), ('zone', 'island'), ('geographical', 'area')]))
('Core number (sorted) :', [('particular', 2), ('area', 2), ('island', 2), ('items', 2), ('list', 2), ('topics', 2), ('containing', 2), ('names', 2), ('ordered', 2), ('purpose', 2), ('distinguished', 2), ('geography', 2), ('boundary', 2), ('database', 2), ('serving', 2), ('region', 2), ('special', 2), ('indefinite', 2), ('people', 2), ('culture', 2), ('array', 2), ('resembling', 2), ('usually', 2), ('zone', 2), ('geographical', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'particular', ',core number=', 2)
('This document belongs to class:', 'area', ',core number=', 2)
('This document belongs to class:', 'island', ',core number=', 2)
('This document belongs to class:', 'items', ',core number=', 2)
('This document belongs to class:', 'list', ',core number=', 2)
('This document belongs to class:', 'topics', ',core number=', 2)
('This document belongs to class:', 'containing', ',core number=', 2)
('This document belongs to class:', 'names', ',core number=', 2)
('This document belongs to class:', 'ordered', ',core number=', 2)
('This document belongs to class:', 'purpose', ',core number=', 2)
('This document belongs to class:', 'distinguished', ',core number=', 2)
('This document belongs to class:', 'geography', ',core number=', 2)
('This document belongs to class:', 'boundary', ',core number=', 2)
('This document belongs to class:', 'database', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('area', 0.42391304347826086), ('island', 0.10507246376811594), ('list', 0.07608695652173914), ('particular', 0.0), ('items', 0.0), ('topics', 0.0), ('containing', 0.0), ('names', 0.0), ('ordered', 0.0), ('purpose', 0.0), ('distinguished', 0.0), ('geography', 0.0), ('boundary', 0.0), ('database', 0.0), ('serving', 0.0), ('region', 0.0), ('special', 0.0), ('indefinite', 0.0), ('people', 0.0), ('culture', 0.0), ('array', 0.0), ('resembling', 0.0), ('usually', 0.0), ('zone', 0.0), ('geographical', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('area', 0.5925925925925926), ('island', 0.367816091954023), ('particular', 0.3232323232323232), ('purpose', 0.3232323232323232), ('distinguished', 0.3232323232323232), ('geography', 0.3232323232323232), ('boundary', 0.3232323232323232), ('serving', 0.3232323232323232), ('region', 0.3232323232323232), ('special', 0.3232323232323232), ('indefinite', 0.3232323232323232), ('people', 0.3232323232323232), ('culture', 0.3232323232323232), ('usually', 0.3232323232323232), ('geographical', 0.3232323232323232), ('list', 0.2916666666666667), ('resembling', 0.24242424242424243), ('zone', 0.24242424242424243), ('items', 0.15705128205128205), ('topics', 0.15705128205128205), ('containing', 0.15705128205128205), ('names', 0.15705128205128205), ('ordered', 0.15705128205128205), ('database', 0.15705128205128205), ('array', 0.15705128205128205)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('area', 1.1666666666666665), ('list', 0.5833333333333333), ('island', 0.25), ('particular', 0.08333333333333333), ('items', 0.08333333333333333), ('topics', 0.08333333333333333), ('containing', 0.08333333333333333), ('names', 0.08333333333333333), ('ordered', 0.08333333333333333), ('purpose', 0.08333333333333333), ('distinguished', 0.08333333333333333), ('geography', 0.08333333333333333), ('boundary', 0.08333333333333333), ('database', 0.08333333333333333), ('serving', 0.08333333333333333), ('region', 0.08333333333333333), ('special', 0.08333333333333333), ('indefinite', 0.08333333333333333), ('people', 0.08333333333333333), ('culture', 0.08333333333333333), ('array', 0.08333333333333333), ('resembling', 0.08333333333333333), ('usually', 0.08333333333333333), ('zone', 0.08333333333333333), ('geographical', 0.08333333333333333)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('area', 0.2742453203918131), ('list', 0.15026852064361051), ('island', 0.06337831039439008), ('items', 0.024247354193769922), ('topics', 0.024247354193769922), ('containing', 0.024247354193769922), ('names', 0.024247354193769922), ('ordered', 0.024247354193769922), ('database', 0.024247354193769922), ('array', 0.024247354193769922), ('resembling', 0.023956817060736445), ('zone', 0.023956817060736445), ('particular', 0.022650979622486456), ('purpose', 0.022650979622486456), ('distinguished', 0.022650979622486456), ('geography', 0.022650979622486456), ('boundary', 0.022650979622486456), ('serving', 0.022650979622486456), ('region', 0.022650979622486456), ('special', 0.022650979622486456), ('indefinite', 0.022650979622486456), ('people', 0.022650979622486456), ('culture', 0.022650979622486456), ('usually', 0.022650979622486456), ('geographical', 0.022650979622486456)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('particular', 'area'), ('area', 'particular'), ('area', 'purpose'), ('area', 'distinguished'), ('area', 'geography'), ('area', 'boundary'), ('area', 'serving'), ('area', 'region'), ('area', 'special'), ('area', 'indefinite'), ('area', 'island'), ('area', 'people'), ('area', 'culture'), ('area', 'usually'), ('area', 'geographical'), ('island', 'island'), ('island', 'area'), ('island', 'resembling'), ('island', 'zone'), ('items', 'list'), ('list', 'items'), ('list', 'topics'), ('list', 'containing'), ('list', 'names'), ('list', 'ordered'), ('list', 'database'), ('list', 'array'), ('topics', 'list'), ('containing', 'list'), ('names', 'list'), ('ordered', 'list'), ('purpose', 'area'), ('distinguished', 'area'), ('geography', 'area'), ('boundary', 'area'), ('database', 'list'), ('serving', 'area'), ('region', 'area'), ('special', 'area'), ('indefinite', 'area'), ('people', 'area'), ('culture', 'area'), ('array', 'list'), ('resembling', 'island'), ('usually', 'area'), ('zone', 'island'), ('geographical', 'area')]
Answer Textgraph  5 : ([('particular', 2), ('area', 2), ('island', 2), ('items', 2), ('list', 2), ('topics', 2), ('containing', 2), ('names', 2), ('ordered', 2), ('purpose', 2), ('distinguished', 2), ('geography', 2), ('boundary', 2), ('database', 2), ('serving', 2), ('region', 2), ('special', 2), ('indefinite', 2), ('people', 2), ('culture', 2), ('array', 2), ('resembling', 2), ('usually', 2), ('zone', 2), ('geographical', 2)], [('area', 0.2742453203918131), ('list', 0.15026852064361051), ('island', 0.06337831039439008), ('items', 0.024247354193769922), ('topics', 0.024247354193769922), ('containing', 0.024247354193769922), ('names', 0.024247354193769922), ('ordered', 0.024247354193769922), ('database', 0.024247354193769922), ('array', 0.024247354193769922), ('resembling', 0.023956817060736445), ('zone', 0.023956817060736445), ('particular', 0.022650979622486456), ('purpose', 0.022650979622486456), ('distinguished', 0.022650979622486456), ('geography', 0.022650979622486456), ('boundary', 0.022650979622486456), ('serving', 0.022650979622486456), ('region', 0.022650979622486456), ('special', 0.022650979622486456), ('indefinite', 0.022650979622486456), ('people', 0.022650979622486456), ('culture', 0.022650979622486456), ('usually', 0.022650979622486456), ('geographical', 0.022650979622486456)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.03571428571428571, 0.03571428571428571, 0.03571428571428571], [0.125, 0.125, 0.125]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11608571428571429
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1608571428571429, 0.18180000000000004, 0.2365571428571429]
weights: [0.11608571428571429, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31818
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1608571428571429, 0.18180000000000004, 0.2365571428571429]
weights: [0.11608571428571429, 0.31818, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5236557142857143
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1608571428571429, 0.18180000000000004, 0.2365571428571429]
weights updated after Gradient :  [0.11608571428571429, 0.31818, 0.5236557142857143]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.0275
LinearPerceptronGradient() weight update iteration: deltaw =  [0.275, 0.5375000000000001, 2.44375]
weights: [3.0275, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.05375
LinearPerceptronGradient() weight update iteration: deltaw =  [0.275, 0.5375000000000001, 2.44375]
weights: [3.0275, 4.05375, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.244375
LinearPerceptronGradient() weight update iteration: deltaw =  [0.275, 0.5375000000000001, 2.44375]
weights updated after Gradient :  [3.0275, 4.05375, 5.244375]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11608571428571429, 0.31818, 0.5236557142857143], [3.0275, 4.05375, 5.244375]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11608571428571429
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1608571428571429, 0.18180000000000004, 0.2365571428571429]
weights: [0.11608571428571429, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31818
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1608571428571429, 0.18180000000000004, 0.2365571428571429]
weights: [0.11608571428571429, 0.31818, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5236557142857143
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1608571428571429, 0.18180000000000004, 0.2365571428571429]
weights updated after Gradient :  [0.11608571428571429, 0.31818, 0.5236557142857143]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.0275
LinearPerceptronGradient() weight update iteration: deltaw =  [0.275, 0.5375000000000001, 2.44375]
weights: [3.0275, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.05375
LinearPerceptronGradient() weight update iteration: deltaw =  [0.275, 0.5375000000000001, 2.44375]
weights: [3.0275, 4.05375, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.244375
LinearPerceptronGradient() weight update iteration: deltaw =  [0.275, 0.5375000000000001, 2.44375]
weights updated after Gradient :  [3.0275, 4.05375, 5.244375]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11608571428571429, 0.31818, 0.5236557142857143], [3.0275, 4.05375, 5.244375]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11608571428571429
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1608571428571429, 0.18180000000000004, 0.2365571428571429]
weights: [0.11608571428571429, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31818
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1608571428571429, 0.18180000000000004, 0.2365571428571429]
weights: [0.11608571428571429, 0.31818, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5236557142857143
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1608571428571429, 0.18180000000000004, 0.2365571428571429]
weights updated after Gradient :  [0.11608571428571429, 0.31818, 0.5236557142857143]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.0275
LinearPerceptronGradient() weight update iteration: deltaw =  [0.275, 0.5375000000000001, 2.44375]
weights: [3.0275, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.05375
LinearPerceptronGradient() weight update iteration: deltaw =  [0.275, 0.5375000000000001, 2.44375]
weights: [3.0275, 4.05375, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.244375
LinearPerceptronGradient() weight update iteration: deltaw =  [0.275, 0.5375000000000001, 2.44375]
weights updated after Gradient :  [3.0275, 4.05375, 5.244375]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11608571428571429, 0.31818, 0.5236557142857143], [3.0275, 4.05375, 5.244375]]
Query weight for textgraph edge ( particular , particular ): 1.012
Key weight for textgraph edge ( particular , particular ): 4.024
Value weight for textgraph edge ( particular , particular ): 7.036
Query weight for textgraph edge ( particular , area ): 2.0132
Key weight for textgraph edge ( particular , area ): 5.0504
Value weight for textgraph edge ( particular , area ): 8.0876
Query weight for textgraph edge ( particular , island ): 3.0338
Key weight for textgraph edge ( particular , island ): 6.2636
Value weight for textgraph edge ( particular , island ): 9.4934
Query weight for textgraph edge ( area , particular ): 0.11608571428571429
Key weight for textgraph edge ( area , particular ): 0.11608571428571429
Value weight for textgraph edge ( area , particular ): 0.11608571428571429
Query weight for textgraph edge ( area , area ): 0.31818
Key weight for textgraph edge ( area , area ): 0.31818
Value weight for textgraph edge ( area , area ): 0.31818
Query weight for textgraph edge ( area , island ): 0.5236557142857143
Key weight for textgraph edge ( area , island ): 0.5236557142857143
Value weight for textgraph edge ( area , island ): 0.5236557142857143
Query weight for textgraph edge ( island , particular ): 3.0275
Key weight for textgraph edge ( island , particular ): 3.0275
Value weight for textgraph edge ( island , particular ): 3.0275
Query weight for textgraph edge ( island , area ): 4.05375
Key weight for textgraph edge ( island , area ): 4.05375
Value weight for textgraph edge ( island , area ): 4.05375
Query weight for textgraph edge ( island , island ): 5.244375
Key weight for textgraph edge ( island , island ): 5.244375
Value weight for textgraph edge ( island , island ): 5.244375
wikipedia search result: List of countries by GDP (nominal)
wikipedia search result summary: Gross domestic product (GDP) is the market value of all final goods and services from a nation in a given year. Countries are sorted by nominal GDP estimates from financial and statistical institutions, which are calculated at market or government official exchange rates. Nominal GDP does not take into account differences in the cost of living in different countries, and the results can vary greatly from one year to another based on fluctuations in the exchange rates of the country's currency. Such fluctuations may change a country's ranking from one year to the next, even though they often make little or no difference in the standard of living of its population.Comparisons of national wealth are also frequently made on the basis of purchasing power parity (PPP), to adjust for differences in the cost of living in different countries. Other metrics, nominal GDP per capita and a corresponding GDP (PPP) per capita are used for comparing national standard of living. On the whole, PPP per capita figures are less spread than nominal GDP per capita figures.The rankings of national economies have changed considerably over time, the United States surpassed the British Empire's output around 1916, which in turn had surpassed the Qing dynasty in aggregate output decades earlier. Since China's transition to a market-based economy through controlled privatisation and deregulation, the country has seen its ranking increase from ninth in 1978, to second in 2016; China's economic growth accelerated during this period and its share of global nominal GDP surged from 2% in 1980 to 15% in 2016. Among others, India has also experienced an economic boom since the implementation of economic liberalisation in the early 1990s.The first list includes estimates compiled by the International Monetary Fund's World Economic Outlook, the second list shows the World Bank's data, and the third list includes data compiled by the United Nations Statistics Division. The IMF definitive data for the past year and estimates for the current year are published twice a year in April and October. Non-sovereign entities (the world, continents, and some dependent territories) and states with limited international recognition (such as Kosovo, Palestine, and Taiwan) are included in the list where they appear in the sources.
2
defaultdict(<class 'list'>, {'verb': ['noun_phrase'], 'given': ['gross_domestic_product'], 'produced': ['gross_domestic_product'], 'function': ['noun_phrase'], 'workers': ['gross_domestic_product'], 'containing': ['list'], 'names': ['list'], 'United': ['gross_domestic_product'], 'States': ['gross_domestic_product'], 'phrase': ['noun_phrase'], 'politically': ['state'], 'database': ['list'], 'within': ['gross_domestic_product'], 'economy': ['gross_domestic_product'], 'nation': ['gross_domestic_product'], '1': ['gross_domestic_product'], 'measure': ['gross_domestic_product'], 'people': ['state'], 'period': ['gross_domestic_product'], 'services': ['gross_domestic_product'], 'body': ['state'], 'adopted': ['gross_domestic_product'], 'total': ['gross_domestic_product'], 'subject': ['noun_phrase'], 'single': ['state'], 'items': ['list'], 'topics': ['list'], 'ordered': ['list'], '1991': ['gross_domestic_product'], 'object': ['noun_phrase'], 'values': ['gross_domestic_product'], 'year': ['gross_domestic_product'], 'borders': ['gross_domestic_product'], 'capital': ['gross_domestic_product'], 'market': ['gross_domestic_product'], 'array': ['list'], 'goods': ['gross_domestic_product'], 'usually': ['gross_domestic_product'], 'organized': ['state'], 'government': ['state']})
('definitiongraph networkx edges:', OutEdgeView([('verb', 'noun_phrase'), ('noun_phrase', 'verb'), ('noun_phrase', 'function'), ('noun_phrase', 'phrase'), ('noun_phrase', 'subject'), ('noun_phrase', 'object'), ('given', 'gross_domestic_product'), ('gross_domestic_product', 'given'), ('gross_domestic_product', 'produced'), ('gross_domestic_product', 'workers'), ('gross_domestic_product', 'United'), ('gross_domestic_product', 'States'), ('gross_domestic_product', 'within'), ('gross_domestic_product', 'economy'), ('gross_domestic_product', 'nation'), ('gross_domestic_product', '1'), ('gross_domestic_product', 'measure'), ('gross_domestic_product', 'period'), ('gross_domestic_product', 'services'), ('gross_domestic_product', 'adopted'), ('gross_domestic_product', 'total'), ('gross_domestic_product', '1991'), ('gross_domestic_product', 'values'), ('gross_domestic_product', 'year'), ('gross_domestic_product', 'borders'), ('gross_domestic_product', 'capital'), ('gross_domestic_product', 'market'), ('gross_domestic_product', 'goods'), ('gross_domestic_product', 'usually'), ('produced', 'gross_domestic_product'), ('function', 'noun_phrase'), ('workers', 'gross_domestic_product'), ('containing', 'list'), ('list', 'containing'), ('list', 'names'), ('list', 'database'), ('list', 'items'), ('list', 'topics'), ('list', 'ordered'), ('list', 'array'), ('names', 'list'), ('United', 'gross_domestic_product'), ('States', 'gross_domestic_product'), ('phrase', 'noun_phrase'), ('politically', 'state'), ('state', 'politically'), ('state', 'people'), ('state', 'body'), ('state', 'single'), ('state', 'organized'), ('state', 'government'), ('database', 'list'), ('within', 'gross_domestic_product'), ('economy', 'gross_domestic_product'), ('nation', 'gross_domestic_product'), ('1', 'gross_domestic_product'), ('measure', 'gross_domestic_product'), ('people', 'state'), ('period', 'gross_domestic_product'), ('services', 'gross_domestic_product'), ('body', 'state'), ('adopted', 'gross_domestic_product'), ('total', 'gross_domestic_product'), ('subject', 'noun_phrase'), ('single', 'state'), ('items', 'list'), ('topics', 'list'), ('ordered', 'list'), ('1991', 'gross_domestic_product'), ('object', 'noun_phrase'), ('values', 'gross_domestic_product'), ('year', 'gross_domestic_product'), ('borders', 'gross_domestic_product'), ('capital', 'gross_domestic_product'), ('market', 'gross_domestic_product'), ('array', 'list'), ('goods', 'gross_domestic_product'), ('usually', 'gross_domestic_product'), ('organized', 'state'), ('government', 'state')]))
('Core number (sorted) :', [('verb', 2), ('noun_phrase', 2), ('given', 2), ('gross_domestic_product', 2), ('produced', 2), ('function', 2), ('workers', 2), ('containing', 2), ('list', 2), ('names', 2), ('United', 2), ('States', 2), ('phrase', 2), ('politically', 2), ('state', 2), ('database', 2), ('within', 2), ('economy', 2), ('nation', 2), ('1', 2), ('measure', 2), ('people', 2), ('period', 2), ('services', 2), ('body', 2), ('adopted', 2), ('total', 2), ('subject', 2), ('single', 2), ('items', 2), ('topics', 2), ('ordered', 2), ('1991', 2), ('object', 2), ('values', 2), ('year', 2), ('borders', 2), ('capital', 2), ('market', 2), ('array', 2), ('goods', 2), ('usually', 2), ('organized', 2), ('government', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'verb', ',core number=', 2)
('This document belongs to class:', 'noun_phrase', ',core number=', 2)
('This document belongs to class:', 'given', ',core number=', 2)
('This document belongs to class:', 'gross_domestic_product', ',core number=', 2)
('This document belongs to class:', 'produced', ',core number=', 2)
('This document belongs to class:', 'function', ',core number=', 2)
('This document belongs to class:', 'workers', ',core number=', 2)
('This document belongs to class:', 'containing', ',core number=', 2)
('This document belongs to class:', 'list', ',core number=', 2)
('This document belongs to class:', 'names', ',core number=', 2)
('This document belongs to class:', 'United', ',core number=', 2)
('This document belongs to class:', 'States', ',core number=', 2)
('This document belongs to class:', 'phrase', ',core number=', 2)
('This document belongs to class:', 'politically', ',core number=', 2)
('This document belongs to class:', 'state', ',core number=', 2)
('This document belongs to class:', 'database', ',core number=', 2)
('This document belongs to class:', 'within', ',core number=', 2)
('This document belongs to class:', 'economy', ',core number=', 2)
('This document belongs to class:', 'nation', ',core number=', 2)
('This document belongs to class:', '1', ',core number=', 2)
('This document belongs to class:', 'measure', ',core number=', 2)
('This document belongs to class:', 'people', ',core number=', 2)
('This document belongs to class:', 'period', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('gross_domestic_product', 0.2558139534883721), ('list', 0.023255813953488372), ('state', 0.01661129568106312), ('noun_phrase', 0.011074197120708748), ('verb', 0.0), ('given', 0.0), ('produced', 0.0), ('function', 0.0), ('workers', 0.0), ('containing', 0.0), ('names', 0.0), ('United', 0.0), ('States', 0.0), ('phrase', 0.0), ('politically', 0.0), ('database', 0.0), ('within', 0.0), ('economy', 0.0), ('nation', 0.0), ('1', 0.0), ('measure', 0.0), ('people', 0.0), ('period', 0.0), ('services', 0.0), ('body', 0.0), ('adopted', 0.0), ('total', 0.0), ('subject', 0.0), ('single', 0.0), ('items', 0.0), ('topics', 0.0), ('ordered', 0.0), ('1991', 0.0), ('object', 0.0), ('values', 0.0), ('year', 0.0), ('borders', 0.0), ('capital', 0.0), ('market', 0.0), ('array', 0.0), ('goods', 0.0), ('usually', 0.0), ('organized', 0.0), ('government', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('gross_domestic_product', 0.5116279069767442), ('given', 0.26176311519740403), ('produced', 0.26176311519740403), ('workers', 0.26176311519740403), ('United', 0.26176311519740403), ('States', 0.26176311519740403), ('within', 0.26176311519740403), ('economy', 0.26176311519740403), ('nation', 0.26176311519740403), ('1', 0.26176311519740403), ('measure', 0.26176311519740403), ('period', 0.26176311519740403), ('services', 0.26176311519740403), ('adopted', 0.26176311519740403), ('total', 0.26176311519740403), ('1991', 0.26176311519740403), ('values', 0.26176311519740403), ('year', 0.26176311519740403), ('borders', 0.26176311519740403), ('capital', 0.26176311519740403), ('market', 0.26176311519740403), ('goods', 0.26176311519740403), ('usually', 0.26176311519740403), ('list', 0.16279069767441862), ('state', 0.13953488372093023), ('noun_phrase', 0.11627906976744186), ('containing', 0.08765652951699464), ('names', 0.08765652951699464), ('database', 0.08765652951699464), ('items', 0.08765652951699464), ('topics', 0.08765652951699464), ('ordered', 0.08765652951699464), ('array', 0.08765652951699464), ('politically', 0.07610993657505284), ('people', 0.07610993657505284), ('body', 0.07610993657505284), ('single', 0.07610993657505284), ('organized', 0.07610993657505284), ('government', 0.07610993657505284), ('verb', 0.06459948320413438), ('function', 0.06459948320413438), ('phrase', 0.06459948320413438), ('subject', 0.06459948320413438), ('object', 0.06459948320413438)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('gross_domestic_product', 1.0232558139534884), ('list', 0.32558139534883723), ('state', 0.27906976744186046), ('noun_phrase', 0.23255813953488372), ('verb', 0.046511627906976744), ('given', 0.046511627906976744), ('produced', 0.046511627906976744), ('function', 0.046511627906976744), ('workers', 0.046511627906976744), ('containing', 0.046511627906976744), ('names', 0.046511627906976744), ('United', 0.046511627906976744), ('States', 0.046511627906976744), ('phrase', 0.046511627906976744), ('politically', 0.046511627906976744), ('database', 0.046511627906976744), ('within', 0.046511627906976744), ('economy', 0.046511627906976744), ('nation', 0.046511627906976744), ('1', 0.046511627906976744), ('measure', 0.046511627906976744), ('people', 0.046511627906976744), ('period', 0.046511627906976744), ('services', 0.046511627906976744), ('body', 0.046511627906976744), ('adopted', 0.046511627906976744), ('total', 0.046511627906976744), ('subject', 0.046511627906976744), ('single', 0.046511627906976744), ('items', 0.046511627906976744), ('topics', 0.046511627906976744), ('ordered', 0.046511627906976744), ('1991', 0.046511627906976744), ('object', 0.046511627906976744), ('values', 0.046511627906976744), ('year', 0.046511627906976744), ('borders', 0.046511627906976744), ('capital', 0.046511627906976744), ('market', 0.046511627906976744), ('array', 0.046511627906976744), ('goods', 0.046511627906976744), ('usually', 0.046511627906976744), ('organized', 0.046511627906976744), ('government', 0.046511627906976744)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('gross_domestic_product', 0.24202040758966306), ('list', 0.08538245411652709), ('state', 0.07493992388498472), ('noun_phrase', 0.06449739365344231), ('verb', 0.014373248542038815), ('function', 0.014373248542038815), ('phrase', 0.014373248542038815), ('subject', 0.014373248542038815), ('object', 0.014373248542038815), ('politically', 0.014025164200987403), ('people', 0.014025164200987403), ('body', 0.014025164200987403), ('single', 0.014025164200987403), ('organized', 0.014025164200987403), ('government', 0.014025164200987403), ('containing', 0.013776532528807816), ('names', 0.013776532528807816), ('database', 0.013776532528807816), ('items', 0.013776532528807816), ('topics', 0.013776532528807816), ('ordered', 0.013776532528807816), ('array', 0.013776532528807816), ('given', 0.01275940296080044), ('produced', 0.01275940296080044), ('workers', 0.01275940296080044), ('United', 0.01275940296080044), ('States', 0.01275940296080044), ('within', 0.01275940296080044), ('economy', 0.01275940296080044), ('nation', 0.01275940296080044), ('1', 0.01275940296080044), ('measure', 0.01275940296080044), ('period', 0.01275940296080044), ('services', 0.01275940296080044), ('adopted', 0.01275940296080044), ('total', 0.01275940296080044), ('1991', 0.01275940296080044), ('values', 0.01275940296080044), ('year', 0.01275940296080044), ('borders', 0.01275940296080044), ('capital', 0.01275940296080044), ('market', 0.01275940296080044), ('goods', 0.01275940296080044), ('usually', 0.01275940296080044)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('verb', 'noun_phrase'), ('noun_phrase', 'verb'), ('noun_phrase', 'function'), ('noun_phrase', 'phrase'), ('noun_phrase', 'subject'), ('noun_phrase', 'object'), ('given', 'gross_domestic_product'), ('gross_domestic_product', 'given'), ('gross_domestic_product', 'produced'), ('gross_domestic_product', 'workers'), ('gross_domestic_product', 'United'), ('gross_domestic_product', 'States'), ('gross_domestic_product', 'within'), ('gross_domestic_product', 'economy'), ('gross_domestic_product', 'nation'), ('gross_domestic_product', '1'), ('gross_domestic_product', 'measure'), ('gross_domestic_product', 'period'), ('gross_domestic_product', 'services'), ('gross_domestic_product', 'adopted'), ('gross_domestic_product', 'total'), ('gross_domestic_product', '1991'), ('gross_domestic_product', 'values'), ('gross_domestic_product', 'year'), ('gross_domestic_product', 'borders'), ('gross_domestic_product', 'capital'), ('gross_domestic_product', 'market'), ('gross_domestic_product', 'goods'), ('gross_domestic_product', 'usually'), ('produced', 'gross_domestic_product'), ('function', 'noun_phrase'), ('workers', 'gross_domestic_product'), ('containing', 'list'), ('list', 'containing'), ('list', 'names'), ('list', 'database'), ('list', 'items'), ('list', 'topics'), ('list', 'ordered'), ('list', 'array'), ('names', 'list'), ('United', 'gross_domestic_product'), ('States', 'gross_domestic_product'), ('phrase', 'noun_phrase'), ('politically', 'state'), ('state', 'politically'), ('state', 'people'), ('state', 'body'), ('state', 'single'), ('state', 'organized'), ('state', 'government'), ('database', 'list'), ('within', 'gross_domestic_product'), ('economy', 'gross_domestic_product'), ('nation', 'gross_domestic_product'), ('1', 'gross_domestic_product'), ('measure', 'gross_domestic_product'), ('people', 'state'), ('period', 'gross_domestic_product'), ('services', 'gross_domestic_product'), ('body', 'state'), ('adopted', 'gross_domestic_product'), ('total', 'gross_domestic_product'), ('subject', 'noun_phrase'), ('single', 'state'), ('items', 'list'), ('topics', 'list'), ('ordered', 'list'), ('1991', 'gross_domestic_product'), ('object', 'noun_phrase'), ('values', 'gross_domestic_product'), ('year', 'gross_domestic_product'), ('borders', 'gross_domestic_product'), ('capital', 'gross_domestic_product'), ('market', 'gross_domestic_product'), ('array', 'list'), ('goods', 'gross_domestic_product'), ('usually', 'gross_domestic_product'), ('organized', 'state'), ('government', 'state')]
Answer Textgraph  6 : ([('verb', 2), ('noun_phrase', 2), ('given', 2), ('gross_domestic_product', 2), ('produced', 2), ('function', 2), ('workers', 2), ('containing', 2), ('list', 2), ('names', 2), ('United', 2), ('States', 2), ('phrase', 2), ('politically', 2), ('state', 2), ('database', 2), ('within', 2), ('economy', 2), ('nation', 2), ('1', 2), ('measure', 2), ('people', 2), ('period', 2), ('services', 2), ('body', 2), ('adopted', 2), ('total', 2), ('subject', 2), ('single', 2), ('items', 2), ('topics', 2), ('ordered', 2), ('1991', 2), ('object', 2), ('values', 2), ('year', 2), ('borders', 2), ('capital', 2), ('market', 2), ('array', 2), ('goods', 2), ('usually', 2), ('organized', 2), ('government', 2)], [('gross_domestic_product', 0.24202040758966306), ('list', 0.08538245411652709), ('state', 0.07493992388498472), ('noun_phrase', 0.06449739365344231), ('verb', 0.014373248542038815), ('function', 0.014373248542038815), ('phrase', 0.014373248542038815), ('subject', 0.014373248542038815), ('object', 0.014373248542038815), ('politically', 0.014025164200987403), ('people', 0.014025164200987403), ('body', 0.014025164200987403), ('single', 0.014025164200987403), ('organized', 0.014025164200987403), ('government', 0.014025164200987403), ('containing', 0.013776532528807816), ('names', 0.013776532528807816), ('database', 0.013776532528807816), ('items', 0.013776532528807816), ('topics', 0.013776532528807816), ('ordered', 0.013776532528807816), ('array', 0.013776532528807816), ('given', 0.01275940296080044), ('produced', 0.01275940296080044), ('workers', 0.01275940296080044), ('United', 0.01275940296080044), ('States', 0.01275940296080044), ('within', 0.01275940296080044), ('economy', 0.01275940296080044), ('nation', 0.01275940296080044), ('1', 0.01275940296080044), ('measure', 0.01275940296080044), ('period', 0.01275940296080044), ('services', 0.01275940296080044), ('adopted', 0.01275940296080044), ('total', 0.01275940296080044), ('1991', 0.01275940296080044), ('values', 0.01275940296080044), ('year', 0.01275940296080044), ('borders', 0.01275940296080044), ('capital', 0.01275940296080044), ('market', 0.01275940296080044), ('goods', 0.01275940296080044), ('usually', 0.01275940296080044)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728, 0.022727272727272728], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.1, 0.1, 0.1], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11480000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31548
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.31548, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51382
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights updated after Gradient :  [0.11480000000000001, 0.31548, 0.51382]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11480000000000001, 0.31548, 0.51382], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11480000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31548
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.31548, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51382
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights updated after Gradient :  [0.11480000000000001, 0.31548, 0.51382]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11480000000000001, 0.31548, 0.51382], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11480000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31548
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.31548, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51382
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights updated after Gradient :  [0.11480000000000001, 0.31548, 0.51382]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11480000000000001, 0.31548, 0.51382], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( verb , verb ): 1.012
Key weight for textgraph edge ( verb , verb ): 4.024
Value weight for textgraph edge ( verb , verb ): 7.036
Query weight for textgraph edge ( verb , noun_phrase ): 2.0132
Key weight for textgraph edge ( verb , noun_phrase ): 5.0504
Value weight for textgraph edge ( verb , noun_phrase ): 8.0876
Query weight for textgraph edge ( verb , given ): 3.0338
Key weight for textgraph edge ( verb , given ): 6.2636
Value weight for textgraph edge ( verb , given ): 9.4934
Query weight for textgraph edge ( noun_phrase , verb ): 0.11480000000000001
Key weight for textgraph edge ( noun_phrase , verb ): 0.11480000000000001
Value weight for textgraph edge ( noun_phrase , verb ): 0.11480000000000001
Query weight for textgraph edge ( noun_phrase , noun_phrase ): 0.31548
Key weight for textgraph edge ( noun_phrase , noun_phrase ): 0.31548
Value weight for textgraph edge ( noun_phrase , noun_phrase ): 0.31548
Query weight for textgraph edge ( noun_phrase , given ): 0.51382
Key weight for textgraph edge ( noun_phrase , given ): 0.51382
Value weight for textgraph edge ( noun_phrase , given ): 0.51382
Query weight for textgraph edge ( given , verb ): 3.02
Key weight for textgraph edge ( given , verb ): 3.02
Value weight for textgraph edge ( given , verb ): 3.02
Query weight for textgraph edge ( given , noun_phrase ): 4.038
Key weight for textgraph edge ( given , noun_phrase ): 4.038
Value weight for textgraph edge ( given , noun_phrase ): 4.038
Query weight for textgraph edge ( given , given ): 5.187
Key weight for textgraph edge ( given , given ): 5.187
Value weight for textgraph edge ( given , given ): 5.187
wikipedia search result: List of largest banks
wikipedia search result summary: These are lists of the banks in the world, as measured by total assets.


2
defaultdict(<class 'list'>, {'extent': ['large'], 'Ocean': ['Banks'], 'botanist': ['Banks'], 'accompanied': ['Banks'], 'items': ['list'], 'containing': ['list'], 'Pacific': ['Banks'], 'topics': ['list'], 'size': ['large'], 'Cook': ['Banks'], 'quantity': ['large'], 'magnitude': ['large'], 'names': ['list'], '1743-1820': ['Banks'], 'ordered': ['list'], 'English': ['Banks'], 'first': ['Banks'], 'number': ['large'], 'database': ['list'], 'average': ['large'], 'voyage': ['Banks'], 'array': ['list'], 'Captain': ['Banks']})
('definitiongraph networkx edges:', OutEdgeView([('extent', 'large'), ('large', 'extent'), ('large', 'size'), ('large', 'quantity'), ('large', 'magnitude'), ('large', 'number'), ('large', 'average'), ('Ocean', 'Banks'), ('Banks', 'Ocean'), ('Banks', 'botanist'), ('Banks', 'accompanied'), ('Banks', 'Pacific'), ('Banks', 'Cook'), ('Banks', '1743-1820'), ('Banks', 'English'), ('Banks', 'first'), ('Banks', 'voyage'), ('Banks', 'Captain'), ('botanist', 'Banks'), ('accompanied', 'Banks'), ('items', 'list'), ('list', 'items'), ('list', 'containing'), ('list', 'topics'), ('list', 'names'), ('list', 'ordered'), ('list', 'database'), ('list', 'array'), ('containing', 'list'), ('Pacific', 'Banks'), ('topics', 'list'), ('size', 'large'), ('Cook', 'Banks'), ('quantity', 'large'), ('magnitude', 'large'), ('names', 'list'), ('1743-1820', 'Banks'), ('ordered', 'list'), ('English', 'Banks'), ('first', 'Banks'), ('number', 'large'), ('database', 'list'), ('average', 'large'), ('voyage', 'Banks'), ('array', 'list'), ('Captain', 'Banks')]))
('Core number (sorted) :', [('extent', 2), ('large', 2), ('Ocean', 2), ('Banks', 2), ('botanist', 2), ('accompanied', 2), ('items', 2), ('list', 2), ('containing', 2), ('Pacific', 2), ('topics', 2), ('size', 2), ('Cook', 2), ('quantity', 2), ('magnitude', 2), ('names', 2), ('1743-1820', 2), ('ordered', 2), ('English', 2), ('first', 2), ('number', 2), ('database', 2), ('average', 2), ('voyage', 2), ('array', 2), ('Captain', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'extent', ',core number=', 2)
('This document belongs to class:', 'large', ',core number=', 2)
('This document belongs to class:', 'Ocean', ',core number=', 2)
('This document belongs to class:', 'Banks', ',core number=', 2)
('This document belongs to class:', 'botanist', ',core number=', 2)
('This document belongs to class:', 'accompanied', ',core number=', 2)
('This document belongs to class:', 'items', ',core number=', 2)
('This document belongs to class:', 'list', ',core number=', 2)
('This document belongs to class:', 'containing', ',core number=', 2)
('This document belongs to class:', 'Pacific', ',core number=', 2)
('This document belongs to class:', 'topics', ',core number=', 2)
('This document belongs to class:', 'size', ',core number=', 2)
('This document belongs to class:', 'Cook', ',core number=', 2)
('This document belongs to class:', 'quantity', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Banks', 0.15000000000000002), ('list', 0.07), ('large', 0.05), ('extent', 0.0), ('Ocean', 0.0), ('botanist', 0.0), ('accompanied', 0.0), ('items', 0.0), ('containing', 0.0), ('Pacific', 0.0), ('topics', 0.0), ('size', 0.0), ('Cook', 0.0), ('quantity', 0.0), ('magnitude', 0.0), ('names', 0.0), ('1743-1820', 0.0), ('ordered', 0.0), ('English', 0.0), ('first', 0.0), ('number', 0.0), ('database', 0.0), ('average', 0.0), ('voyage', 0.0), ('array', 0.0), ('Captain', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Banks', 0.4), ('list', 0.28), ('large', 0.24), ('Ocean', 0.21052631578947367), ('botanist', 0.21052631578947367), ('accompanied', 0.21052631578947367), ('Pacific', 0.21052631578947367), ('Cook', 0.21052631578947367), ('1743-1820', 0.21052631578947367), ('English', 0.21052631578947367), ('first', 0.21052631578947367), ('voyage', 0.21052631578947367), ('Captain', 0.21052631578947367), ('items', 0.15076923076923077), ('containing', 0.15076923076923077), ('topics', 0.15076923076923077), ('names', 0.15076923076923077), ('ordered', 0.15076923076923077), ('database', 0.15076923076923077), ('array', 0.15076923076923077), ('extent', 0.1309090909090909), ('size', 0.1309090909090909), ('quantity', 0.1309090909090909), ('magnitude', 0.1309090909090909), ('number', 0.1309090909090909), ('average', 0.1309090909090909)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Banks', 0.8), ('list', 0.56), ('large', 0.48), ('extent', 0.08), ('Ocean', 0.08), ('botanist', 0.08), ('accompanied', 0.08), ('items', 0.08), ('containing', 0.08), ('Pacific', 0.08), ('topics', 0.08), ('size', 0.08), ('Cook', 0.08), ('quantity', 0.08), ('magnitude', 0.08), ('names', 0.08), ('1743-1820', 0.08), ('ordered', 0.08), ('English', 0.08), ('first', 0.08), ('number', 0.08), ('database', 0.08), ('average', 0.08), ('voyage', 0.08), ('array', 0.08), ('Captain', 0.08)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('Banks', 0.1975026740052075), ('list', 0.1444889621573178), ('large', 0.1268177248746879), ('extent', 0.023735507392680214), ('size', 0.023735507392680214), ('quantity', 0.023735507392680214), ('magnitude', 0.023735507392680214), ('number', 0.023735507392680214), ('average', 0.023735507392680214), ('items', 0.02331476364785569), ('containing', 0.02331476364785569), ('topics', 0.02331476364785569), ('names', 0.02331476364785569), ('ordered', 0.02331476364785569), ('database', 0.02331476364785569), ('array', 0.02331476364785569), ('Ocean', 0.022557424907171563), ('botanist', 0.022557424907171563), ('accompanied', 0.022557424907171563), ('Pacific', 0.022557424907171563), ('Cook', 0.022557424907171563), ('1743-1820', 0.022557424907171563), ('English', 0.022557424907171563), ('first', 0.022557424907171563), ('voyage', 0.022557424907171563), ('Captain', 0.022557424907171563)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('extent', 'large'), ('large', 'extent'), ('large', 'size'), ('large', 'quantity'), ('large', 'magnitude'), ('large', 'number'), ('large', 'average'), ('Ocean', 'Banks'), ('Banks', 'Ocean'), ('Banks', 'botanist'), ('Banks', 'accompanied'), ('Banks', 'Pacific'), ('Banks', 'Cook'), ('Banks', '1743-1820'), ('Banks', 'English'), ('Banks', 'first'), ('Banks', 'voyage'), ('Banks', 'Captain'), ('botanist', 'Banks'), ('accompanied', 'Banks'), ('items', 'list'), ('list', 'items'), ('list', 'containing'), ('list', 'topics'), ('list', 'names'), ('list', 'ordered'), ('list', 'database'), ('list', 'array'), ('containing', 'list'), ('Pacific', 'Banks'), ('topics', 'list'), ('size', 'large'), ('Cook', 'Banks'), ('quantity', 'large'), ('magnitude', 'large'), ('names', 'list'), ('1743-1820', 'Banks'), ('ordered', 'list'), ('English', 'Banks'), ('first', 'Banks'), ('number', 'large'), ('database', 'list'), ('average', 'large'), ('voyage', 'Banks'), ('array', 'list'), ('Captain', 'Banks')]
Answer Textgraph  7 : ([('extent', 2), ('large', 2), ('Ocean', 2), ('Banks', 2), ('botanist', 2), ('accompanied', 2), ('items', 2), ('list', 2), ('containing', 2), ('Pacific', 2), ('topics', 2), ('size', 2), ('Cook', 2), ('quantity', 2), ('magnitude', 2), ('names', 2), ('1743-1820', 2), ('ordered', 2), ('English', 2), ('first', 2), ('number', 2), ('database', 2), ('average', 2), ('voyage', 2), ('array', 2), ('Captain', 2)], [('Banks', 0.1975026740052075), ('list', 0.1444889621573178), ('large', 0.1268177248746879), ('extent', 0.023735507392680214), ('size', 0.023735507392680214), ('quantity', 0.023735507392680214), ('magnitude', 0.023735507392680214), ('number', 0.023735507392680214), ('average', 0.023735507392680214), ('items', 0.02331476364785569), ('containing', 0.02331476364785569), ('topics', 0.02331476364785569), ('names', 0.02331476364785569), ('ordered', 0.02331476364785569), ('database', 0.02331476364785569), ('array', 0.02331476364785569), ('Ocean', 0.022557424907171563), ('botanist', 0.022557424907171563), ('accompanied', 0.022557424907171563), ('Pacific', 0.022557424907171563), ('Cook', 0.022557424907171563), ('1743-1820', 0.022557424907171563), ('English', 0.022557424907171563), ('first', 0.022557424907171563), ('voyage', 0.022557424907171563), ('Captain', 0.022557424907171563)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( extent , extent ): 1.012
Key weight for textgraph edge ( extent , extent ): 4.024
Value weight for textgraph edge ( extent , extent ): 7.036
Query weight for textgraph edge ( extent , large ): 2.0132
Key weight for textgraph edge ( extent , large ): 5.0504
Value weight for textgraph edge ( extent , large ): 8.0876
Query weight for textgraph edge ( extent , Ocean ): 3.0338
Key weight for textgraph edge ( extent , Ocean ): 6.2636
Value weight for textgraph edge ( extent , Ocean ): 9.4934
Query weight for textgraph edge ( large , extent ): 0.11513333333333334
Key weight for textgraph edge ( large , extent ): 0.11513333333333334
Value weight for textgraph edge ( large , extent ): 0.11513333333333334
Query weight for textgraph edge ( large , large ): 0.31618
Key weight for textgraph edge ( large , large ): 0.31618
Value weight for textgraph edge ( large , large ): 0.31618
Query weight for textgraph edge ( large , Ocean ): 0.51637
Key weight for textgraph edge ( large , Ocean ): 0.51637
Value weight for textgraph edge ( large , Ocean ): 0.51637
Query weight for textgraph edge ( Ocean , extent ): 3.02
Key weight for textgraph edge ( Ocean , extent ): 3.02
Value weight for textgraph edge ( Ocean , extent ): 3.02
Query weight for textgraph edge ( Ocean , large ): 4.038
Key weight for textgraph edge ( Ocean , large ): 4.038
Value weight for textgraph edge ( Ocean , large ): 4.038
Query weight for textgraph edge ( Ocean , Ocean ): 5.187
Key weight for textgraph edge ( Ocean , Ocean ): 5.187
Value weight for textgraph edge ( Ocean , Ocean ): 5.187
wikipedia search result: Shopping mall
wikipedia search result summary: A shopping mall (or simply mall) is a North American term for a large indoor shopping center, usually anchored by department stores. The term "mall" originally meant a pedestrian promenade with shops along it (that is, the term was used to refer to the walkway itself which was merely bordered by such shops), but in the late 1960s, it began to be used as a generic term for the large enclosed shopping centers that were becoming commonplace at the time. In the U.K., such complexes are considered shopping centres (Commonwealth English: shopping centre), though "shopping center" covers many more sizes and types of centers than the North American "mall". Other countries may follow U.S. usage (Philippines, India, U.A.E., etc.) and others (Australia, etc.) follow U.K. usage. In Canadian English, and oftentimes in Australia and New Zealand, 'mall' may be used informally but 'shopping centre' or merely 'centre' will feature in the name of the complex (such as Toronto Eaton Centre). The term 'mall' is less-commonly a part of the name of the complex. 
Many malls have declined considerably in Northern America, and some have closed and become so-called "dead malls". Successful exceptions have added entertainment and experiential features, added big-box stores as anchors, or converted to other specialized shopping center formats such as power centers, lifestyle centers, factory outlet centers, and festival marketplaces. In Canada, shopping centres have frequently been replaced with mixed-use highrise communities.


2
defaultdict(<class 'list'>, {'pedestrian': ['promenade'], 'buying': ['shopping'], 'public': ['promenade'], 'area': ['promenade'], 'set': ['promenade'], 'searching': ['shopping'], 'aside': ['promenade'], 'walk': ['promenade'], 'services': ['shopping'], 'goods': ['shopping']})
('definitiongraph networkx edges:', OutEdgeView([('pedestrian', 'promenade'), ('promenade', 'pedestrian'), ('promenade', 'public'), ('promenade', 'area'), ('promenade', 'set'), ('promenade', 'aside'), ('promenade', 'walk'), ('buying', 'shopping'), ('shopping', 'buying'), ('shopping', 'searching'), ('shopping', 'services'), ('shopping', 'goods'), ('public', 'promenade'), ('area', 'promenade'), ('set', 'promenade'), ('searching', 'shopping'), ('aside', 'promenade'), ('walk', 'promenade'), ('services', 'shopping'), ('goods', 'shopping')]))
('Core number (sorted) :', [('pedestrian', 2), ('promenade', 2), ('buying', 2), ('shopping', 2), ('public', 2), ('area', 2), ('set', 2), ('searching', 2), ('aside', 2), ('walk', 2), ('services', 2), ('goods', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'pedestrian', ',core number=', 2)
('This document belongs to class:', 'promenade', ',core number=', 2)
('This document belongs to class:', 'buying', ',core number=', 2)
('This document belongs to class:', 'shopping', ',core number=', 2)
('This document belongs to class:', 'public', ',core number=', 2)
('This document belongs to class:', 'area', ',core number=', 2)
('This document belongs to class:', 'set', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('promenade', 0.2727272727272727), ('shopping', 0.10909090909090909), ('pedestrian', 0.0), ('buying', 0.0), ('public', 0.0), ('area', 0.0), ('set', 0.0), ('searching', 0.0), ('aside', 0.0), ('walk', 0.0), ('services', 0.0), ('goods', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('promenade', 0.5454545454545454), ('shopping', 0.36363636363636365), ('pedestrian', 0.29752066115702475), ('public', 0.29752066115702475), ('area', 0.29752066115702475), ('set', 0.29752066115702475), ('aside', 0.29752066115702475), ('walk', 0.29752066115702475), ('buying', 0.20779220779220778), ('searching', 0.20779220779220778), ('services', 0.20779220779220778), ('goods', 0.20779220779220778)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('promenade', 1.0909090909090908), ('shopping', 0.7272727272727273), ('pedestrian', 0.18181818181818182), ('buying', 0.18181818181818182), ('public', 0.18181818181818182), ('area', 0.18181818181818182), ('set', 0.18181818181818182), ('searching', 0.18181818181818182), ('aside', 0.18181818181818182), ('walk', 0.18181818181818182), ('services', 0.18181818181818182), ('goods', 0.18181818181818182)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('promenade', 0.2747731891566295), ('shopping', 0.19819724682731113), ('buying', 0.05461735495983887), ('searching', 0.05461735495983887), ('services', 0.05461735495983887), ('goods', 0.05461735495983887), ('pedestrian', 0.05142669069611726), ('public', 0.05142669069611726), ('area', 0.05142669069611726), ('set', 0.05142669069611726), ('aside', 0.05142669069611726), ('walk', 0.05142669069611726)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('pedestrian', 'promenade'), ('promenade', 'pedestrian'), ('promenade', 'public'), ('promenade', 'area'), ('promenade', 'set'), ('promenade', 'aside'), ('promenade', 'walk'), ('buying', 'shopping'), ('shopping', 'buying'), ('shopping', 'searching'), ('shopping', 'services'), ('shopping', 'goods'), ('public', 'promenade'), ('area', 'promenade'), ('set', 'promenade'), ('searching', 'shopping'), ('aside', 'promenade'), ('walk', 'promenade'), ('services', 'shopping'), ('goods', 'shopping')]
Answer Textgraph  8 : ([('pedestrian', 2), ('promenade', 2), ('buying', 2), ('shopping', 2), ('public', 2), ('area', 2), ('set', 2), ('searching', 2), ('aside', 2), ('walk', 2), ('services', 2), ('goods', 2)], [('promenade', 0.2747731891566295), ('shopping', 0.19819724682731113), ('buying', 0.05461735495983887), ('searching', 0.05461735495983887), ('services', 0.05461735495983887), ('goods', 0.05461735495983887), ('pedestrian', 0.05142669069611726), ('public', 0.05142669069611726), ('area', 0.05142669069611726), ('set', 0.05142669069611726), ('aside', 0.05142669069611726), ('walk', 0.05142669069611726)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( pedestrian , pedestrian ): 1.012
Key weight for textgraph edge ( pedestrian , pedestrian ): 4.024
Value weight for textgraph edge ( pedestrian , pedestrian ): 7.036
Query weight for textgraph edge ( pedestrian , promenade ): 2.0132
Key weight for textgraph edge ( pedestrian , promenade ): 5.0504
Value weight for textgraph edge ( pedestrian , promenade ): 8.0876
Query weight for textgraph edge ( pedestrian , buying ): 3.0338
Key weight for textgraph edge ( pedestrian , buying ): 6.2636
Value weight for textgraph edge ( pedestrian , buying ): 9.4934
Query weight for textgraph edge ( promenade , pedestrian ): 0.11513333333333334
Key weight for textgraph edge ( promenade , pedestrian ): 0.11513333333333334
Value weight for textgraph edge ( promenade , pedestrian ): 0.11513333333333334
Query weight for textgraph edge ( promenade , promenade ): 0.31618
Key weight for textgraph edge ( promenade , promenade ): 0.31618
Value weight for textgraph edge ( promenade , promenade ): 0.31618
Query weight for textgraph edge ( promenade , buying ): 0.51637
Key weight for textgraph edge ( promenade , buying ): 0.51637
Value weight for textgraph edge ( promenade , buying ): 0.51637
Query weight for textgraph edge ( buying , pedestrian ): 3.02
Key weight for textgraph edge ( buying , pedestrian ): 3.02
Value weight for textgraph edge ( buying , pedestrian ): 3.02
Query weight for textgraph edge ( buying , promenade ): 4.038
Key weight for textgraph edge ( buying , promenade ): 4.038
Value weight for textgraph edge ( buying , promenade ): 4.038
Query weight for textgraph edge ( buying , buying ): 5.187
Key weight for textgraph edge ( buying , buying ): 5.187
Value weight for textgraph edge ( buying , buying ): 5.187
wikipedia search result: List of largest hotels
wikipedia search result summary: This is a list of hotels that have 3,000 or more guest accommodation rooms. Since 2015, the largest hotel in the world is the First World Hotel in Malaysia with 7,351 rooms divided between two buildings. The largest single hotel building is MGM Grand Las Vegas, with 5,124 rooms in one building.


2
defaultdict(<class 'list'>, {'extent': ['large'], 'items': ['list'], 'topics': ['list'], 'containing': ['list'], 'size': ['large'], 'array': ['list'], 'quantity': ['large'], 'magnitude': ['large'], 'names': ['list'], 'ordered': ['list'], 'number': ['large'], 'database': ['list'], 'average': ['large'], 'pay': ['hotel'], 'meals': ['hotel'], 'services': ['hotel'], 'building': ['hotel'], 'travelers': ['hotel'], 'lodging': ['hotel']})
('definitiongraph networkx edges:', OutEdgeView([('extent', 'large'), ('large', 'extent'), ('large', 'size'), ('large', 'quantity'), ('large', 'magnitude'), ('large', 'number'), ('large', 'average'), ('items', 'list'), ('list', 'items'), ('list', 'topics'), ('list', 'containing'), ('list', 'array'), ('list', 'names'), ('list', 'ordered'), ('list', 'database'), ('topics', 'list'), ('containing', 'list'), ('size', 'large'), ('array', 'list'), ('quantity', 'large'), ('magnitude', 'large'), ('names', 'list'), ('ordered', 'list'), ('number', 'large'), ('database', 'list'), ('average', 'large'), ('pay', 'hotel'), ('hotel', 'pay'), ('hotel', 'meals'), ('hotel', 'services'), ('hotel', 'building'), ('hotel', 'travelers'), ('hotel', 'lodging'), ('meals', 'hotel'), ('services', 'hotel'), ('building', 'hotel'), ('travelers', 'hotel'), ('lodging', 'hotel')]))
('Core number (sorted) :', [('extent', 2), ('large', 2), ('items', 2), ('list', 2), ('topics', 2), ('containing', 2), ('size', 2), ('array', 2), ('quantity', 2), ('magnitude', 2), ('names', 2), ('ordered', 2), ('number', 2), ('database', 2), ('average', 2), ('pay', 2), ('hotel', 2), ('meals', 2), ('services', 2), ('building', 2), ('travelers', 2), ('lodging', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'extent', ',core number=', 2)
('This document belongs to class:', 'large', ',core number=', 2)
('This document belongs to class:', 'items', ',core number=', 2)
('This document belongs to class:', 'list', ',core number=', 2)
('This document belongs to class:', 'topics', ',core number=', 2)
('This document belongs to class:', 'containing', ',core number=', 2)
('This document belongs to class:', 'size', ',core number=', 2)
('This document belongs to class:', 'array', ',core number=', 2)
('This document belongs to class:', 'quantity', ',core number=', 2)
('This document belongs to class:', 'magnitude', ',core number=', 2)
('This document belongs to class:', 'names', ',core number=', 2)
('This document belongs to class:', 'ordered', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('list', 0.1), ('large', 0.07142857142857144), ('hotel', 0.07142857142857144), ('extent', 0.0), ('items', 0.0), ('topics', 0.0), ('containing', 0.0), ('size', 0.0), ('array', 0.0), ('quantity', 0.0), ('magnitude', 0.0), ('names', 0.0), ('ordered', 0.0), ('number', 0.0), ('database', 0.0), ('average', 0.0), ('pay', 0.0), ('meals', 0.0), ('services', 0.0), ('building', 0.0), ('travelers', 0.0), ('lodging', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('list', 0.3333333333333333), ('large', 0.2857142857142857), ('hotel', 0.2857142857142857), ('items', 0.17948717948717946), ('topics', 0.17948717948717946), ('containing', 0.17948717948717946), ('array', 0.17948717948717946), ('names', 0.17948717948717946), ('ordered', 0.17948717948717946), ('database', 0.17948717948717946), ('extent', 0.1558441558441558), ('size', 0.1558441558441558), ('quantity', 0.1558441558441558), ('magnitude', 0.1558441558441558), ('number', 0.1558441558441558), ('average', 0.1558441558441558), ('pay', 0.1558441558441558), ('meals', 0.1558441558441558), ('services', 0.1558441558441558), ('building', 0.1558441558441558), ('travelers', 0.1558441558441558), ('lodging', 0.1558441558441558)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('list', 0.6666666666666666), ('large', 0.5714285714285714), ('hotel', 0.5714285714285714), ('extent', 0.09523809523809523), ('items', 0.09523809523809523), ('topics', 0.09523809523809523), ('containing', 0.09523809523809523), ('size', 0.09523809523809523), ('array', 0.09523809523809523), ('quantity', 0.09523809523809523), ('magnitude', 0.09523809523809523), ('names', 0.09523809523809523), ('ordered', 0.09523809523809523), ('number', 0.09523809523809523), ('database', 0.09523809523809523), ('average', 0.09523809523809523), ('pay', 0.09523809523809523), ('meals', 0.09523809523809523), ('services', 0.09523809523809523), ('building', 0.09523809523809523), ('travelers', 0.09523809523809523), ('lodging', 0.09523809523809523)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('list', 0.17076336074196707), ('large', 0.14987855819406354), ('hotel', 0.14987855819406354), ('extent', 0.028050543331292456), ('size', 0.028050543331292456), ('quantity', 0.028050543331292456), ('magnitude', 0.028050543331292456), ('number', 0.028050543331292456), ('average', 0.028050543331292456), ('pay', 0.028050543331292456), ('meals', 0.028050543331292456), ('services', 0.028050543331292456), ('building', 0.028050543331292456), ('travelers', 0.028050543331292456), ('lodging', 0.028050543331292456), ('items', 0.027553286127770932), ('topics', 0.027553286127770932), ('containing', 0.027553286127770932), ('array', 0.027553286127770932), ('names', 0.027553286127770932), ('ordered', 0.027553286127770932), ('database', 0.027553286127770932)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('extent', 'large'), ('large', 'extent'), ('large', 'size'), ('large', 'quantity'), ('large', 'magnitude'), ('large', 'number'), ('large', 'average'), ('items', 'list'), ('list', 'items'), ('list', 'topics'), ('list', 'containing'), ('list', 'array'), ('list', 'names'), ('list', 'ordered'), ('list', 'database'), ('topics', 'list'), ('containing', 'list'), ('size', 'large'), ('array', 'list'), ('quantity', 'large'), ('magnitude', 'large'), ('names', 'list'), ('ordered', 'list'), ('number', 'large'), ('database', 'list'), ('average', 'large'), ('pay', 'hotel'), ('hotel', 'pay'), ('hotel', 'meals'), ('hotel', 'services'), ('hotel', 'building'), ('hotel', 'travelers'), ('hotel', 'lodging'), ('meals', 'hotel'), ('services', 'hotel'), ('building', 'hotel'), ('travelers', 'hotel'), ('lodging', 'hotel')]
Answer Textgraph  9 : ([('extent', 2), ('large', 2), ('items', 2), ('list', 2), ('topics', 2), ('containing', 2), ('size', 2), ('array', 2), ('quantity', 2), ('magnitude', 2), ('names', 2), ('ordered', 2), ('number', 2), ('database', 2), ('average', 2), ('pay', 2), ('hotel', 2), ('meals', 2), ('services', 2), ('building', 2), ('travelers', 2), ('lodging', 2)], [('list', 0.17076336074196707), ('large', 0.14987855819406354), ('hotel', 0.14987855819406354), ('extent', 0.028050543331292456), ('size', 0.028050543331292456), ('quantity', 0.028050543331292456), ('magnitude', 0.028050543331292456), ('number', 0.028050543331292456), ('average', 0.028050543331292456), ('pay', 0.028050543331292456), ('meals', 0.028050543331292456), ('services', 0.028050543331292456), ('building', 0.028050543331292456), ('travelers', 0.028050543331292456), ('lodging', 0.028050543331292456), ('items', 0.027553286127770932), ('topics', 0.027553286127770932), ('containing', 0.027553286127770932), ('array', 0.027553286127770932), ('names', 0.027553286127770932), ('ordered', 0.027553286127770932), ('database', 0.027553286127770932)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( extent , extent ): 1.012
Key weight for textgraph edge ( extent , extent ): 4.024
Value weight for textgraph edge ( extent , extent ): 7.036
Query weight for textgraph edge ( extent , large ): 2.0132
Key weight for textgraph edge ( extent , large ): 5.0504
Value weight for textgraph edge ( extent , large ): 8.0876
Query weight for textgraph edge ( extent , items ): 3.0338
Key weight for textgraph edge ( extent , items ): 6.2636
Value weight for textgraph edge ( extent , items ): 9.4934
Query weight for textgraph edge ( large , extent ): 0.11513333333333334
Key weight for textgraph edge ( large , extent ): 0.11513333333333334
Value weight for textgraph edge ( large , extent ): 0.11513333333333334
Query weight for textgraph edge ( large , large ): 0.31618
Key weight for textgraph edge ( large , large ): 0.31618
Value weight for textgraph edge ( large , large ): 0.31618
Query weight for textgraph edge ( large , items ): 0.51637
Key weight for textgraph edge ( large , items ): 0.51637
Value weight for textgraph edge ( large , items ): 0.51637
Query weight for textgraph edge ( items , extent ): 3.02
Key weight for textgraph edge ( items , extent ): 3.02
Value weight for textgraph edge ( items , extent ): 3.02
Query weight for textgraph edge ( items , large ): 4.038
Key weight for textgraph edge ( items , large ): 4.038
Value weight for textgraph edge ( items , large ): 4.038
Query weight for textgraph edge ( items , items ): 5.187
Key weight for textgraph edge ( items , items ): 5.187
Value weight for textgraph edge ( items , items ): 5.187
wikipedia search result: List of largest empires
wikipedia search result summary: Several empires in world history have been contenders for the largest of all time, depending on definition and mode of measurement. Possible ways of measuring size include area, population, economy, and power. Of these, area is the most commonly used because it has a fairly precise definition and can be feasibly measured with some degree of accuracy. Estonian political scientist Rein Taagepera, who published a series of academic articles about the territorial extents of historical empires between 1978 and 1997, defined an empire as "any relatively large sovereign political entity whose components are not sovereign" and its size as the area over which the empire has some undisputed military and taxation prerogatives. The list is not exhaustive owing to a lack of available data for several empires; for this reason and because of the inherent uncertainty in the estimates, no rankings are given.
2
defaultdict(<class 'list'>, {'extent': ['large'], 'items': ['list'], 'topics': ['list'], 'containing': ['list'], 'size': ['large'], 'imperial': ['empire'], 'domain': ['empire'], 'dominion': ['empire'], 'quantity': ['large'], 'magnitude': ['large'], 'names': ['list'], 'ordered': ['list'], 'number': ['large'], 'database': ['list'], 'average': ['large'], 'region': ['empire'], 'ruled': ['empire'], 'empress': ['empire'], 'array': ['list'], 'emperor': ['empire'], 'exercised': ['empire']})
('definitiongraph networkx edges:', OutEdgeView([('extent', 'large'), ('large', 'extent'), ('large', 'size'), ('large', 'quantity'), ('large', 'magnitude'), ('large', 'number'), ('large', 'average'), ('items', 'list'), ('list', 'items'), ('list', 'topics'), ('list', 'containing'), ('list', 'names'), ('list', 'ordered'), ('list', 'database'), ('list', 'array'), ('topics', 'list'), ('containing', 'list'), ('size', 'large'), ('imperial', 'empire'), ('empire', 'imperial'), ('empire', 'domain'), ('empire', 'dominion'), ('empire', 'region'), ('empire', 'ruled'), ('empire', 'empress'), ('empire', 'emperor'), ('empire', 'exercised'), ('domain', 'empire'), ('dominion', 'empire'), ('quantity', 'large'), ('magnitude', 'large'), ('names', 'list'), ('ordered', 'list'), ('number', 'large'), ('database', 'list'), ('average', 'large'), ('region', 'empire'), ('ruled', 'empire'), ('empress', 'empire'), ('array', 'list'), ('emperor', 'empire'), ('exercised', 'empire')]))
('Core number (sorted) :', [('extent', 2), ('large', 2), ('items', 2), ('list', 2), ('topics', 2), ('containing', 2), ('size', 2), ('imperial', 2), ('empire', 2), ('domain', 2), ('dominion', 2), ('quantity', 2), ('magnitude', 2), ('names', 2), ('ordered', 2), ('number', 2), ('database', 2), ('average', 2), ('region', 2), ('ruled', 2), ('empress', 2), ('array', 2), ('emperor', 2), ('exercised', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'extent', ',core number=', 2)
('This document belongs to class:', 'large', ',core number=', 2)
('This document belongs to class:', 'items', ',core number=', 2)
('This document belongs to class:', 'list', ',core number=', 2)
('This document belongs to class:', 'topics', ',core number=', 2)
('This document belongs to class:', 'containing', ',core number=', 2)
('This document belongs to class:', 'size', ',core number=', 2)
('This document belongs to class:', 'imperial', ',core number=', 2)
('This document belongs to class:', 'empire', ',core number=', 2)
('This document belongs to class:', 'domain', ',core number=', 2)
('This document belongs to class:', 'dominion', ',core number=', 2)
('This document belongs to class:', 'quantity', ',core number=', 2)
('This document belongs to class:', 'magnitude', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('empire', 0.11067193675889328), ('list', 0.08300395256916995), ('large', 0.05928853754940711), ('extent', 0.0), ('items', 0.0), ('topics', 0.0), ('containing', 0.0), ('size', 0.0), ('imperial', 0.0), ('domain', 0.0), ('dominion', 0.0), ('quantity', 0.0), ('magnitude', 0.0), ('names', 0.0), ('ordered', 0.0), ('number', 0.0), ('database', 0.0), ('average', 0.0), ('region', 0.0), ('ruled', 0.0), ('empress', 0.0), ('array', 0.0), ('emperor', 0.0), ('exercised', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('empire', 0.34782608695652173), ('list', 0.30434782608695654), ('large', 0.2608695652173913), ('imperial', 0.1855072463768116), ('domain', 0.1855072463768116), ('dominion', 0.1855072463768116), ('region', 0.1855072463768116), ('ruled', 0.1855072463768116), ('empress', 0.1855072463768116), ('emperor', 0.1855072463768116), ('exercised', 0.1855072463768116), ('items', 0.16387959866220736), ('topics', 0.16387959866220736), ('containing', 0.16387959866220736), ('names', 0.16387959866220736), ('ordered', 0.16387959866220736), ('database', 0.16387959866220736), ('array', 0.16387959866220736), ('extent', 0.14229249011857706), ('size', 0.14229249011857706), ('quantity', 0.14229249011857706), ('magnitude', 0.14229249011857706), ('number', 0.14229249011857706), ('average', 0.14229249011857706)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('empire', 0.6956521739130435), ('list', 0.6086956521739131), ('large', 0.5217391304347826), ('extent', 0.08695652173913043), ('items', 0.08695652173913043), ('topics', 0.08695652173913043), ('containing', 0.08695652173913043), ('size', 0.08695652173913043), ('imperial', 0.08695652173913043), ('domain', 0.08695652173913043), ('dominion', 0.08695652173913043), ('quantity', 0.08695652173913043), ('magnitude', 0.08695652173913043), ('names', 0.08695652173913043), ('ordered', 0.08695652173913043), ('number', 0.08695652173913043), ('database', 0.08695652173913043), ('average', 0.08695652173913043), ('region', 0.08695652173913043), ('ruled', 0.08695652173913043), ('empress', 0.08695652173913043), ('array', 0.08695652173913043), ('emperor', 0.08695652173913043), ('exercised', 0.08695652173913043)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('empire', 0.17567354939327667), ('list', 0.15652970900376093), ('large', 0.13738586861424515), ('extent', 0.02571346634207023), ('size', 0.02571346634207023), ('quantity', 0.02571346634207023), ('magnitude', 0.02571346634207023), ('number', 0.02571346634207023), ('average', 0.02571346634207023), ('items', 0.025257660618510334), ('topics', 0.025257660618510334), ('containing', 0.025257660618510334), ('names', 0.025257660618510334), ('ordered', 0.025257660618510334), ('database', 0.025257660618510334), ('array', 0.025257660618510334), ('imperial', 0.024915806325840416), ('domain', 0.024915806325840416), ('dominion', 0.024915806325840416), ('region', 0.024915806325840416), ('ruled', 0.024915806325840416), ('empress', 0.024915806325840416), ('emperor', 0.024915806325840416), ('exercised', 0.024915806325840416)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('extent', 'large'), ('large', 'extent'), ('large', 'size'), ('large', 'quantity'), ('large', 'magnitude'), ('large', 'number'), ('large', 'average'), ('items', 'list'), ('list', 'items'), ('list', 'topics'), ('list', 'containing'), ('list', 'names'), ('list', 'ordered'), ('list', 'database'), ('list', 'array'), ('topics', 'list'), ('containing', 'list'), ('size', 'large'), ('imperial', 'empire'), ('empire', 'imperial'), ('empire', 'domain'), ('empire', 'dominion'), ('empire', 'region'), ('empire', 'ruled'), ('empire', 'empress'), ('empire', 'emperor'), ('empire', 'exercised'), ('domain', 'empire'), ('dominion', 'empire'), ('quantity', 'large'), ('magnitude', 'large'), ('names', 'list'), ('ordered', 'list'), ('number', 'large'), ('database', 'list'), ('average', 'large'), ('region', 'empire'), ('ruled', 'empire'), ('empress', 'empire'), ('array', 'list'), ('emperor', 'empire'), ('exercised', 'empire')]
Answer Textgraph  10 : ([('extent', 2), ('large', 2), ('items', 2), ('list', 2), ('topics', 2), ('containing', 2), ('size', 2), ('imperial', 2), ('empire', 2), ('domain', 2), ('dominion', 2), ('quantity', 2), ('magnitude', 2), ('names', 2), ('ordered', 2), ('number', 2), ('database', 2), ('average', 2), ('region', 2), ('ruled', 2), ('empress', 2), ('array', 2), ('emperor', 2), ('exercised', 2)], [('empire', 0.17567354939327667), ('list', 0.15652970900376093), ('large', 0.13738586861424515), ('extent', 0.02571346634207023), ('size', 0.02571346634207023), ('quantity', 0.02571346634207023), ('magnitude', 0.02571346634207023), ('number', 0.02571346634207023), ('average', 0.02571346634207023), ('items', 0.025257660618510334), ('topics', 0.025257660618510334), ('containing', 0.025257660618510334), ('names', 0.025257660618510334), ('ordered', 0.025257660618510334), ('database', 0.025257660618510334), ('array', 0.025257660618510334), ('imperial', 0.024915806325840416), ('domain', 0.024915806325840416), ('dominion', 0.024915806325840416), ('region', 0.024915806325840416), ('ruled', 0.024915806325840416), ('empress', 0.024915806325840416), ('emperor', 0.024915806325840416), ('exercised', 0.024915806325840416)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( extent , extent ): 1.012
Key weight for textgraph edge ( extent , extent ): 4.024
Value weight for textgraph edge ( extent , extent ): 7.036
Query weight for textgraph edge ( extent , large ): 2.0132
Key weight for textgraph edge ( extent , large ): 5.0504
Value weight for textgraph edge ( extent , large ): 8.0876
Query weight for textgraph edge ( extent , items ): 3.0338
Key weight for textgraph edge ( extent , items ): 6.2636
Value weight for textgraph edge ( extent , items ): 9.4934
Query weight for textgraph edge ( large , extent ): 0.11513333333333334
Key weight for textgraph edge ( large , extent ): 0.11513333333333334
Value weight for textgraph edge ( large , extent ): 0.11513333333333334
Query weight for textgraph edge ( large , large ): 0.31618
Key weight for textgraph edge ( large , large ): 0.31618
Value weight for textgraph edge ( large , large ): 0.31618
Query weight for textgraph edge ( large , items ): 0.51637
Key weight for textgraph edge ( large , items ): 0.51637
Value weight for textgraph edge ( large , items ): 0.51637
Query weight for textgraph edge ( items , extent ): 3.02
Key weight for textgraph edge ( items , extent ): 3.02
Value weight for textgraph edge ( items , extent ): 3.02
Query weight for textgraph edge ( items , large ): 4.038
Key weight for textgraph edge ( items , large ): 4.038
Value weight for textgraph edge ( items , large ): 4.038
Query weight for textgraph edge ( items , items ): 5.187
Key weight for textgraph edge ( items , items ): 5.187
Value weight for textgraph edge ( items , items ): 5.187
