*** Introductory Examples for the NLTK Book ***
Loading text1, ..., text9 and sent1, ..., sent9
Type the name of the text or sentence to view it.
Type: 'texts()' or 'sents()' to list the materials.
text1: Moby Dick by Herman Melville 1851
text2: Sense and Sensibility by Jane Austen 1811
text3: The Book of Genesis
text4: Inaugural Address Corpus
text5: Chat Corpus
text6: Monty Python and the Holy Grail
text7: Wall Street Journal
text8: Personals Corpus
text9: The Man Who Was Thursday by G . K . Chesterton 1908
================================================================
Question: Define Theory of General Relativity
2
defaultdict(<class 'list'>, {'essential': ['specify'], 'variety': ['theory'], 'highest': ['general'], 'specific': ['theory'], 'theory': ['relativity'], 'time': ['relativity'], 'general': ['general'], 'world': ['theory'], 'determine': ['specify'], 'officer': ['general'], 'natural': ['theory'], 'concepts': ['relativity'], 'set': ['theory'], 'rank': ['general'], 'physics': ['relativity'], 'circumstances': ['theory'], 'space': ['relativity'], 'system': ['theory'], 'explain': ['theory'], 'knowledge': ['theory'], 'rather': ['relativity'], 'well-substantiated': ['theory'], 'accepted': ['theory'], 'absolute': ['relativity'], 'aspect': ['theory'], 'organized': ['theory'], 'relative': ['relativity'], 'applies': ['theory'], 'explanation': ['theory'], 'quality': ['specify'], 'phenomena': ['theory']})
('definitiongraph networkx edges:', OutEdgeView([('essential', 'specify'), ('specify', 'essential'), ('specify', 'determine'), ('specify', 'quality'), ('variety', 'theory'), ('theory', 'variety'), ('theory', 'specific'), ('theory', 'relativity'), ('theory', 'world'), ('theory', 'natural'), ('theory', 'set'), ('theory', 'circumstances'), ('theory', 'system'), ('theory', 'explain'), ('theory', 'knowledge'), ('theory', 'well-substantiated'), ('theory', 'accepted'), ('theory', 'aspect'), ('theory', 'organized'), ('theory', 'applies'), ('theory', 'explanation'), ('theory', 'phenomena'), ('highest', 'general'), ('general', 'highest'), ('general', 'general'), ('general', 'officer'), ('general', 'rank'), ('specific', 'theory'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'space'), ('relativity', 'rather'), ('relativity', 'absolute'), ('relativity', 'relative'), ('time', 'relativity'), ('world', 'theory'), ('determine', 'specify'), ('officer', 'general'), ('natural', 'theory'), ('concepts', 'relativity'), ('set', 'theory'), ('rank', 'general'), ('physics', 'relativity'), ('circumstances', 'theory'), ('space', 'relativity'), ('system', 'theory'), ('explain', 'theory'), ('knowledge', 'theory'), ('rather', 'relativity'), ('well-substantiated', 'theory'), ('accepted', 'theory'), ('absolute', 'relativity'), ('aspect', 'theory'), ('organized', 'theory'), ('relative', 'relativity'), ('applies', 'theory'), ('explanation', 'theory'), ('quality', 'specify'), ('phenomena', 'theory')]))
('Core number (sorted) :', [('essential', 2), ('specify', 2), ('variety', 2), ('theory', 2), ('highest', 2), ('general', 2), ('specific', 2), ('relativity', 2), ('time', 2), ('world', 2), ('determine', 2), ('officer', 2), ('natural', 2), ('concepts', 2), ('set', 2), ('rank', 2), ('physics', 2), ('circumstances', 2), ('space', 2), ('system', 2), ('explain', 2), ('knowledge', 2), ('rather', 2), ('well-substantiated', 2), ('accepted', 2), ('absolute', 2), ('aspect', 2), ('organized', 2), ('relative', 2), ('applies', 2), ('explanation', 2), ('quality', 2), ('phenomena', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'essential', ',core number=', 2)
('This document belongs to class:', 'specify', ',core number=', 2)
('This document belongs to class:', 'variety', ',core number=', 2)
('This document belongs to class:', 'theory', ',core number=', 2)
('This document belongs to class:', 'highest', ',core number=', 2)
('This document belongs to class:', 'general', ',core number=', 2)
('This document belongs to class:', 'specific', ',core number=', 2)
('This document belongs to class:', 'relativity', ',core number=', 2)
('This document belongs to class:', 'time', ',core number=', 2)
('This document belongs to class:', 'world', ',core number=', 2)
('This document belongs to class:', 'determine', ',core number=', 2)
('This document belongs to class:', 'officer', ',core number=', 2)
('This document belongs to class:', 'natural', ',core number=', 2)
('This document belongs to class:', 'concepts', ',core number=', 2)
('This document belongs to class:', 'set', ',core number=', 2)
('This document belongs to class:', 'rank', ',core number=', 2)
('This document belongs to class:', 'physics', ',core number=', 2)
('This document belongs to class:', 'circumstances', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('theory', 0.5), ('relativity', 0.282258064516129), ('specify', 0.006048387096774193), ('general', 0.006048387096774193), ('essential', 0.0), ('variety', 0.0), ('highest', 0.0), ('specific', 0.0), ('time', 0.0), ('world', 0.0), ('determine', 0.0), ('officer', 0.0), ('natural', 0.0), ('concepts', 0.0), ('set', 0.0), ('rank', 0.0), ('physics', 0.0), ('circumstances', 0.0), ('space', 0.0), ('system', 0.0), ('explain', 0.0), ('knowledge', 0.0), ('rather', 0.0), ('well-substantiated', 0.0), ('accepted', 0.0), ('absolute', 0.0), ('aspect', 0.0), ('organized', 0.0), ('relative', 0.0), ('applies', 0.0), ('explanation', 0.0), ('quality', 0.0), ('phenomena', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('theory', 0.5806451612903225), ('relativity', 0.44999999999999996), ('variety', 0.3333333333333333), ('specific', 0.3333333333333333), ('world', 0.3333333333333333), ('natural', 0.3333333333333333), ('set', 0.3333333333333333), ('circumstances', 0.3333333333333333), ('system', 0.3333333333333333), ('explain', 0.3333333333333333), ('knowledge', 0.3333333333333333), ('well-substantiated', 0.3333333333333333), ('accepted', 0.3333333333333333), ('aspect', 0.3333333333333333), ('organized', 0.3333333333333333), ('applies', 0.3333333333333333), ('explanation', 0.3333333333333333), ('phenomena', 0.3333333333333333), ('time', 0.2857142857142857), ('concepts', 0.2857142857142857), ('physics', 0.2857142857142857), ('space', 0.2857142857142857), ('rather', 0.2857142857142857), ('absolute', 0.2857142857142857), ('relative', 0.2857142857142857), ('specify', 0.09375), ('general', 0.09375), ('essential', 0.056249999999999994), ('highest', 0.056249999999999994), ('determine', 0.056249999999999994), ('officer', 0.056249999999999994), ('rank', 0.056249999999999994), ('quality', 0.056249999999999994)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('theory', 1.0625), ('relativity', 0.5), ('specify', 0.1875), ('general', 0.1875), ('essential', 0.0625), ('variety', 0.0625), ('highest', 0.0625), ('specific', 0.0625), ('time', 0.0625), ('world', 0.0625), ('determine', 0.0625), ('officer', 0.0625), ('natural', 0.0625), ('concepts', 0.0625), ('set', 0.0625), ('rank', 0.0625), ('physics', 0.0625), ('circumstances', 0.0625), ('space', 0.0625), ('system', 0.0625), ('explain', 0.0625), ('knowledge', 0.0625), ('rather', 0.0625), ('well-substantiated', 0.0625), ('accepted', 0.0625), ('absolute', 0.0625), ('aspect', 0.0625), ('organized', 0.0625), ('relative', 0.0625), ('applies', 0.0625), ('explanation', 0.0625), ('quality', 0.0625), ('phenomena', 0.0625)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('theory', 0.24705831990160293), ('relativity', 0.11947152519737789), ('specify', 0.05815005391111379), ('general', 0.05815005391111379), ('essential', 0.021020689100335804), ('highest', 0.021020689100335804), ('determine', 0.021020689100335804), ('officer', 0.021020689100335804), ('rank', 0.021020689100335804), ('quality', 0.021020689100335804), ('time', 0.017239646965573608), ('concepts', 0.017239646965573608), ('physics', 0.017239646965573608), ('space', 0.017239646965573608), ('rather', 0.017239646965573608), ('absolute', 0.017239646965573608), ('relative', 0.017239646965573608), ('variety', 0.01689802398236009), ('specific', 0.01689802398236009), ('world', 0.01689802398236009), ('natural', 0.01689802398236009), ('set', 0.01689802398236009), ('circumstances', 0.01689802398236009), ('system', 0.01689802398236009), ('explain', 0.01689802398236009), ('knowledge', 0.01689802398236009), ('well-substantiated', 0.01689802398236009), ('accepted', 0.01689802398236009), ('aspect', 0.01689802398236009), ('organized', 0.01689802398236009), ('applies', 0.01689802398236009), ('explanation', 0.01689802398236009), ('phenomena', 0.01689802398236009)]
Question Textgraph: ([('essential', 2), ('specify', 2), ('variety', 2), ('theory', 2), ('highest', 2), ('general', 2), ('specific', 2), ('relativity', 2), ('time', 2), ('world', 2), ('determine', 2), ('officer', 2), ('natural', 2), ('concepts', 2), ('set', 2), ('rank', 2), ('physics', 2), ('circumstances', 2), ('space', 2), ('system', 2), ('explain', 2), ('knowledge', 2), ('rather', 2), ('well-substantiated', 2), ('accepted', 2), ('absolute', 2), ('aspect', 2), ('organized', 2), ('relative', 2), ('applies', 2), ('explanation', 2), ('quality', 2), ('phenomena', 2)], [('theory', 0.24705831990160293), ('relativity', 0.11947152519737789), ('specify', 0.05815005391111379), ('general', 0.05815005391111379), ('essential', 0.021020689100335804), ('highest', 0.021020689100335804), ('determine', 0.021020689100335804), ('officer', 0.021020689100335804), ('rank', 0.021020689100335804), ('quality', 0.021020689100335804), ('time', 0.017239646965573608), ('concepts', 0.017239646965573608), ('physics', 0.017239646965573608), ('space', 0.017239646965573608), ('rather', 0.017239646965573608), ('absolute', 0.017239646965573608), ('relative', 0.017239646965573608), ('variety', 0.01689802398236009), ('specific', 0.01689802398236009), ('world', 0.01689802398236009), ('natural', 0.01689802398236009), ('set', 0.01689802398236009), ('circumstances', 0.01689802398236009), ('system', 0.01689802398236009), ('explain', 0.01689802398236009), ('knowledge', 0.01689802398236009), ('well-substantiated', 0.01689802398236009), ('accepted', 0.01689802398236009), ('aspect', 0.01689802398236009), ('organized', 0.01689802398236009), ('applies', 0.01689802398236009), ('explanation', 0.01689802398236009), ('phenomena', 0.01689802398236009)])
Init of ConceptNet Client
wikipedia search result: General relativity
wikipedia search result summary: General relativity, also known as the general theory of relativity and Einstein's theory of gravity, is the geometric theory of gravitation published by Albert Einstein in 1915 and is the current description of gravitation in modern physics. General relativity generalizes special relativity and refines Newton's law of universal gravitation, providing a unified description of gravity as a geometric property of space and time or four-dimensional spacetime. In particular, the curvature of spacetime is directly related to the energy and momentum of whatever matter and radiation are present. The relation is specified by the Einstein field equations, a system of second order partial differential equations.
Newton's law of universal gravitation, which describes classical gravity, can be seen as a prediction of general relativity for the almost flat spacetime geometry around stationary mass distributions.  Some predictions of general relativity, however, are beyond Newton's law of universal gravitation in classical physics. These predictions concern the passage of time, the geometry of space, the motion of bodies in free fall, and the propagation of light, and include gravitational time dilation, gravitational lensing, the gravitational redshift of light, the Shapiro time delay and singularities/black holes. So far, all tests of general relativity have been shown to be in agreement with the theory. The time dependent solutions of general relativity enable us to talk about the history of the universe and have provided the modern framework for cosmology, thus leading to the discovery of the Big Bang and cosmic microwave background radiation. Despite the introduction of a number of alternative theories, general relativity continues to be the simplest theory consistent with experimental data.
Reconciliation of general relativity with the laws of quantum physics remains a problem, however, as there is a lack of a self-consistent theory of quantum gravity. It is not yet known how gravity can be unified with the three non-gravitational forces: strong, weak and electromagnetic.
Einstein's theory has astrophysical implications, including the prediction of black holes—regions of space in which space and time are distorted in such a way that nothing, not even light, can escape from them. Black holes are the end-state for massive stars. Microquasars and active galactic nuclei are believed to be stellar black holes and supermassive black holes. It also predicts gravitational lensing, where the bending of light results in multiple images of the same distant astronomical phenomenon. Other predictions include the existence of gravitational waves, which have been observed directly by the physics collaboration LIGO and other observatories. In addition, general relativity has provided the base of cosmological models of an expanding universe.
Widely acknowledged as a theory of extraordinary beauty, general relativity has often been described as the most beautiful of all existing physical theories.
2
defaultdict(<class 'list'>, {'highest': ['general'], 'theory': ['relativity'], 'time': ['relativity'], 'rather': ['relativity'], 'general': ['general'], 'officer': ['general'], 'relative': ['relativity'], 'concepts': ['relativity'], 'physics': ['relativity'], 'rank': ['general'], 'absolute': ['relativity'], 'space': ['relativity']})
('definitiongraph networkx edges:', OutEdgeView([('highest', 'general'), ('general', 'highest'), ('general', 'general'), ('general', 'officer'), ('general', 'rank'), ('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'rather'), ('relativity', 'relative'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'absolute'), ('relativity', 'space'), ('time', 'relativity'), ('rather', 'relativity'), ('officer', 'general'), ('relative', 'relativity'), ('concepts', 'relativity'), ('physics', 'relativity'), ('rank', 'general'), ('absolute', 'relativity'), ('space', 'relativity')]))
('Core number (sorted) :', [('highest', 2), ('general', 2), ('theory', 2), ('relativity', 2), ('time', 2), ('rather', 2), ('officer', 2), ('relative', 2), ('concepts', 2), ('physics', 2), ('rank', 2), ('absolute', 2), ('space', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'highest', ',core number=', 2)
('This document belongs to class:', 'general', ',core number=', 2)
('This document belongs to class:', 'theory', ',core number=', 2)
('This document belongs to class:', 'relativity', ',core number=', 2)
('This document belongs to class:', 'time', ',core number=', 2)
('This document belongs to class:', 'rather', ',core number=', 2)
('This document belongs to class:', 'officer', ',core number=', 2)
('This document belongs to class:', 'relative', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.42424242424242425), ('general', 0.045454545454545456), ('highest', 0.0), ('theory', 0.0), ('time', 0.0), ('rather', 0.0), ('officer', 0.0), ('relative', 0.0), ('concepts', 0.0), ('physics', 0.0), ('rank', 0.0), ('absolute', 0.0), ('space', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.6666666666666666), ('theory', 0.3555555555555555), ('time', 0.3555555555555555), ('rather', 0.3555555555555555), ('relative', 0.3555555555555555), ('concepts', 0.3555555555555555), ('physics', 0.3555555555555555), ('absolute', 0.3555555555555555), ('space', 0.3555555555555555), ('general', 0.25), ('highest', 0.15), ('officer', 0.15), ('rank', 0.15)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 1.3333333333333333), ('general', 0.5), ('highest', 0.16666666666666666), ('theory', 0.16666666666666666), ('time', 0.16666666666666666), ('rather', 0.16666666666666666), ('officer', 0.16666666666666666), ('relative', 0.16666666666666666), ('concepts', 0.16666666666666666), ('physics', 0.16666666666666666), ('rank', 0.16666666666666666), ('absolute', 0.16666666666666666), ('space', 0.16666666666666666)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('relativity', 0.3243222752177984), ('general', 0.14760856215014012), ('highest', 0.05336124851405581), ('officer', 0.05336124851405581), ('rank', 0.05336124851405581), ('theory', 0.04599817713623674), ('time', 0.04599817713623674), ('rather', 0.04599817713623674), ('relative', 0.04599817713623674), ('concepts', 0.04599817713623674), ('physics', 0.04599817713623674), ('absolute', 0.04599817713623674), ('space', 0.04599817713623674)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('highest', 'general'), ('general', 'highest'), ('general', 'general'), ('general', 'officer'), ('general', 'rank'), ('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'rather'), ('relativity', 'relative'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'absolute'), ('relativity', 'space'), ('time', 'relativity'), ('rather', 'relativity'), ('officer', 'general'), ('relative', 'relativity'), ('concepts', 'relativity'), ('physics', 'relativity'), ('rank', 'general'), ('absolute', 'relativity'), ('space', 'relativity')]
Answer Textgraph  1 : ([('highest', 2), ('general', 2), ('theory', 2), ('relativity', 2), ('time', 2), ('rather', 2), ('officer', 2), ('relative', 2), ('concepts', 2), ('physics', 2), ('rank', 2), ('absolute', 2), ('space', 2)], [('relativity', 0.3243222752177984), ('general', 0.14760856215014012), ('highest', 0.05336124851405581), ('officer', 0.05336124851405581), ('rank', 0.05336124851405581), ('theory', 0.04599817713623674), ('time', 0.04599817713623674), ('rather', 0.04599817713623674), ('relative', 0.04599817713623674), ('concepts', 0.04599817713623674), ('physics', 0.04599817713623674), ('absolute', 0.04599817713623674), ('space', 0.04599817713623674)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.125, 0.125, 0.125], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11430000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31443
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.31443, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.509995
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights updated after Gradient :  [0.11430000000000001, 0.31443, 0.509995]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11430000000000001, 0.31443, 0.509995], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11430000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31443
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.31443, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.509995
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights updated after Gradient :  [0.11430000000000001, 0.31443, 0.509995]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11430000000000001, 0.31443, 0.509995], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11430000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31443
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.31443, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.509995
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights updated after Gradient :  [0.11430000000000001, 0.31443, 0.509995]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11430000000000001, 0.31443, 0.509995], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( highest , highest ): 1.012
Key weight for textgraph edge ( highest , highest ): 4.024
Value weight for textgraph edge ( highest , highest ): 7.036
Query weight for textgraph edge ( highest , general ): 2.0132
Key weight for textgraph edge ( highest , general ): 5.0504
Value weight for textgraph edge ( highest , general ): 8.0876
Query weight for textgraph edge ( highest , theory ): 3.0338
Key weight for textgraph edge ( highest , theory ): 6.2636
Value weight for textgraph edge ( highest , theory ): 9.4934
Query weight for textgraph edge ( general , highest ): 0.11430000000000001
Key weight for textgraph edge ( general , highest ): 0.11430000000000001
Value weight for textgraph edge ( general , highest ): 0.11430000000000001
Query weight for textgraph edge ( general , general ): 0.31443
Key weight for textgraph edge ( general , general ): 0.31443
Value weight for textgraph edge ( general , general ): 0.31443
Query weight for textgraph edge ( general , theory ): 0.509995
Key weight for textgraph edge ( general , theory ): 0.509995
Value weight for textgraph edge ( general , theory ): 0.509995
Query weight for textgraph edge ( theory , highest ): 3.02
Key weight for textgraph edge ( theory , highest ): 3.02
Value weight for textgraph edge ( theory , highest ): 3.02
Query weight for textgraph edge ( theory , general ): 4.038
Key weight for textgraph edge ( theory , general ): 4.038
Value weight for textgraph edge ( theory , general ): 4.038
Query weight for textgraph edge ( theory , theory ): 5.187
Key weight for textgraph edge ( theory , theory ): 5.187
Value weight for textgraph edge ( theory , theory ): 5.187
wikipedia search result: Mathematics of general relativity
wikipedia search result summary: When studying and formulating Albert Einstein's theory of general relativity, various mathematical structures and techniques are utilized. The main tools used in this geometrical theory of gravitation are tensor fields defined on a Lorentzian manifold representing spacetime. This article is a general description of the mathematics of general relativity.
Note: General relativity articles using tensors will use the abstract index notation.
2
defaultdict(<class 'list'>, {'science': ['mathematics'], 'highest': ['general'], 'theory': ['relativity'], 'time': ['relativity'], 'general': ['general'], 'officer': ['general'], 'concepts': ['relativity'], 'physics': ['relativity'], 'quantity': ['mathematics'], 'rank': ['general'], 'space': ['relativity'], 'arrangement': ['mathematics'], 'related': ['mathematics'], 'logic': ['mathematics'], 'rather': ['relativity'], 'group': ['mathematics'], 'absolute': ['relativity'], 'shape': ['mathematics'], 'dealing': ['mathematics'], 'relative': ['relativity'], 'sciences': ['mathematics']})
('definitiongraph networkx edges:', OutEdgeView([('science', 'mathematics'), ('mathematics', 'science'), ('mathematics', 'quantity'), ('mathematics', 'arrangement'), ('mathematics', 'related'), ('mathematics', 'logic'), ('mathematics', 'group'), ('mathematics', 'shape'), ('mathematics', 'dealing'), ('mathematics', 'sciences'), ('highest', 'general'), ('general', 'highest'), ('general', 'general'), ('general', 'officer'), ('general', 'rank'), ('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'space'), ('relativity', 'rather'), ('relativity', 'absolute'), ('relativity', 'relative'), ('time', 'relativity'), ('officer', 'general'), ('concepts', 'relativity'), ('physics', 'relativity'), ('quantity', 'mathematics'), ('rank', 'general'), ('space', 'relativity'), ('arrangement', 'mathematics'), ('related', 'mathematics'), ('logic', 'mathematics'), ('rather', 'relativity'), ('group', 'mathematics'), ('absolute', 'relativity'), ('shape', 'mathematics'), ('dealing', 'mathematics'), ('relative', 'relativity'), ('sciences', 'mathematics')]))
('Core number (sorted) :', [('science', 2), ('mathematics', 2), ('highest', 2), ('general', 2), ('theory', 2), ('relativity', 2), ('time', 2), ('officer', 2), ('concepts', 2), ('physics', 2), ('quantity', 2), ('rank', 2), ('space', 2), ('arrangement', 2), ('related', 2), ('logic', 2), ('rather', 2), ('group', 2), ('absolute', 2), ('shape', 2), ('dealing', 2), ('relative', 2), ('sciences', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'science', ',core number=', 2)
('This document belongs to class:', 'mathematics', ',core number=', 2)
('This document belongs to class:', 'highest', ',core number=', 2)
('This document belongs to class:', 'general', ',core number=', 2)
('This document belongs to class:', 'theory', ',core number=', 2)
('This document belongs to class:', 'relativity', ',core number=', 2)
('This document belongs to class:', 'time', ',core number=', 2)
('This document belongs to class:', 'officer', ',core number=', 2)
('This document belongs to class:', 'concepts', ',core number=', 2)
('This document belongs to class:', 'physics', ',core number=', 2)
('This document belongs to class:', 'quantity', ',core number=', 2)
('This document belongs to class:', 'rank', ',core number=', 2)
('This document belongs to class:', 'space', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('mathematics', 0.15584415584415584), ('relativity', 0.12121212121212122), ('general', 0.012987012987012988), ('science', 0.0), ('highest', 0.0), ('theory', 0.0), ('time', 0.0), ('officer', 0.0), ('concepts', 0.0), ('physics', 0.0), ('quantity', 0.0), ('rank', 0.0), ('space', 0.0), ('arrangement', 0.0), ('related', 0.0), ('logic', 0.0), ('rather', 0.0), ('group', 0.0), ('absolute', 0.0), ('shape', 0.0), ('dealing', 0.0), ('relative', 0.0), ('sciences', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('mathematics', 0.4090909090909091), ('relativity', 0.36363636363636365), ('science', 0.21657754010695188), ('quantity', 0.21657754010695188), ('arrangement', 0.21657754010695188), ('related', 0.21657754010695188), ('logic', 0.21657754010695188), ('group', 0.21657754010695188), ('shape', 0.21657754010695188), ('dealing', 0.21657754010695188), ('sciences', 0.21657754010695188), ('theory', 0.19393939393939394), ('time', 0.19393939393939394), ('concepts', 0.19393939393939394), ('physics', 0.19393939393939394), ('space', 0.19393939393939394), ('rather', 0.19393939393939394), ('absolute', 0.19393939393939394), ('relative', 0.19393939393939394), ('general', 0.13636363636363635), ('highest', 0.0818181818181818), ('officer', 0.0818181818181818), ('rank', 0.0818181818181818)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('mathematics', 0.8181818181818182), ('relativity', 0.7272727272727273), ('general', 0.2727272727272727), ('science', 0.09090909090909091), ('highest', 0.09090909090909091), ('theory', 0.09090909090909091), ('time', 0.09090909090909091), ('officer', 0.09090909090909091), ('concepts', 0.09090909090909091), ('physics', 0.09090909090909091), ('quantity', 0.09090909090909091), ('rank', 0.09090909090909091), ('space', 0.09090909090909091), ('arrangement', 0.09090909090909091), ('related', 0.09090909090909091), ('logic', 0.09090909090909091), ('rather', 0.09090909090909091), ('group', 0.09090909090909091), ('absolute', 0.09090909090909091), ('shape', 0.09090909090909091), ('dealing', 0.09090909090909091), ('relative', 0.09090909090909091), ('sciences', 0.09090909090909091)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('mathematics', 0.2032924021056971), ('relativity', 0.18331563445118074), ('general', 0.0834317961785982), ('highest', 0.03016041576655422), ('officer', 0.03016041576655422), ('rank', 0.03016041576655422), ('theory', 0.025998589171863283), ('time', 0.025998589171863283), ('concepts', 0.025998589171863283), ('physics', 0.025998589171863283), ('space', 0.025998589171863283), ('rather', 0.025998589171863283), ('absolute', 0.025998589171863283), ('relative', 0.025998589171863283), ('science', 0.025721134065550558), ('quantity', 0.025721134065550558), ('arrangement', 0.025721134065550558), ('related', 0.025721134065550558), ('logic', 0.025721134065550558), ('group', 0.025721134065550558), ('shape', 0.025721134065550558), ('dealing', 0.025721134065550558), ('sciences', 0.025721134065550558)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('science', 'mathematics'), ('mathematics', 'science'), ('mathematics', 'quantity'), ('mathematics', 'arrangement'), ('mathematics', 'related'), ('mathematics', 'logic'), ('mathematics', 'group'), ('mathematics', 'shape'), ('mathematics', 'dealing'), ('mathematics', 'sciences'), ('highest', 'general'), ('general', 'highest'), ('general', 'general'), ('general', 'officer'), ('general', 'rank'), ('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'space'), ('relativity', 'rather'), ('relativity', 'absolute'), ('relativity', 'relative'), ('time', 'relativity'), ('officer', 'general'), ('concepts', 'relativity'), ('physics', 'relativity'), ('quantity', 'mathematics'), ('rank', 'general'), ('space', 'relativity'), ('arrangement', 'mathematics'), ('related', 'mathematics'), ('logic', 'mathematics'), ('rather', 'relativity'), ('group', 'mathematics'), ('absolute', 'relativity'), ('shape', 'mathematics'), ('dealing', 'mathematics'), ('relative', 'relativity'), ('sciences', 'mathematics')]
Answer Textgraph  2 : ([('science', 2), ('mathematics', 2), ('highest', 2), ('general', 2), ('theory', 2), ('relativity', 2), ('time', 2), ('officer', 2), ('concepts', 2), ('physics', 2), ('quantity', 2), ('rank', 2), ('space', 2), ('arrangement', 2), ('related', 2), ('logic', 2), ('rather', 2), ('group', 2), ('absolute', 2), ('shape', 2), ('dealing', 2), ('relative', 2), ('sciences', 2)], [('mathematics', 0.2032924021056971), ('relativity', 0.18331563445118074), ('general', 0.0834317961785982), ('highest', 0.03016041576655422), ('officer', 0.03016041576655422), ('rank', 0.03016041576655422), ('theory', 0.025998589171863283), ('time', 0.025998589171863283), ('concepts', 0.025998589171863283), ('physics', 0.025998589171863283), ('space', 0.025998589171863283), ('rather', 0.025998589171863283), ('absolute', 0.025998589171863283), ('relative', 0.025998589171863283), ('science', 0.025721134065550558), ('quantity', 0.025721134065550558), ('arrangement', 0.025721134065550558), ('related', 0.025721134065550558), ('logic', 0.025721134065550558), ('group', 0.025721134065550558), ('shape', 0.025721134065550558), ('dealing', 0.025721134065550558), ('sciences', 0.025721134065550558)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.05555555555555555, 0.05555555555555555, 0.05555555555555555], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.1156888888888889
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights: [0.1156888888888889, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31734666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights: [0.1156888888888889, 0.31734666666666667, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52062
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights updated after Gradient :  [0.1156888888888889, 0.31734666666666667, 0.52062]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.1156888888888889, 0.31734666666666667, 0.52062], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.1156888888888889
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights: [0.1156888888888889, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31734666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights: [0.1156888888888889, 0.31734666666666667, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52062
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights updated after Gradient :  [0.1156888888888889, 0.31734666666666667, 0.52062]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.1156888888888889, 0.31734666666666667, 0.52062], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.1156888888888889
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights: [0.1156888888888889, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31734666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights: [0.1156888888888889, 0.31734666666666667, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52062
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights updated after Gradient :  [0.1156888888888889, 0.31734666666666667, 0.52062]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.1156888888888889, 0.31734666666666667, 0.52062], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( science , science ): 1.012
Key weight for textgraph edge ( science , science ): 4.024
Value weight for textgraph edge ( science , science ): 7.036
Query weight for textgraph edge ( science , mathematics ): 2.0132
Key weight for textgraph edge ( science , mathematics ): 5.0504
Value weight for textgraph edge ( science , mathematics ): 8.0876
Query weight for textgraph edge ( science , highest ): 3.0338
Key weight for textgraph edge ( science , highest ): 6.2636
Value weight for textgraph edge ( science , highest ): 9.4934
Query weight for textgraph edge ( mathematics , science ): 0.1156888888888889
Key weight for textgraph edge ( mathematics , science ): 0.1156888888888889
Value weight for textgraph edge ( mathematics , science ): 0.1156888888888889
Query weight for textgraph edge ( mathematics , mathematics ): 0.31734666666666667
Key weight for textgraph edge ( mathematics , mathematics ): 0.31734666666666667
Value weight for textgraph edge ( mathematics , mathematics ): 0.31734666666666667
Query weight for textgraph edge ( mathematics , highest ): 0.52062
Key weight for textgraph edge ( mathematics , highest ): 0.52062
Value weight for textgraph edge ( mathematics , highest ): 0.52062
Query weight for textgraph edge ( highest , science ): 3.02
Key weight for textgraph edge ( highest , science ): 3.02
Value weight for textgraph edge ( highest , science ): 3.02
Query weight for textgraph edge ( highest , mathematics ): 4.038
Key weight for textgraph edge ( highest , mathematics ): 4.038
Value weight for textgraph edge ( highest , mathematics ): 4.038
Query weight for textgraph edge ( highest , highest ): 5.187
Key weight for textgraph edge ( highest , highest ): 5.187
Value weight for textgraph edge ( highest , highest ): 5.187
wikipedia search result: Introduction to general relativity
wikipedia search result summary: General relativity is a theory of gravitation developed by Albert Einstein between 1907 and 1915. The theory of general relativity says that the observed gravitational effect between masses results from their warping of spacetime.
By the beginning of the 20th century, Newton's law of universal gravitation had been accepted for more than two hundred years as a valid description of the gravitational force between masses. In Newton's model, gravity is the result of an attractive force between massive objects. Although even Newton was troubled by the unknown nature of that force, the basic framework was extremely successful at describing motion.
Experiments and observations show that Einstein's description of gravitation accounts for several effects that are unexplained by Newton's law, such as minute anomalies in the orbits of Mercury and other planets. General relativity also predicts novel effects of gravity, such as gravitational waves, gravitational lensing and an effect of gravity on time known as gravitational time dilation. Many of these predictions have been confirmed by experiment or observation, most recently gravitational waves.
General relativity has developed into an essential tool in modern astrophysics. It provides the foundation for the current understanding of black holes, regions of space where the gravitational effect is strong enough that even light cannot escape. Their strong gravity is thought to be responsible for the intense radiation emitted by certain types of astronomical objects (such as active galactic nuclei or microquasars). General relativity is also part of the framework of the standard Big Bang model of cosmology.
Although general relativity is not the only relativistic theory of gravity, it is the simplest such theory that is consistent with the experimental data.  Nevertheless, a number of open questions remain, the most fundamental of which is how general relativity can be reconciled with the laws of quantum physics to produce a complete and self-consistent theory of quantum gravity.
2
defaultdict(<class 'list'>, {'highest': ['general'], 'theory': ['relativity'], 'time': ['relativity'], 'general': ['general'], 'officer': ['general'], 'concepts': ['relativity'], 'physics': ['relativity'], 'rank': ['general'], 'space': ['relativity'], 'new': ['introduction'], 'something': ['introduction'], 'rather': ['relativity'], 'beginning': ['introduction'], 'act': ['introduction'], 'relative': ['relativity'], 'absolute': ['relativity']})
('definitiongraph networkx edges:', OutEdgeView([('highest', 'general'), ('general', 'highest'), ('general', 'general'), ('general', 'officer'), ('general', 'rank'), ('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'space'), ('relativity', 'rather'), ('relativity', 'relative'), ('relativity', 'absolute'), ('time', 'relativity'), ('officer', 'general'), ('concepts', 'relativity'), ('physics', 'relativity'), ('rank', 'general'), ('space', 'relativity'), ('new', 'introduction'), ('introduction', 'new'), ('introduction', 'something'), ('introduction', 'beginning'), ('introduction', 'act'), ('something', 'introduction'), ('rather', 'relativity'), ('beginning', 'introduction'), ('act', 'introduction'), ('relative', 'relativity'), ('absolute', 'relativity')]))
('Core number (sorted) :', [('highest', 2), ('general', 2), ('theory', 2), ('relativity', 2), ('time', 2), ('officer', 2), ('concepts', 2), ('physics', 2), ('rank', 2), ('space', 2), ('new', 2), ('introduction', 2), ('something', 2), ('rather', 2), ('beginning', 2), ('act', 2), ('relative', 2), ('absolute', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'highest', ',core number=', 2)
('This document belongs to class:', 'general', ',core number=', 2)
('This document belongs to class:', 'theory', ',core number=', 2)
('This document belongs to class:', 'relativity', ',core number=', 2)
('This document belongs to class:', 'time', ',core number=', 2)
('This document belongs to class:', 'officer', ',core number=', 2)
('This document belongs to class:', 'concepts', ',core number=', 2)
('This document belongs to class:', 'physics', ',core number=', 2)
('This document belongs to class:', 'rank', ',core number=', 2)
('This document belongs to class:', 'space', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.20588235294117646), ('introduction', 0.044117647058823525), ('general', 0.022058823529411763), ('highest', 0.0), ('theory', 0.0), ('time', 0.0), ('officer', 0.0), ('concepts', 0.0), ('physics', 0.0), ('rank', 0.0), ('space', 0.0), ('new', 0.0), ('something', 0.0), ('rather', 0.0), ('beginning', 0.0), ('act', 0.0), ('relative', 0.0), ('absolute', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.47058823529411764), ('theory', 0.25098039215686274), ('time', 0.25098039215686274), ('concepts', 0.25098039215686274), ('physics', 0.25098039215686274), ('space', 0.25098039215686274), ('rather', 0.25098039215686274), ('relative', 0.25098039215686274), ('absolute', 0.25098039215686274), ('introduction', 0.23529411764705882), ('general', 0.17647058823529413), ('new', 0.13445378151260504), ('something', 0.13445378151260504), ('beginning', 0.13445378151260504), ('act', 0.13445378151260504), ('highest', 0.10588235294117647), ('officer', 0.10588235294117647), ('rank', 0.10588235294117647)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.9411764705882353), ('introduction', 0.47058823529411764), ('general', 0.3529411764705882), ('highest', 0.11764705882352941), ('theory', 0.11764705882352941), ('time', 0.11764705882352941), ('officer', 0.11764705882352941), ('concepts', 0.11764705882352941), ('physics', 0.11764705882352941), ('rank', 0.11764705882352941), ('space', 0.11764705882352941), ('new', 0.11764705882352941), ('something', 0.11764705882352941), ('rather', 0.11764705882352941), ('beginning', 0.11764705882352941), ('act', 0.11764705882352941), ('relative', 0.11764705882352941), ('absolute', 0.11764705882352941)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('relativity', 0.2342366440209531), ('introduction', 0.1321331648978688), ('general', 0.10660729511709773), ('highest', 0.0385383090350415), ('officer', 0.0385383090350415), ('rank', 0.0385383090350415), ('new', 0.036411153219977246), ('something', 0.036411153219977246), ('beginning', 0.036411153219977246), ('act', 0.036411153219977246), ('theory', 0.03322041949738087), ('time', 0.03322041949738087), ('concepts', 0.03322041949738087), ('physics', 0.03322041949738087), ('space', 0.03322041949738087), ('rather', 0.03322041949738087), ('relative', 0.03322041949738087), ('absolute', 0.03322041949738087)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('highest', 'general'), ('general', 'highest'), ('general', 'general'), ('general', 'officer'), ('general', 'rank'), ('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'space'), ('relativity', 'rather'), ('relativity', 'relative'), ('relativity', 'absolute'), ('time', 'relativity'), ('officer', 'general'), ('concepts', 'relativity'), ('physics', 'relativity'), ('rank', 'general'), ('space', 'relativity'), ('new', 'introduction'), ('introduction', 'new'), ('introduction', 'something'), ('introduction', 'beginning'), ('introduction', 'act'), ('something', 'introduction'), ('rather', 'relativity'), ('beginning', 'introduction'), ('act', 'introduction'), ('relative', 'relativity'), ('absolute', 'relativity')]
Answer Textgraph  3 : ([('highest', 2), ('general', 2), ('theory', 2), ('relativity', 2), ('time', 2), ('officer', 2), ('concepts', 2), ('physics', 2), ('rank', 2), ('space', 2), ('new', 2), ('introduction', 2), ('something', 2), ('rather', 2), ('beginning', 2), ('act', 2), ('relative', 2), ('absolute', 2)], [('relativity', 0.2342366440209531), ('introduction', 0.1321331648978688), ('general', 0.10660729511709773), ('highest', 0.0385383090350415), ('officer', 0.0385383090350415), ('rank', 0.0385383090350415), ('new', 0.036411153219977246), ('something', 0.036411153219977246), ('beginning', 0.036411153219977246), ('act', 0.036411153219977246), ('theory', 0.03322041949738087), ('time', 0.03322041949738087), ('concepts', 0.03322041949738087), ('physics', 0.03322041949738087), ('space', 0.03322041949738087), ('rather', 0.03322041949738087), ('relative', 0.03322041949738087), ('absolute', 0.03322041949738087)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.125, 0.125, 0.125], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11430000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31443
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.31443, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.509995
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights updated after Gradient :  [0.11430000000000001, 0.31443, 0.509995]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11430000000000001, 0.31443, 0.509995], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11430000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31443
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.31443, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.509995
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights updated after Gradient :  [0.11430000000000001, 0.31443, 0.509995]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11430000000000001, 0.31443, 0.509995], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11430000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31443
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.31443, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.509995
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights updated after Gradient :  [0.11430000000000001, 0.31443, 0.509995]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11430000000000001, 0.31443, 0.509995], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( highest , highest ): 1.012
Key weight for textgraph edge ( highest , highest ): 4.024
Value weight for textgraph edge ( highest , highest ): 7.036
Query weight for textgraph edge ( highest , general ): 2.0132
Key weight for textgraph edge ( highest , general ): 5.0504
Value weight for textgraph edge ( highest , general ): 8.0876
Query weight for textgraph edge ( highest , theory ): 3.0338
Key weight for textgraph edge ( highest , theory ): 6.2636
Value weight for textgraph edge ( highest , theory ): 9.4934
Query weight for textgraph edge ( general , highest ): 0.11430000000000001
Key weight for textgraph edge ( general , highest ): 0.11430000000000001
Value weight for textgraph edge ( general , highest ): 0.11430000000000001
Query weight for textgraph edge ( general , general ): 0.31443
Key weight for textgraph edge ( general , general ): 0.31443
Value weight for textgraph edge ( general , general ): 0.31443
Query weight for textgraph edge ( general , theory ): 0.509995
Key weight for textgraph edge ( general , theory ): 0.509995
Value weight for textgraph edge ( general , theory ): 0.509995
Query weight for textgraph edge ( theory , highest ): 3.02
Key weight for textgraph edge ( theory , highest ): 3.02
Value weight for textgraph edge ( theory , highest ): 3.02
Query weight for textgraph edge ( theory , general ): 4.038
Key weight for textgraph edge ( theory , general ): 4.038
Value weight for textgraph edge ( theory , general ): 4.038
Query weight for textgraph edge ( theory , theory ): 5.187
Key weight for textgraph edge ( theory , theory ): 5.187
Value weight for textgraph edge ( theory , theory ): 5.187
wikipedia search result: Theory of relativity
Exception
2
defaultdict(<class 'list'>, {'variety': ['theory'], 'specific': ['theory'], 'theory': ['relativity'], 'time': ['relativity'], 'world': ['theory'], 'natural': ['theory'], 'concepts': ['relativity'], 'set': ['theory'], 'physics': ['relativity'], 'circumstances': ['theory'], 'space': ['relativity'], 'system': ['theory'], 'explain': ['theory'], 'knowledge': ['theory'], 'rather': ['relativity'], 'well-substantiated': ['theory'], 'accepted': ['theory'], 'absolute': ['relativity'], 'aspect': ['theory'], 'organized': ['theory'], 'relative': ['relativity'], 'applies': ['theory'], 'explanation': ['theory'], 'phenomena': ['theory']})
('definitiongraph networkx edges:', OutEdgeView([('variety', 'theory'), ('theory', 'variety'), ('theory', 'specific'), ('theory', 'relativity'), ('theory', 'world'), ('theory', 'natural'), ('theory', 'set'), ('theory', 'circumstances'), ('theory', 'system'), ('theory', 'explain'), ('theory', 'knowledge'), ('theory', 'well-substantiated'), ('theory', 'accepted'), ('theory', 'aspect'), ('theory', 'organized'), ('theory', 'applies'), ('theory', 'explanation'), ('theory', 'phenomena'), ('specific', 'theory'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'space'), ('relativity', 'rather'), ('relativity', 'absolute'), ('relativity', 'relative'), ('time', 'relativity'), ('world', 'theory'), ('natural', 'theory'), ('concepts', 'relativity'), ('set', 'theory'), ('physics', 'relativity'), ('circumstances', 'theory'), ('space', 'relativity'), ('system', 'theory'), ('explain', 'theory'), ('knowledge', 'theory'), ('rather', 'relativity'), ('well-substantiated', 'theory'), ('accepted', 'theory'), ('absolute', 'relativity'), ('aspect', 'theory'), ('organized', 'theory'), ('relative', 'relativity'), ('applies', 'theory'), ('explanation', 'theory'), ('phenomena', 'theory')]))
('Core number (sorted) :', [('variety', 2), ('theory', 2), ('specific', 2), ('relativity', 2), ('time', 2), ('world', 2), ('natural', 2), ('concepts', 2), ('set', 2), ('physics', 2), ('circumstances', 2), ('space', 2), ('system', 2), ('explain', 2), ('knowledge', 2), ('rather', 2), ('well-substantiated', 2), ('accepted', 2), ('absolute', 2), ('aspect', 2), ('organized', 2), ('relative', 2), ('applies', 2), ('explanation', 2), ('phenomena', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'variety', ',core number=', 2)
('This document belongs to class:', 'theory', ',core number=', 2)
('This document belongs to class:', 'specific', ',core number=', 2)
('This document belongs to class:', 'relativity', ',core number=', 2)
('This document belongs to class:', 'time', ',core number=', 2)
('This document belongs to class:', 'world', ',core number=', 2)
('This document belongs to class:', 'natural', ',core number=', 2)
('This document belongs to class:', 'concepts', ',core number=', 2)
('This document belongs to class:', 'set', ',core number=', 2)
('This document belongs to class:', 'physics', ',core number=', 2)
('This document belongs to class:', 'circumstances', ',core number=', 2)
('This document belongs to class:', 'space', ',core number=', 2)
('This document belongs to class:', 'system', ',core number=', 2)
('This document belongs to class:', 'explain', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('theory', 0.8985507246376812), ('relativity', 0.5072463768115942), ('variety', 0.0), ('specific', 0.0), ('time', 0.0), ('world', 0.0), ('natural', 0.0), ('concepts', 0.0), ('set', 0.0), ('physics', 0.0), ('circumstances', 0.0), ('space', 0.0), ('system', 0.0), ('explain', 0.0), ('knowledge', 0.0), ('rather', 0.0), ('well-substantiated', 0.0), ('accepted', 0.0), ('absolute', 0.0), ('aspect', 0.0), ('organized', 0.0), ('relative', 0.0), ('applies', 0.0), ('explanation', 0.0), ('phenomena', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('theory', 0.7741935483870968), ('relativity', 0.6), ('variety', 0.4444444444444444), ('specific', 0.4444444444444444), ('world', 0.4444444444444444), ('natural', 0.4444444444444444), ('set', 0.4444444444444444), ('circumstances', 0.4444444444444444), ('system', 0.4444444444444444), ('explain', 0.4444444444444444), ('knowledge', 0.4444444444444444), ('well-substantiated', 0.4444444444444444), ('accepted', 0.4444444444444444), ('aspect', 0.4444444444444444), ('organized', 0.4444444444444444), ('applies', 0.4444444444444444), ('explanation', 0.4444444444444444), ('phenomena', 0.4444444444444444), ('time', 0.38095238095238093), ('concepts', 0.38095238095238093), ('physics', 0.38095238095238093), ('space', 0.38095238095238093), ('rather', 0.38095238095238093), ('absolute', 0.38095238095238093), ('relative', 0.38095238095238093)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('theory', 1.4166666666666665), ('relativity', 0.6666666666666666), ('variety', 0.08333333333333333), ('specific', 0.08333333333333333), ('time', 0.08333333333333333), ('world', 0.08333333333333333), ('natural', 0.08333333333333333), ('concepts', 0.08333333333333333), ('set', 0.08333333333333333), ('physics', 0.08333333333333333), ('circumstances', 0.08333333333333333), ('space', 0.08333333333333333), ('system', 0.08333333333333333), ('explain', 0.08333333333333333), ('knowledge', 0.08333333333333333), ('rather', 0.08333333333333333), ('well-substantiated', 0.08333333333333333), ('accepted', 0.08333333333333333), ('absolute', 0.08333333333333333), ('aspect', 0.08333333333333333), ('organized', 0.08333333333333333), ('relative', 0.08333333333333333), ('applies', 0.08333333333333333), ('explanation', 0.08333333333333333), ('phenomena', 0.08333333333333333)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('theory', 0.3261092079402606), ('relativity', 0.1577060363811209), ('time', 0.02275588140893225), ('concepts', 0.02275588140893225), ('physics', 0.02275588140893225), ('space', 0.02275588140893225), ('rather', 0.02275588140893225), ('absolute', 0.02275588140893225), ('relative', 0.02275588140893225), ('variety', 0.022305849113505784), ('specific', 0.022305849113505784), ('world', 0.022305849113505784), ('natural', 0.022305849113505784), ('set', 0.022305849113505784), ('circumstances', 0.022305849113505784), ('system', 0.022305849113505784), ('explain', 0.022305849113505784), ('knowledge', 0.022305849113505784), ('well-substantiated', 0.022305849113505784), ('accepted', 0.022305849113505784), ('aspect', 0.022305849113505784), ('organized', 0.022305849113505784), ('applies', 0.022305849113505784), ('explanation', 0.022305849113505784), ('phenomena', 0.022305849113505784)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('variety', 'theory'), ('theory', 'variety'), ('theory', 'specific'), ('theory', 'relativity'), ('theory', 'world'), ('theory', 'natural'), ('theory', 'set'), ('theory', 'circumstances'), ('theory', 'system'), ('theory', 'explain'), ('theory', 'knowledge'), ('theory', 'well-substantiated'), ('theory', 'accepted'), ('theory', 'aspect'), ('theory', 'organized'), ('theory', 'applies'), ('theory', 'explanation'), ('theory', 'phenomena'), ('specific', 'theory'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'space'), ('relativity', 'rather'), ('relativity', 'absolute'), ('relativity', 'relative'), ('time', 'relativity'), ('world', 'theory'), ('natural', 'theory'), ('concepts', 'relativity'), ('set', 'theory'), ('physics', 'relativity'), ('circumstances', 'theory'), ('space', 'relativity'), ('system', 'theory'), ('explain', 'theory'), ('knowledge', 'theory'), ('rather', 'relativity'), ('well-substantiated', 'theory'), ('accepted', 'theory'), ('absolute', 'relativity'), ('aspect', 'theory'), ('organized', 'theory'), ('relative', 'relativity'), ('applies', 'theory'), ('explanation', 'theory'), ('phenomena', 'theory')]
Answer Textgraph  4 : ([('variety', 2), ('theory', 2), ('specific', 2), ('relativity', 2), ('time', 2), ('world', 2), ('natural', 2), ('concepts', 2), ('set', 2), ('physics', 2), ('circumstances', 2), ('space', 2), ('system', 2), ('explain', 2), ('knowledge', 2), ('rather', 2), ('well-substantiated', 2), ('accepted', 2), ('absolute', 2), ('aspect', 2), ('organized', 2), ('relative', 2), ('applies', 2), ('explanation', 2), ('phenomena', 2)], [('theory', 0.3261092079402606), ('relativity', 0.1577060363811209), ('time', 0.02275588140893225), ('concepts', 0.02275588140893225), ('physics', 0.02275588140893225), ('space', 0.02275588140893225), ('rather', 0.02275588140893225), ('absolute', 0.02275588140893225), ('relative', 0.02275588140893225), ('variety', 0.022305849113505784), ('specific', 0.022305849113505784), ('world', 0.022305849113505784), ('natural', 0.022305849113505784), ('set', 0.022305849113505784), ('circumstances', 0.022305849113505784), ('system', 0.022305849113505784), ('explain', 0.022305849113505784), ('knowledge', 0.022305849113505784), ('well-substantiated', 0.022305849113505784), ('accepted', 0.022305849113505784), ('aspect', 0.022305849113505784), ('organized', 0.022305849113505784), ('applies', 0.022305849113505784), ('explanation', 0.022305849113505784), ('phenomena', 0.022305849113505784)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353, 0.029411764705882353], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.029411764705882353, 0.029411764705882353, 0.029411764705882353], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.029411764705882353, 0.029411764705882353, 0.029411764705882353]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11621176470588236
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16211764705882356, 0.18444705882352946, 0.24620000000000006]
weights: [0.11621176470588236, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.029411764705882353, 0.029411764705882353, 0.029411764705882353]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31844470588235296
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16211764705882356, 0.18444705882352946, 0.24620000000000006]
weights: [0.11621176470588236, 0.31844470588235296, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.029411764705882353, 0.029411764705882353, 0.029411764705882353]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52462
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16211764705882356, 0.18444705882352946, 0.24620000000000006]
weights updated after Gradient :  [0.11621176470588236, 0.31844470588235296, 0.52462]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11621176470588236, 0.31844470588235296, 0.52462], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.029411764705882353, 0.029411764705882353, 0.029411764705882353]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11621176470588236
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16211764705882356, 0.18444705882352946, 0.24620000000000006]
weights: [0.11621176470588236, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.029411764705882353, 0.029411764705882353, 0.029411764705882353]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31844470588235296
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16211764705882356, 0.18444705882352946, 0.24620000000000006]
weights: [0.11621176470588236, 0.31844470588235296, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.029411764705882353, 0.029411764705882353, 0.029411764705882353]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52462
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16211764705882356, 0.18444705882352946, 0.24620000000000006]
weights updated after Gradient :  [0.11621176470588236, 0.31844470588235296, 0.52462]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11621176470588236, 0.31844470588235296, 0.52462], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.029411764705882353, 0.029411764705882353, 0.029411764705882353]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11621176470588236
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16211764705882356, 0.18444705882352946, 0.24620000000000006]
weights: [0.11621176470588236, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.029411764705882353, 0.029411764705882353, 0.029411764705882353]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31844470588235296
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16211764705882356, 0.18444705882352946, 0.24620000000000006]
weights: [0.11621176470588236, 0.31844470588235296, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.029411764705882353, 0.029411764705882353, 0.029411764705882353]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52462
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16211764705882356, 0.18444705882352946, 0.24620000000000006]
weights updated after Gradient :  [0.11621176470588236, 0.31844470588235296, 0.52462]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11621176470588236, 0.31844470588235296, 0.52462], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( variety , variety ): 1.012
Key weight for textgraph edge ( variety , variety ): 4.024
Value weight for textgraph edge ( variety , variety ): 7.036
Query weight for textgraph edge ( variety , theory ): 2.0132
Key weight for textgraph edge ( variety , theory ): 5.0504
Value weight for textgraph edge ( variety , theory ): 8.0876
Query weight for textgraph edge ( variety , specific ): 3.0338
Key weight for textgraph edge ( variety , specific ): 6.2636
Value weight for textgraph edge ( variety , specific ): 9.4934
Query weight for textgraph edge ( theory , variety ): 0.11621176470588236
Key weight for textgraph edge ( theory , variety ): 0.11621176470588236
Value weight for textgraph edge ( theory , variety ): 0.11621176470588236
Query weight for textgraph edge ( theory , theory ): 0.31844470588235296
Key weight for textgraph edge ( theory , theory ): 0.31844470588235296
Value weight for textgraph edge ( theory , theory ): 0.31844470588235296
Query weight for textgraph edge ( theory , specific ): 0.52462
Key weight for textgraph edge ( theory , specific ): 0.52462
Value weight for textgraph edge ( theory , specific ): 0.52462
Query weight for textgraph edge ( specific , variety ): 3.02
Key weight for textgraph edge ( specific , variety ): 3.02
Value weight for textgraph edge ( specific , variety ): 3.02
Query weight for textgraph edge ( specific , theory ): 4.038
Key weight for textgraph edge ( specific , theory ): 4.038
Value weight for textgraph edge ( specific , theory ): 4.038
Query weight for textgraph edge ( specific , specific ): 5.187
Key weight for textgraph edge ( specific , specific ): 5.187
Value weight for textgraph edge ( specific , specific ): 5.187
wikipedia search result: Alternatives to general relativity
wikipedia search result summary: Alternatives to general relativity are physical theories that attempt to describe the phenomenon of gravitation in competition to Einstein's theory of general relativity. There have been many different attempts at constructing an ideal theory of gravity.These attempts can be split into four broad categories based on their scope. In this article, straightforward alternatives to general relativity are discussed, which do not involve quantum mechanics or force unification. Other theories which do attempt to construct a theory using the principles of quantum mechanics are known as theories of quantized gravity. Thirdly, there are theories which attempt to explain gravity and other forces at the same time; these are known as classical unified field theories. Finally, the most ambitious theories attempt to both put gravity in quantum mechanical terms and unify forces; these are called theories of everything.
None of these alternatives to general relativity have gained wide acceptance. General relativity has withstood many tests, remaining consistent with all observations so far. In contrast, many of the early alternatives have been definitively disproven. However, some of the alternative theories of gravity are supported by a minority of physicists, and the topic remains the subject of intense study in theoretical physics.
2
defaultdict(<class 'list'>, {'highest': ['general'], 'theory': ['relativity'], 'time': ['relativity'], 'general': ['general'], 'number': ['option'], 'officer': ['general'], 'concepts': ['relativity'], 'physics': ['relativity'], 'rank': ['general'], 'space': ['relativity'], 'things': ['option'], 'rather': ['relativity'], 'relative': ['relativity'], 'absolute': ['relativity'], 'one': ['option'], 'chosen': ['option']})
('definitiongraph networkx edges:', OutEdgeView([('highest', 'general'), ('general', 'highest'), ('general', 'general'), ('general', 'officer'), ('general', 'rank'), ('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'space'), ('relativity', 'rather'), ('relativity', 'relative'), ('relativity', 'absolute'), ('time', 'relativity'), ('number', 'option'), ('option', 'number'), ('option', 'things'), ('option', 'one'), ('option', 'chosen'), ('officer', 'general'), ('concepts', 'relativity'), ('physics', 'relativity'), ('rank', 'general'), ('space', 'relativity'), ('things', 'option'), ('rather', 'relativity'), ('relative', 'relativity'), ('absolute', 'relativity'), ('one', 'option'), ('chosen', 'option')]))
('Core number (sorted) :', [('highest', 2), ('general', 2), ('theory', 2), ('relativity', 2), ('time', 2), ('number', 2), ('option', 2), ('officer', 2), ('concepts', 2), ('physics', 2), ('rank', 2), ('space', 2), ('things', 2), ('rather', 2), ('relative', 2), ('absolute', 2), ('one', 2), ('chosen', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'highest', ',core number=', 2)
('This document belongs to class:', 'general', ',core number=', 2)
('This document belongs to class:', 'theory', ',core number=', 2)
('This document belongs to class:', 'relativity', ',core number=', 2)
('This document belongs to class:', 'time', ',core number=', 2)
('This document belongs to class:', 'number', ',core number=', 2)
('This document belongs to class:', 'option', ',core number=', 2)
('This document belongs to class:', 'officer', ',core number=', 2)
('This document belongs to class:', 'concepts', ',core number=', 2)
('This document belongs to class:', 'physics', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.20588235294117646), ('option', 0.044117647058823525), ('general', 0.022058823529411763), ('highest', 0.0), ('theory', 0.0), ('time', 0.0), ('number', 0.0), ('officer', 0.0), ('concepts', 0.0), ('physics', 0.0), ('rank', 0.0), ('space', 0.0), ('things', 0.0), ('rather', 0.0), ('relative', 0.0), ('absolute', 0.0), ('one', 0.0), ('chosen', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.47058823529411764), ('theory', 0.25098039215686274), ('time', 0.25098039215686274), ('concepts', 0.25098039215686274), ('physics', 0.25098039215686274), ('space', 0.25098039215686274), ('rather', 0.25098039215686274), ('relative', 0.25098039215686274), ('absolute', 0.25098039215686274), ('option', 0.23529411764705882), ('general', 0.17647058823529413), ('number', 0.13445378151260504), ('things', 0.13445378151260504), ('one', 0.13445378151260504), ('chosen', 0.13445378151260504), ('highest', 0.10588235294117647), ('officer', 0.10588235294117647), ('rank', 0.10588235294117647)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.9411764705882353), ('option', 0.47058823529411764), ('general', 0.3529411764705882), ('highest', 0.11764705882352941), ('theory', 0.11764705882352941), ('time', 0.11764705882352941), ('number', 0.11764705882352941), ('officer', 0.11764705882352941), ('concepts', 0.11764705882352941), ('physics', 0.11764705882352941), ('rank', 0.11764705882352941), ('space', 0.11764705882352941), ('things', 0.11764705882352941), ('rather', 0.11764705882352941), ('relative', 0.11764705882352941), ('absolute', 0.11764705882352941), ('one', 0.11764705882352941), ('chosen', 0.11764705882352941)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('relativity', 0.2342366440209531), ('option', 0.1321331648978688), ('general', 0.10660729511709773), ('highest', 0.0385383090350415), ('officer', 0.0385383090350415), ('rank', 0.0385383090350415), ('number', 0.036411153219977246), ('things', 0.036411153219977246), ('one', 0.036411153219977246), ('chosen', 0.036411153219977246), ('theory', 0.03322041949738087), ('time', 0.03322041949738087), ('concepts', 0.03322041949738087), ('physics', 0.03322041949738087), ('space', 0.03322041949738087), ('rather', 0.03322041949738087), ('relative', 0.03322041949738087), ('absolute', 0.03322041949738087)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('highest', 'general'), ('general', 'highest'), ('general', 'general'), ('general', 'officer'), ('general', 'rank'), ('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'space'), ('relativity', 'rather'), ('relativity', 'relative'), ('relativity', 'absolute'), ('time', 'relativity'), ('number', 'option'), ('option', 'number'), ('option', 'things'), ('option', 'one'), ('option', 'chosen'), ('officer', 'general'), ('concepts', 'relativity'), ('physics', 'relativity'), ('rank', 'general'), ('space', 'relativity'), ('things', 'option'), ('rather', 'relativity'), ('relative', 'relativity'), ('absolute', 'relativity'), ('one', 'option'), ('chosen', 'option')]
Answer Textgraph  5 : ([('highest', 2), ('general', 2), ('theory', 2), ('relativity', 2), ('time', 2), ('number', 2), ('option', 2), ('officer', 2), ('concepts', 2), ('physics', 2), ('rank', 2), ('space', 2), ('things', 2), ('rather', 2), ('relative', 2), ('absolute', 2), ('one', 2), ('chosen', 2)], [('relativity', 0.2342366440209531), ('option', 0.1321331648978688), ('general', 0.10660729511709773), ('highest', 0.0385383090350415), ('officer', 0.0385383090350415), ('rank', 0.0385383090350415), ('number', 0.036411153219977246), ('things', 0.036411153219977246), ('one', 0.036411153219977246), ('chosen', 0.036411153219977246), ('theory', 0.03322041949738087), ('time', 0.03322041949738087), ('concepts', 0.03322041949738087), ('physics', 0.03322041949738087), ('space', 0.03322041949738087), ('rather', 0.03322041949738087), ('relative', 0.03322041949738087), ('absolute', 0.03322041949738087)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.125, 0.125, 0.125], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11430000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31443
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.31443, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.509995
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights updated after Gradient :  [0.11430000000000001, 0.31443, 0.509995]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11430000000000001, 0.31443, 0.509995], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11430000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31443
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.31443, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.509995
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights updated after Gradient :  [0.11430000000000001, 0.31443, 0.509995]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11430000000000001, 0.31443, 0.509995], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11430000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31443
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.31443, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.509995
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights updated after Gradient :  [0.11430000000000001, 0.31443, 0.509995]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11430000000000001, 0.31443, 0.509995], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( highest , highest ): 1.012
Key weight for textgraph edge ( highest , highest ): 4.024
Value weight for textgraph edge ( highest , highest ): 7.036
Query weight for textgraph edge ( highest , general ): 2.0132
Key weight for textgraph edge ( highest , general ): 5.0504
Value weight for textgraph edge ( highest , general ): 8.0876
Query weight for textgraph edge ( highest , theory ): 3.0338
Key weight for textgraph edge ( highest , theory ): 6.2636
Value weight for textgraph edge ( highest , theory ): 9.4934
Query weight for textgraph edge ( general , highest ): 0.11430000000000001
Key weight for textgraph edge ( general , highest ): 0.11430000000000001
Value weight for textgraph edge ( general , highest ): 0.11430000000000001
Query weight for textgraph edge ( general , general ): 0.31443
Key weight for textgraph edge ( general , general ): 0.31443
Value weight for textgraph edge ( general , general ): 0.31443
Query weight for textgraph edge ( general , theory ): 0.509995
Key weight for textgraph edge ( general , theory ): 0.509995
Value weight for textgraph edge ( general , theory ): 0.509995
Query weight for textgraph edge ( theory , highest ): 3.02
Key weight for textgraph edge ( theory , highest ): 3.02
Value weight for textgraph edge ( theory , highest ): 3.02
Query weight for textgraph edge ( theory , general ): 4.038
Key weight for textgraph edge ( theory , general ): 4.038
Value weight for textgraph edge ( theory , general ): 4.038
Query weight for textgraph edge ( theory , theory ): 5.187
Key weight for textgraph edge ( theory , theory ): 5.187
Value weight for textgraph edge ( theory , theory ): 5.187
wikipedia search result: Special relativity
wikipedia search result summary: In physics, the special theory of relativity, or special relativity for short, is a scientific theory regarding the relationship between space and time. In Albert Einstein's original treatment, the theory is based on two postulates:
The laws of physics are invariant (that is, identical) in all inertial frames of reference (that is, frames of reference with no acceleration).
The speed of light in vacuum is the same for all observers, regardless of the motion of the light source or observer.
2
defaultdict(<class 'list'>, {'theory': ['relativity'], 'time': ['relativity'], 'usually': ['special'], 'concepts': ['relativity'], 'physics': ['relativity'], 'space': ['relativity'], 'advertising': ['special'], 'temporary': ['special'], 'price': ['special'], 'rather': ['relativity'], 'relative': ['relativity'], 'absolute': ['relativity'], 'offering': ['special'], 'featured': ['special'], 'reduced': ['special'], 'special': ['special']})
('definitiongraph networkx edges:', OutEdgeView([('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'space'), ('relativity', 'rather'), ('relativity', 'relative'), ('relativity', 'absolute'), ('time', 'relativity'), ('usually', 'special'), ('special', 'usually'), ('special', 'advertising'), ('special', 'temporary'), ('special', 'price'), ('special', 'offering'), ('special', 'featured'), ('special', 'reduced'), ('special', 'special'), ('concepts', 'relativity'), ('physics', 'relativity'), ('space', 'relativity'), ('advertising', 'special'), ('temporary', 'special'), ('price', 'special'), ('rather', 'relativity'), ('relative', 'relativity'), ('absolute', 'relativity'), ('offering', 'special'), ('featured', 'special'), ('reduced', 'special')]))
('Core number (sorted) :', [('theory', 2), ('relativity', 2), ('time', 2), ('usually', 2), ('special', 2), ('concepts', 2), ('physics', 2), ('space', 2), ('advertising', 2), ('temporary', 2), ('price', 2), ('rather', 2), ('relative', 2), ('absolute', 2), ('offering', 2), ('featured', 2), ('reduced', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'theory', ',core number=', 2)
('This document belongs to class:', 'relativity', ',core number=', 2)
('This document belongs to class:', 'time', ',core number=', 2)
('This document belongs to class:', 'usually', ',core number=', 2)
('This document belongs to class:', 'special', ',core number=', 2)
('This document belongs to class:', 'concepts', ',core number=', 2)
('This document belongs to class:', 'physics', ',core number=', 2)
('This document belongs to class:', 'space', ',core number=', 2)
('This document belongs to class:', 'advertising', ',core number=', 2)
('This document belongs to class:', 'temporary', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.23333333333333334), ('special', 0.175), ('theory', 0.0), ('time', 0.0), ('usually', 0.0), ('concepts', 0.0), ('physics', 0.0), ('space', 0.0), ('advertising', 0.0), ('temporary', 0.0), ('price', 0.0), ('rather', 0.0), ('relative', 0.0), ('absolute', 0.0), ('offering', 0.0), ('featured', 0.0), ('reduced', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.5), ('special', 0.4375), ('theory', 0.26666666666666666), ('time', 0.26666666666666666), ('concepts', 0.26666666666666666), ('physics', 0.26666666666666666), ('space', 0.26666666666666666), ('rather', 0.26666666666666666), ('relative', 0.26666666666666666), ('absolute', 0.26666666666666666), ('usually', 0.23557692307692307), ('advertising', 0.23557692307692307), ('temporary', 0.23557692307692307), ('price', 0.23557692307692307), ('offering', 0.23557692307692307), ('featured', 0.23557692307692307), ('reduced', 0.23557692307692307)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 1.0), ('special', 0.875), ('theory', 0.125), ('time', 0.125), ('usually', 0.125), ('concepts', 0.125), ('physics', 0.125), ('space', 0.125), ('advertising', 0.125), ('temporary', 0.125), ('price', 0.125), ('rather', 0.125), ('relative', 0.125), ('absolute', 0.125), ('offering', 0.125), ('featured', 0.125), ('reduced', 0.125)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('relativity', 0.24801456208779385), ('special', 0.22098727170550392), ('usually', 0.035657280512659095), ('advertising', 0.035657280512659095), ('temporary', 0.035657280512659095), ('price', 0.035657280512659095), ('offering', 0.035657280512659095), ('featured', 0.035657280512659095), ('reduced', 0.035657280512659095), ('theory', 0.03517465032726107), ('time', 0.03517465032726107), ('concepts', 0.03517465032726107), ('physics', 0.03517465032726107), ('space', 0.03517465032726107), ('rather', 0.03517465032726107), ('relative', 0.03517465032726107), ('absolute', 0.03517465032726107)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'space'), ('relativity', 'rather'), ('relativity', 'relative'), ('relativity', 'absolute'), ('time', 'relativity'), ('usually', 'special'), ('special', 'usually'), ('special', 'advertising'), ('special', 'temporary'), ('special', 'price'), ('special', 'offering'), ('special', 'featured'), ('special', 'reduced'), ('special', 'special'), ('concepts', 'relativity'), ('physics', 'relativity'), ('space', 'relativity'), ('advertising', 'special'), ('temporary', 'special'), ('price', 'special'), ('rather', 'relativity'), ('relative', 'relativity'), ('absolute', 'relativity'), ('offering', 'special'), ('featured', 'special'), ('reduced', 'special')]
Answer Textgraph  6 : ([('theory', 2), ('relativity', 2), ('time', 2), ('usually', 2), ('special', 2), ('concepts', 2), ('physics', 2), ('space', 2), ('advertising', 2), ('temporary', 2), ('price', 2), ('rather', 2), ('relative', 2), ('absolute', 2), ('offering', 2), ('featured', 2), ('reduced', 2)], [('relativity', 0.24801456208779385), ('special', 0.22098727170550392), ('usually', 0.035657280512659095), ('advertising', 0.035657280512659095), ('temporary', 0.035657280512659095), ('price', 0.035657280512659095), ('offering', 0.035657280512659095), ('featured', 0.035657280512659095), ('reduced', 0.035657280512659095), ('theory', 0.03517465032726107), ('time', 0.03517465032726107), ('concepts', 0.03517465032726107), ('physics', 0.03517465032726107), ('space', 0.03517465032726107), ('rather', 0.03517465032726107), ('relative', 0.03517465032726107), ('absolute', 0.03517465032726107)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11555000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.317055
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.317055, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5195575
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights updated after Gradient :  [0.11555000000000001, 0.317055, 0.5195575]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11555000000000001, 0.317055, 0.5195575], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11555000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.317055
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.317055, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5195575
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights updated after Gradient :  [0.11555000000000001, 0.317055, 0.5195575]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11555000000000001, 0.317055, 0.5195575], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11555000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.317055
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.317055, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5195575
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights updated after Gradient :  [0.11555000000000001, 0.317055, 0.5195575]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11555000000000001, 0.317055, 0.5195575], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( theory , theory ): 1.012
Key weight for textgraph edge ( theory , theory ): 4.024
Value weight for textgraph edge ( theory , theory ): 7.036
Query weight for textgraph edge ( theory , relativity ): 2.0132
Key weight for textgraph edge ( theory , relativity ): 5.0504
Value weight for textgraph edge ( theory , relativity ): 8.0876
Query weight for textgraph edge ( theory , time ): 3.0338
Key weight for textgraph edge ( theory , time ): 6.2636
Value weight for textgraph edge ( theory , time ): 9.4934
Query weight for textgraph edge ( relativity , theory ): 0.11555000000000001
Key weight for textgraph edge ( relativity , theory ): 0.11555000000000001
Value weight for textgraph edge ( relativity , theory ): 0.11555000000000001
Query weight for textgraph edge ( relativity , relativity ): 0.317055
Key weight for textgraph edge ( relativity , relativity ): 0.317055
Value weight for textgraph edge ( relativity , relativity ): 0.317055
Query weight for textgraph edge ( relativity , time ): 0.5195575
Key weight for textgraph edge ( relativity , time ): 0.5195575
Value weight for textgraph edge ( relativity , time ): 0.5195575
Query weight for textgraph edge ( time , theory ): 3.02
Key weight for textgraph edge ( time , theory ): 3.02
Value weight for textgraph edge ( time , theory ): 3.02
Query weight for textgraph edge ( time , relativity ): 4.038
Key weight for textgraph edge ( time , relativity ): 4.038
Value weight for textgraph edge ( time , relativity ): 4.038
Query weight for textgraph edge ( time , time ): 5.187
Key weight for textgraph edge ( time , time ): 5.187
Value weight for textgraph edge ( time , time ): 5.187
wikipedia search result: Principle of relativity
wikipedia search result summary: In physics, the principle of relativity is the requirement that the equations describing the laws of physics have the same form in all admissible frames of reference.
For example, in the framework of special relativity the Maxwell equations have the same form in all inertial frames of reference. In the framework of general relativity the Maxwell equations or the Einstein field equations have the same form in arbitrary frames of reference.
Several principles of relativity have been successfully applied throughout science, whether implicitly (as in Newtonian mechanics) or explicitly (as in Albert Einstein's special relativity and general relativity).
2
defaultdict(<class 'list'>, {'theory': ['relativity'], 'time': ['relativity'], 'reasoning': ['principle'], 'basic': ['principle'], 'true': ['principle'], 'used': ['principle'], 'conduct': ['principle'], 'concepts': ['relativity'], 'physics': ['relativity'], 'space': ['relativity'], 'rather': ['relativity'], 'generalization': ['principle'], 'basis': ['principle'], 'accepted': ['principle'], 'relative': ['relativity'], 'absolute': ['relativity']})
('definitiongraph networkx edges:', OutEdgeView([('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'space'), ('relativity', 'rather'), ('relativity', 'relative'), ('relativity', 'absolute'), ('time', 'relativity'), ('reasoning', 'principle'), ('principle', 'reasoning'), ('principle', 'basic'), ('principle', 'true'), ('principle', 'used'), ('principle', 'conduct'), ('principle', 'generalization'), ('principle', 'basis'), ('principle', 'accepted'), ('basic', 'principle'), ('true', 'principle'), ('used', 'principle'), ('conduct', 'principle'), ('concepts', 'relativity'), ('physics', 'relativity'), ('space', 'relativity'), ('rather', 'relativity'), ('generalization', 'principle'), ('basis', 'principle'), ('accepted', 'principle'), ('relative', 'relativity'), ('absolute', 'relativity')]))
('Core number (sorted) :', [('theory', 2), ('relativity', 2), ('time', 2), ('reasoning', 2), ('principle', 2), ('basic', 2), ('true', 2), ('used', 2), ('conduct', 2), ('concepts', 2), ('physics', 2), ('space', 2), ('rather', 2), ('generalization', 2), ('basis', 2), ('accepted', 2), ('relative', 2), ('absolute', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'theory', ',core number=', 2)
('This document belongs to class:', 'relativity', ',core number=', 2)
('This document belongs to class:', 'time', ',core number=', 2)
('This document belongs to class:', 'reasoning', ',core number=', 2)
('This document belongs to class:', 'principle', ',core number=', 2)
('This document belongs to class:', 'basic', ',core number=', 2)
('This document belongs to class:', 'true', ',core number=', 2)
('This document belongs to class:', 'used', ',core number=', 2)
('This document belongs to class:', 'conduct', ',core number=', 2)
('This document belongs to class:', 'concepts', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.20588235294117646), ('principle', 0.20588235294117646), ('theory', 0.0), ('time', 0.0), ('reasoning', 0.0), ('basic', 0.0), ('true', 0.0), ('used', 0.0), ('conduct', 0.0), ('concepts', 0.0), ('physics', 0.0), ('space', 0.0), ('rather', 0.0), ('generalization', 0.0), ('basis', 0.0), ('accepted', 0.0), ('relative', 0.0), ('absolute', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.47058823529411764), ('principle', 0.47058823529411764), ('theory', 0.25098039215686274), ('time', 0.25098039215686274), ('reasoning', 0.25098039215686274), ('basic', 0.25098039215686274), ('true', 0.25098039215686274), ('used', 0.25098039215686274), ('conduct', 0.25098039215686274), ('concepts', 0.25098039215686274), ('physics', 0.25098039215686274), ('space', 0.25098039215686274), ('rather', 0.25098039215686274), ('generalization', 0.25098039215686274), ('basis', 0.25098039215686274), ('accepted', 0.25098039215686274), ('relative', 0.25098039215686274), ('absolute', 0.25098039215686274)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.9411764705882353), ('principle', 0.9411764705882353), ('theory', 0.11764705882352941), ('time', 0.11764705882352941), ('reasoning', 0.11764705882352941), ('basic', 0.11764705882352941), ('true', 0.11764705882352941), ('used', 0.11764705882352941), ('conduct', 0.11764705882352941), ('concepts', 0.11764705882352941), ('physics', 0.11764705882352941), ('space', 0.11764705882352941), ('rather', 0.11764705882352941), ('generalization', 0.11764705882352941), ('basis', 0.11764705882352941), ('accepted', 0.11764705882352941), ('relative', 0.11764705882352941), ('absolute', 0.11764705882352941)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('relativity', 0.23423218591552322), ('principle', 0.23423218591552322), ('theory', 0.0332209767605596), ('time', 0.0332209767605596), ('reasoning', 0.0332209767605596), ('basic', 0.0332209767605596), ('true', 0.0332209767605596), ('used', 0.0332209767605596), ('conduct', 0.0332209767605596), ('concepts', 0.0332209767605596), ('physics', 0.0332209767605596), ('space', 0.0332209767605596), ('rather', 0.0332209767605596), ('generalization', 0.0332209767605596), ('basis', 0.0332209767605596), ('accepted', 0.0332209767605596), ('relative', 0.0332209767605596), ('absolute', 0.0332209767605596)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'space'), ('relativity', 'rather'), ('relativity', 'relative'), ('relativity', 'absolute'), ('time', 'relativity'), ('reasoning', 'principle'), ('principle', 'reasoning'), ('principle', 'basic'), ('principle', 'true'), ('principle', 'used'), ('principle', 'conduct'), ('principle', 'generalization'), ('principle', 'basis'), ('principle', 'accepted'), ('basic', 'principle'), ('true', 'principle'), ('used', 'principle'), ('conduct', 'principle'), ('concepts', 'relativity'), ('physics', 'relativity'), ('space', 'relativity'), ('rather', 'relativity'), ('generalization', 'principle'), ('basis', 'principle'), ('accepted', 'principle'), ('relative', 'relativity'), ('absolute', 'relativity')]
Answer Textgraph  7 : ([('theory', 2), ('relativity', 2), ('time', 2), ('reasoning', 2), ('principle', 2), ('basic', 2), ('true', 2), ('used', 2), ('conduct', 2), ('concepts', 2), ('physics', 2), ('space', 2), ('rather', 2), ('generalization', 2), ('basis', 2), ('accepted', 2), ('relative', 2), ('absolute', 2)], [('relativity', 0.23423218591552322), ('principle', 0.23423218591552322), ('theory', 0.0332209767605596), ('time', 0.0332209767605596), ('reasoning', 0.0332209767605596), ('basic', 0.0332209767605596), ('true', 0.0332209767605596), ('used', 0.0332209767605596), ('conduct', 0.0332209767605596), ('concepts', 0.0332209767605596), ('physics', 0.0332209767605596), ('space', 0.0332209767605596), ('rather', 0.0332209767605596), ('generalization', 0.0332209767605596), ('basis', 0.0332209767605596), ('accepted', 0.0332209767605596), ('relative', 0.0332209767605596), ('absolute', 0.0332209767605596)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11555000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.317055
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.317055, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5195575
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights updated after Gradient :  [0.11555000000000001, 0.317055, 0.5195575]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11555000000000001, 0.317055, 0.5195575], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11555000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.317055
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.317055, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5195575
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights updated after Gradient :  [0.11555000000000001, 0.317055, 0.5195575]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11555000000000001, 0.317055, 0.5195575], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11555000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.317055
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.317055, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5195575
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights updated after Gradient :  [0.11555000000000001, 0.317055, 0.5195575]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11555000000000001, 0.317055, 0.5195575], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( theory , theory ): 1.012
Key weight for textgraph edge ( theory , theory ): 4.024
Value weight for textgraph edge ( theory , theory ): 7.036
Query weight for textgraph edge ( theory , relativity ): 2.0132
Key weight for textgraph edge ( theory , relativity ): 5.0504
Value weight for textgraph edge ( theory , relativity ): 8.0876
Query weight for textgraph edge ( theory , time ): 3.0338
Key weight for textgraph edge ( theory , time ): 6.2636
Value weight for textgraph edge ( theory , time ): 9.4934
Query weight for textgraph edge ( relativity , theory ): 0.11555000000000001
Key weight for textgraph edge ( relativity , theory ): 0.11555000000000001
Value weight for textgraph edge ( relativity , theory ): 0.11555000000000001
Query weight for textgraph edge ( relativity , relativity ): 0.317055
Key weight for textgraph edge ( relativity , relativity ): 0.317055
Value weight for textgraph edge ( relativity , relativity ): 0.317055
Query weight for textgraph edge ( relativity , time ): 0.5195575
Key weight for textgraph edge ( relativity , time ): 0.5195575
Value weight for textgraph edge ( relativity , time ): 0.5195575
Query weight for textgraph edge ( time , theory ): 3.02
Key weight for textgraph edge ( time , theory ): 3.02
Value weight for textgraph edge ( time , theory ): 3.02
Query weight for textgraph edge ( time , relativity ): 4.038
Key weight for textgraph edge ( time , relativity ): 4.038
Value weight for textgraph edge ( time , relativity ): 4.038
Query weight for textgraph edge ( time , time ): 5.187
Key weight for textgraph edge ( time , time ): 5.187
Value weight for textgraph edge ( time , time ): 5.187
wikipedia search result: Introduction to the mathematics of general relativity
wikipedia search result summary: The mathematics of general relativity is complex. In Newton's theories of motion, an object's length and the rate at which time passes remain constant while the object accelerates, meaning that many problems in Newtonian mechanics may be solved by algebra alone. In relativity, however, an object's length and the rate at which time passes both change appreciably as the object's speed approaches the speed of light, meaning that more variables and more complicated mathematics are required to calculate the object's motion. As a result, relativity requires the use of concepts such as vectors, tensors, pseudotensors and curvilinear coordinates.
For an introduction based on the example of particles following circular orbits about a large mass, nonrelativistic and relativistic treatments are given in, respectively, Newtonian motivations for general relativity and Theoretical motivation for general relativity.
2
defaultdict(<class 'list'>, {'science': ['mathematics'], 'highest': ['general'], 'theory': ['relativity'], 'time': ['relativity'], 'general': ['general'], 'officer': ['general'], 'concepts': ['relativity'], 'physics': ['relativity'], 'quantity': ['mathematics'], 'rank': ['general'], 'logic': ['mathematics'], 'arrangement': ['mathematics'], 'related': ['mathematics'], 'space': ['relativity'], 'new': ['introduction'], 'something': ['introduction'], 'rather': ['relativity'], 'group': ['mathematics'], 'beginning': ['introduction'], 'act': ['introduction'], 'absolute': ['relativity'], 'shape': ['mathematics'], 'dealing': ['mathematics'], 'relative': ['relativity'], 'sciences': ['mathematics']})
('definitiongraph networkx edges:', OutEdgeView([('science', 'mathematics'), ('mathematics', 'science'), ('mathematics', 'quantity'), ('mathematics', 'logic'), ('mathematics', 'arrangement'), ('mathematics', 'related'), ('mathematics', 'group'), ('mathematics', 'shape'), ('mathematics', 'dealing'), ('mathematics', 'sciences'), ('highest', 'general'), ('general', 'highest'), ('general', 'general'), ('general', 'officer'), ('general', 'rank'), ('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'space'), ('relativity', 'rather'), ('relativity', 'absolute'), ('relativity', 'relative'), ('time', 'relativity'), ('officer', 'general'), ('concepts', 'relativity'), ('physics', 'relativity'), ('quantity', 'mathematics'), ('rank', 'general'), ('logic', 'mathematics'), ('arrangement', 'mathematics'), ('related', 'mathematics'), ('space', 'relativity'), ('new', 'introduction'), ('introduction', 'new'), ('introduction', 'something'), ('introduction', 'beginning'), ('introduction', 'act'), ('something', 'introduction'), ('rather', 'relativity'), ('group', 'mathematics'), ('beginning', 'introduction'), ('act', 'introduction'), ('absolute', 'relativity'), ('shape', 'mathematics'), ('dealing', 'mathematics'), ('relative', 'relativity'), ('sciences', 'mathematics')]))
('Core number (sorted) :', [('science', 2), ('mathematics', 2), ('highest', 2), ('general', 2), ('theory', 2), ('relativity', 2), ('time', 2), ('officer', 2), ('concepts', 2), ('physics', 2), ('quantity', 2), ('rank', 2), ('logic', 2), ('arrangement', 2), ('related', 2), ('space', 2), ('new', 2), ('introduction', 2), ('something', 2), ('rather', 2), ('group', 2), ('beginning', 2), ('act', 2), ('absolute', 2), ('shape', 2), ('dealing', 2), ('relative', 2), ('sciences', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'science', ',core number=', 2)
('This document belongs to class:', 'mathematics', ',core number=', 2)
('This document belongs to class:', 'highest', ',core number=', 2)
('This document belongs to class:', 'general', ',core number=', 2)
('This document belongs to class:', 'theory', ',core number=', 2)
('This document belongs to class:', 'relativity', ',core number=', 2)
('This document belongs to class:', 'time', ',core number=', 2)
('This document belongs to class:', 'officer', ',core number=', 2)
('This document belongs to class:', 'concepts', ',core number=', 2)
('This document belongs to class:', 'physics', ',core number=', 2)
('This document belongs to class:', 'quantity', ',core number=', 2)
('This document belongs to class:', 'rank', ',core number=', 2)
('This document belongs to class:', 'logic', ',core number=', 2)
('This document belongs to class:', 'arrangement', ',core number=', 2)
('This document belongs to class:', 'related', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('mathematics', 0.10256410256410257), ('relativity', 0.07977207977207977), ('introduction', 0.017094017094017096), ('general', 0.008547008547008548), ('science', 0.0), ('highest', 0.0), ('theory', 0.0), ('time', 0.0), ('officer', 0.0), ('concepts', 0.0), ('physics', 0.0), ('quantity', 0.0), ('rank', 0.0), ('logic', 0.0), ('arrangement', 0.0), ('related', 0.0), ('space', 0.0), ('new', 0.0), ('something', 0.0), ('rather', 0.0), ('group', 0.0), ('beginning', 0.0), ('act', 0.0), ('absolute', 0.0), ('shape', 0.0), ('dealing', 0.0), ('relative', 0.0), ('sciences', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('mathematics', 0.3333333333333333), ('relativity', 0.2962962962962963), ('science', 0.1764705882352941), ('quantity', 0.1764705882352941), ('logic', 0.1764705882352941), ('arrangement', 0.1764705882352941), ('related', 0.1764705882352941), ('group', 0.1764705882352941), ('shape', 0.1764705882352941), ('dealing', 0.1764705882352941), ('sciences', 0.1764705882352941), ('theory', 0.1580246913580247), ('time', 0.1580246913580247), ('concepts', 0.1580246913580247), ('physics', 0.1580246913580247), ('space', 0.1580246913580247), ('rather', 0.1580246913580247), ('absolute', 0.1580246913580247), ('relative', 0.1580246913580247), ('introduction', 0.14814814814814814), ('general', 0.1111111111111111), ('new', 0.08465608465608465), ('something', 0.08465608465608465), ('beginning', 0.08465608465608465), ('act', 0.08465608465608465), ('highest', 0.06666666666666667), ('officer', 0.06666666666666667), ('rank', 0.06666666666666667)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('mathematics', 0.6666666666666666), ('relativity', 0.5925925925925926), ('introduction', 0.2962962962962963), ('general', 0.2222222222222222), ('science', 0.07407407407407407), ('highest', 0.07407407407407407), ('theory', 0.07407407407407407), ('time', 0.07407407407407407), ('officer', 0.07407407407407407), ('concepts', 0.07407407407407407), ('physics', 0.07407407407407407), ('quantity', 0.07407407407407407), ('rank', 0.07407407407407407), ('logic', 0.07407407407407407), ('arrangement', 0.07407407407407407), ('related', 0.07407407407407407), ('space', 0.07407407407407407), ('new', 0.07407407407407407), ('something', 0.07407407407407407), ('rather', 0.07407407407407407), ('group', 0.07407407407407407), ('beginning', 0.07407407407407407), ('act', 0.07407407407407407), ('absolute', 0.07407407407407407), ('shape', 0.07407407407407407), ('dealing', 0.07407407407407407), ('relative', 0.07407407407407407), ('sciences', 0.07407407407407407)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('mathematics', 0.16699086744592373), ('relativity', 0.15058129472946896), ('introduction', 0.08494300386364997), ('general', 0.06853343114719519), ('highest', 0.024774570569982557), ('officer', 0.024774570569982557), ('rank', 0.024774570569982557), ('new', 0.023407106176944664), ('something', 0.023407106176944664), ('beginning', 0.023407106176944664), ('act', 0.023407106176944664), ('theory', 0.02135590958738782), ('time', 0.02135590958738782), ('concepts', 0.02135590958738782), ('physics', 0.02135590958738782), ('space', 0.02135590958738782), ('rather', 0.02135590958738782), ('absolute', 0.02135590958738782), ('relative', 0.02135590958738782), ('science', 0.021127998855214835), ('quantity', 0.021127998855214835), ('logic', 0.021127998855214835), ('arrangement', 0.021127998855214835), ('related', 0.021127998855214835), ('group', 0.021127998855214835), ('shape', 0.021127998855214835), ('dealing', 0.021127998855214835), ('sciences', 0.021127998855214835)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('science', 'mathematics'), ('mathematics', 'science'), ('mathematics', 'quantity'), ('mathematics', 'logic'), ('mathematics', 'arrangement'), ('mathematics', 'related'), ('mathematics', 'group'), ('mathematics', 'shape'), ('mathematics', 'dealing'), ('mathematics', 'sciences'), ('highest', 'general'), ('general', 'highest'), ('general', 'general'), ('general', 'officer'), ('general', 'rank'), ('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'concepts'), ('relativity', 'physics'), ('relativity', 'space'), ('relativity', 'rather'), ('relativity', 'absolute'), ('relativity', 'relative'), ('time', 'relativity'), ('officer', 'general'), ('concepts', 'relativity'), ('physics', 'relativity'), ('quantity', 'mathematics'), ('rank', 'general'), ('logic', 'mathematics'), ('arrangement', 'mathematics'), ('related', 'mathematics'), ('space', 'relativity'), ('new', 'introduction'), ('introduction', 'new'), ('introduction', 'something'), ('introduction', 'beginning'), ('introduction', 'act'), ('something', 'introduction'), ('rather', 'relativity'), ('group', 'mathematics'), ('beginning', 'introduction'), ('act', 'introduction'), ('absolute', 'relativity'), ('shape', 'mathematics'), ('dealing', 'mathematics'), ('relative', 'relativity'), ('sciences', 'mathematics')]
Answer Textgraph  8 : ([('science', 2), ('mathematics', 2), ('highest', 2), ('general', 2), ('theory', 2), ('relativity', 2), ('time', 2), ('officer', 2), ('concepts', 2), ('physics', 2), ('quantity', 2), ('rank', 2), ('logic', 2), ('arrangement', 2), ('related', 2), ('space', 2), ('new', 2), ('introduction', 2), ('something', 2), ('rather', 2), ('group', 2), ('beginning', 2), ('act', 2), ('absolute', 2), ('shape', 2), ('dealing', 2), ('relative', 2), ('sciences', 2)], [('mathematics', 0.16699086744592373), ('relativity', 0.15058129472946896), ('introduction', 0.08494300386364997), ('general', 0.06853343114719519), ('highest', 0.024774570569982557), ('officer', 0.024774570569982557), ('rank', 0.024774570569982557), ('new', 0.023407106176944664), ('something', 0.023407106176944664), ('beginning', 0.023407106176944664), ('act', 0.023407106176944664), ('theory', 0.02135590958738782), ('time', 0.02135590958738782), ('concepts', 0.02135590958738782), ('physics', 0.02135590958738782), ('space', 0.02135590958738782), ('rather', 0.02135590958738782), ('absolute', 0.02135590958738782), ('relative', 0.02135590958738782), ('science', 0.021127998855214835), ('quantity', 0.021127998855214835), ('logic', 0.021127998855214835), ('arrangement', 0.021127998855214835), ('related', 0.021127998855214835), ('group', 0.021127998855214835), ('shape', 0.021127998855214835), ('dealing', 0.021127998855214835), ('sciences', 0.021127998855214835)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.05555555555555555, 0.05555555555555555, 0.05555555555555555], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.1156888888888889
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights: [0.1156888888888889, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31734666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights: [0.1156888888888889, 0.31734666666666667, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52062
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights updated after Gradient :  [0.1156888888888889, 0.31734666666666667, 0.52062]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.1156888888888889, 0.31734666666666667, 0.52062], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.1156888888888889
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights: [0.1156888888888889, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31734666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights: [0.1156888888888889, 0.31734666666666667, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52062
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights updated after Gradient :  [0.1156888888888889, 0.31734666666666667, 0.52062]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.1156888888888889, 0.31734666666666667, 0.52062], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.1156888888888889
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights: [0.1156888888888889, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31734666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights: [0.1156888888888889, 0.31734666666666667, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52062
LinearPerceptronGradient() weight update iteration: deltaw =  [0.1568888888888889, 0.17346666666666669, 0.20620000000000002]
weights updated after Gradient :  [0.1156888888888889, 0.31734666666666667, 0.52062]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.1156888888888889, 0.31734666666666667, 0.52062], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( science , science ): 1.012
Key weight for textgraph edge ( science , science ): 4.024
Value weight for textgraph edge ( science , science ): 7.036
Query weight for textgraph edge ( science , mathematics ): 2.0132
Key weight for textgraph edge ( science , mathematics ): 5.0504
Value weight for textgraph edge ( science , mathematics ): 8.0876
Query weight for textgraph edge ( science , highest ): 3.0338
Key weight for textgraph edge ( science , highest ): 6.2636
Value weight for textgraph edge ( science , highest ): 9.4934
Query weight for textgraph edge ( mathematics , science ): 0.1156888888888889
Key weight for textgraph edge ( mathematics , science ): 0.1156888888888889
Value weight for textgraph edge ( mathematics , science ): 0.1156888888888889
Query weight for textgraph edge ( mathematics , mathematics ): 0.31734666666666667
Key weight for textgraph edge ( mathematics , mathematics ): 0.31734666666666667
Value weight for textgraph edge ( mathematics , mathematics ): 0.31734666666666667
Query weight for textgraph edge ( mathematics , highest ): 0.52062
Key weight for textgraph edge ( mathematics , highest ): 0.52062
Value weight for textgraph edge ( mathematics , highest ): 0.52062
Query weight for textgraph edge ( highest , science ): 3.02
Key weight for textgraph edge ( highest , science ): 3.02
Value weight for textgraph edge ( highest , science ): 3.02
Query weight for textgraph edge ( highest , mathematics ): 4.038
Key weight for textgraph edge ( highest , mathematics ): 4.038
Value weight for textgraph edge ( highest , mathematics ): 4.038
Query weight for textgraph edge ( highest , highest ): 5.187
Key weight for textgraph edge ( highest , highest ): 5.187
Value weight for textgraph edge ( highest , highest ): 5.187
wikipedia search result: Mass in general relativity
wikipedia search result summary: The concept of mass in general relativity (GR) is more subtle to define than the concept of mass in special relativity. In fact, general relativity does not offer a single definition of the term mass, but offers several different definitions that are applicable under different circumstances. Under some circumstances, the mass of a system in general relativity may not even be defined.
The reason for this subtlety is that the energy and momentum in the gravitational field cannot be unambiguously localized. (See Chapter 20 of .) So, rigorous definitions of the mass in general relativity are not local, as in classical mechanics or special relativity, but make reference to the asymptotic nature of the spacetime. A well defined notion of the mass exists for asymptotically flat spacetimes and for asymptotically Anti-de Sitter space. However, these definitions must be used with care in other settings.


2
defaultdict(<class 'list'>, {'highest': ['general'], 'theory': ['relativity'], 'time': ['relativity'], 'rather': ['relativity'], 'general': ['general'], 'setting': ['Mass'], 'Mass': ['Mass'], 'officer': ['general'], 'musical': ['Mass'], 'relative': ['relativity'], 'physics': ['relativity'], 'rank': ['general'], 'concepts': ['relativity'], 'absolute': ['relativity'], 'space': ['relativity']})
('definitiongraph networkx edges:', OutEdgeView([('highest', 'general'), ('general', 'highest'), ('general', 'general'), ('general', 'officer'), ('general', 'rank'), ('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'rather'), ('relativity', 'relative'), ('relativity', 'physics'), ('relativity', 'concepts'), ('relativity', 'absolute'), ('relativity', 'space'), ('time', 'relativity'), ('rather', 'relativity'), ('setting', 'Mass'), ('Mass', 'setting'), ('Mass', 'Mass'), ('Mass', 'musical'), ('officer', 'general'), ('musical', 'Mass'), ('relative', 'relativity'), ('physics', 'relativity'), ('rank', 'general'), ('concepts', 'relativity'), ('absolute', 'relativity'), ('space', 'relativity')]))
('Core number (sorted) :', [('highest', 2), ('general', 2), ('theory', 2), ('relativity', 2), ('time', 2), ('rather', 2), ('setting', 2), ('Mass', 2), ('officer', 2), ('musical', 2), ('relative', 2), ('physics', 2), ('rank', 2), ('concepts', 2), ('absolute', 2), ('space', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'highest', ',core number=', 2)
('This document belongs to class:', 'general', ',core number=', 2)
('This document belongs to class:', 'theory', ',core number=', 2)
('This document belongs to class:', 'relativity', ',core number=', 2)
('This document belongs to class:', 'time', ',core number=', 2)
('This document belongs to class:', 'rather', ',core number=', 2)
('This document belongs to class:', 'setting', ',core number=', 2)
('This document belongs to class:', 'Mass', ',core number=', 2)
('This document belongs to class:', 'officer', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.2666666666666667), ('general', 0.028571428571428574), ('Mass', 0.009523809523809525), ('highest', 0.0), ('theory', 0.0), ('time', 0.0), ('rather', 0.0), ('setting', 0.0), ('officer', 0.0), ('musical', 0.0), ('relative', 0.0), ('physics', 0.0), ('rank', 0.0), ('concepts', 0.0), ('absolute', 0.0), ('space', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.5333333333333333), ('theory', 0.28444444444444444), ('time', 0.28444444444444444), ('rather', 0.28444444444444444), ('relative', 0.28444444444444444), ('physics', 0.28444444444444444), ('concepts', 0.28444444444444444), ('absolute', 0.28444444444444444), ('space', 0.28444444444444444), ('general', 0.2), ('Mass', 0.13333333333333333), ('highest', 0.12), ('officer', 0.12), ('rank', 0.12), ('setting', 0.08888888888888888), ('musical', 0.08888888888888888)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 1.0666666666666667), ('general', 0.4), ('Mass', 0.26666666666666666), ('highest', 0.13333333333333333), ('theory', 0.13333333333333333), ('time', 0.13333333333333333), ('rather', 0.13333333333333333), ('setting', 0.13333333333333333), ('officer', 0.13333333333333333), ('musical', 0.13333333333333333), ('relative', 0.13333333333333333), ('physics', 0.13333333333333333), ('rank', 0.13333333333333333), ('concepts', 0.13333333333333333), ('absolute', 0.13333333333333333), ('space', 0.13333333333333333)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('relativity', 0.26351120915496357), ('general', 0.11993177404427532), ('Mass', 0.09121588702213768), ('setting', 0.048142056488931176), ('musical', 0.048142056488931176), ('highest', 0.043356075318574896), ('officer', 0.043356075318574896), ('rank', 0.043356075318574896), ('theory', 0.03737359885562954), ('time', 0.03737359885562954), ('rather', 0.03737359885562954), ('relative', 0.03737359885562954), ('physics', 0.03737359885562954), ('concepts', 0.03737359885562954), ('absolute', 0.03737359885562954), ('space', 0.03737359885562954)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('highest', 'general'), ('general', 'highest'), ('general', 'general'), ('general', 'officer'), ('general', 'rank'), ('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'rather'), ('relativity', 'relative'), ('relativity', 'physics'), ('relativity', 'concepts'), ('relativity', 'absolute'), ('relativity', 'space'), ('time', 'relativity'), ('rather', 'relativity'), ('setting', 'Mass'), ('Mass', 'setting'), ('Mass', 'Mass'), ('Mass', 'musical'), ('officer', 'general'), ('musical', 'Mass'), ('relative', 'relativity'), ('physics', 'relativity'), ('rank', 'general'), ('concepts', 'relativity'), ('absolute', 'relativity'), ('space', 'relativity')]
Answer Textgraph  9 : ([('highest', 2), ('general', 2), ('theory', 2), ('relativity', 2), ('time', 2), ('rather', 2), ('setting', 2), ('Mass', 2), ('officer', 2), ('musical', 2), ('relative', 2), ('physics', 2), ('rank', 2), ('concepts', 2), ('absolute', 2), ('space', 2)], [('relativity', 0.26351120915496357), ('general', 0.11993177404427532), ('Mass', 0.09121588702213768), ('setting', 0.048142056488931176), ('musical', 0.048142056488931176), ('highest', 0.043356075318574896), ('officer', 0.043356075318574896), ('rank', 0.043356075318574896), ('theory', 0.03737359885562954), ('time', 0.03737359885562954), ('rather', 0.03737359885562954), ('relative', 0.03737359885562954), ('physics', 0.03737359885562954), ('concepts', 0.03737359885562954), ('absolute', 0.03737359885562954), ('space', 0.03737359885562954)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.125, 0.125, 0.125], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11430000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31443
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.31443, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.509995
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights updated after Gradient :  [0.11430000000000001, 0.31443, 0.509995]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11430000000000001, 0.31443, 0.509995], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11430000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31443
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.31443, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.509995
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights updated after Gradient :  [0.11430000000000001, 0.31443, 0.509995]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11430000000000001, 0.31443, 0.509995], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11430000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31443
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights: [0.11430000000000001, 0.31443, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.125, 0.125, 0.125]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.509995
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14300000000000002, 0.1443, 0.09995000000000001]
weights updated after Gradient :  [0.11430000000000001, 0.31443, 0.509995]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11430000000000001, 0.31443, 0.509995], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( highest , highest ): 1.012
Key weight for textgraph edge ( highest , highest ): 4.024
Value weight for textgraph edge ( highest , highest ): 7.036
Query weight for textgraph edge ( highest , general ): 2.0132
Key weight for textgraph edge ( highest , general ): 5.0504
Value weight for textgraph edge ( highest , general ): 8.0876
Query weight for textgraph edge ( highest , theory ): 3.0338
Key weight for textgraph edge ( highest , theory ): 6.2636
Value weight for textgraph edge ( highest , theory ): 9.4934
Query weight for textgraph edge ( general , highest ): 0.11430000000000001
Key weight for textgraph edge ( general , highest ): 0.11430000000000001
Value weight for textgraph edge ( general , highest ): 0.11430000000000001
Query weight for textgraph edge ( general , general ): 0.31443
Key weight for textgraph edge ( general , general ): 0.31443
Value weight for textgraph edge ( general , general ): 0.31443
Query weight for textgraph edge ( general , theory ): 0.509995
Key weight for textgraph edge ( general , theory ): 0.509995
Value weight for textgraph edge ( general , theory ): 0.509995
Query weight for textgraph edge ( theory , highest ): 3.02
Key weight for textgraph edge ( theory , highest ): 3.02
Value weight for textgraph edge ( theory , highest ): 3.02
Query weight for textgraph edge ( theory , general ): 4.038
Key weight for textgraph edge ( theory , general ): 4.038
Value weight for textgraph edge ( theory , general ): 4.038
Query weight for textgraph edge ( theory , theory ): 5.187
Key weight for textgraph edge ( theory , theory ): 5.187
Value weight for textgraph edge ( theory , theory ): 5.187
wikipedia search result: Linguistic relativity
wikipedia search result summary: The hypothesis of linguistic relativity, also known as the Sapir–Whorf hypothesis , the Whorf hypothesis, or Whorfianism, is a principle suggesting that the structure of a language affects its speakers' worldview or cognition, and thus people's perceptions are relative to their spoken language.
Linguistic relativity has been understood in many different, often contradictory ways throughout its history. The idea is often stated in two forms: the strong hypothesis, now referred to as linguistic determinism, was held by some of the early linguists before World War II, while the weak hypothesis is mostly held by some of the modern linguists.
The strong version, or linguistic determinism, says that language determines thought and that linguistic categories limit and determine cognitive categories. This version is generally agreed to be false by modern linguists.
The weak version says that linguistic categories and usage only influence thought and decisions. Research on weaker forms has produced positive empirical evidence for a relationship.The term "Sapir–Whorf hypothesis" is considered a misnomer by linguists for several reasons: Edward Sapir and Benjamin Lee Whorf never co-authored any works, and never stated their ideas in terms of a hypothesis. The distinction between a weak and a strong version of this hypothesis is also a later development; Sapir and Whorf never set up such a dichotomy, although often their writings and their views of this relativity principle are phrased in stronger or weaker terms.The principle of linguistic relativity and the relationship between language and thought has also received attention in varying academic fields from philosophy to psychology and anthropology, and it has also inspired and colored works of fiction and the invention of constructed languages.
2
defaultdict(<class 'list'>, {'consisting': ['linguistic'], 'theory': ['relativity'], 'time': ['relativity'], 'rather': ['relativity'], 'language': ['linguistic'], 'relative': ['relativity'], 'concepts': ['relativity'], 'absolute': ['relativity'], 'physics': ['relativity'], 'space': ['relativity'], 'related': ['linguistic']})
('definitiongraph networkx edges:', OutEdgeView([('consisting', 'linguistic'), ('linguistic', 'consisting'), ('linguistic', 'language'), ('linguistic', 'related'), ('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'rather'), ('relativity', 'relative'), ('relativity', 'concepts'), ('relativity', 'absolute'), ('relativity', 'physics'), ('relativity', 'space'), ('time', 'relativity'), ('rather', 'relativity'), ('language', 'linguistic'), ('relative', 'relativity'), ('concepts', 'relativity'), ('absolute', 'relativity'), ('physics', 'relativity'), ('space', 'relativity'), ('related', 'linguistic')]))
('Core number (sorted) :', [('consisting', 2), ('linguistic', 2), ('theory', 2), ('relativity', 2), ('time', 2), ('rather', 2), ('language', 2), ('relative', 2), ('concepts', 2), ('absolute', 2), ('physics', 2), ('space', 2), ('related', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'consisting', ',core number=', 2)
('This document belongs to class:', 'linguistic', ',core number=', 2)
('This document belongs to class:', 'theory', ',core number=', 2)
('This document belongs to class:', 'relativity', ',core number=', 2)
('This document belongs to class:', 'time', ',core number=', 2)
('This document belongs to class:', 'rather', ',core number=', 2)
('This document belongs to class:', 'language', ',core number=', 2)
('This document belongs to class:', 'relative', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.42424242424242425), ('linguistic', 0.045454545454545456), ('consisting', 0.0), ('theory', 0.0), ('time', 0.0), ('rather', 0.0), ('language', 0.0), ('relative', 0.0), ('concepts', 0.0), ('absolute', 0.0), ('physics', 0.0), ('space', 0.0), ('related', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 0.6666666666666666), ('theory', 0.3555555555555555), ('time', 0.3555555555555555), ('rather', 0.3555555555555555), ('relative', 0.3555555555555555), ('concepts', 0.3555555555555555), ('absolute', 0.3555555555555555), ('physics', 0.3555555555555555), ('space', 0.3555555555555555), ('linguistic', 0.25), ('consisting', 0.15), ('language', 0.15), ('related', 0.15)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('relativity', 1.3333333333333333), ('linguistic', 0.5), ('consisting', 0.16666666666666666), ('theory', 0.16666666666666666), ('time', 0.16666666666666666), ('rather', 0.16666666666666666), ('language', 0.16666666666666666), ('relative', 0.16666666666666666), ('concepts', 0.16666666666666666), ('absolute', 0.16666666666666666), ('physics', 0.16666666666666666), ('space', 0.16666666666666666), ('related', 0.16666666666666666)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('relativity', 0.3243222752177984), ('linguistic', 0.14760856215014012), ('consisting', 0.05336124851405581), ('language', 0.05336124851405581), ('related', 0.05336124851405581), ('theory', 0.04599817713623674), ('time', 0.04599817713623674), ('rather', 0.04599817713623674), ('relative', 0.04599817713623674), ('concepts', 0.04599817713623674), ('absolute', 0.04599817713623674), ('physics', 0.04599817713623674), ('space', 0.04599817713623674)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('consisting', 'linguistic'), ('linguistic', 'consisting'), ('linguistic', 'language'), ('linguistic', 'related'), ('theory', 'relativity'), ('relativity', 'theory'), ('relativity', 'time'), ('relativity', 'rather'), ('relativity', 'relative'), ('relativity', 'concepts'), ('relativity', 'absolute'), ('relativity', 'physics'), ('relativity', 'space'), ('time', 'relativity'), ('rather', 'relativity'), ('language', 'linguistic'), ('relative', 'relativity'), ('concepts', 'relativity'), ('absolute', 'relativity'), ('physics', 'relativity'), ('space', 'relativity'), ('related', 'linguistic')]
Answer Textgraph  10 : ([('consisting', 2), ('linguistic', 2), ('theory', 2), ('relativity', 2), ('time', 2), ('rather', 2), ('language', 2), ('relative', 2), ('concepts', 2), ('absolute', 2), ('physics', 2), ('space', 2), ('related', 2)], [('relativity', 0.3243222752177984), ('linguistic', 0.14760856215014012), ('consisting', 0.05336124851405581), ('language', 0.05336124851405581), ('related', 0.05336124851405581), ('theory', 0.04599817713623674), ('time', 0.04599817713623674), ('rather', 0.04599817713623674), ('relative', 0.04599817713623674), ('concepts', 0.04599817713623674), ('absolute', 0.04599817713623674), ('physics', 0.04599817713623674), ('space', 0.04599817713623674)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.16666666666666666, 0.16666666666666666, 0.16666666666666666], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11346666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31268
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.31268, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.50362
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights updated after Gradient :  [0.11346666666666667, 0.31268, 0.50362]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11346666666666667, 0.31268, 0.50362], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11346666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31268
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.31268, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.50362
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights updated after Gradient :  [0.11346666666666667, 0.31268, 0.50362]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11346666666666667, 0.31268, 0.50362], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11346666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31268
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.31268, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.50362
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights updated after Gradient :  [0.11346666666666667, 0.31268, 0.50362]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11346666666666667, 0.31268, 0.50362], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( consisting , consisting ): 1.012
Key weight for textgraph edge ( consisting , consisting ): 4.024
Value weight for textgraph edge ( consisting , consisting ): 7.036
Query weight for textgraph edge ( consisting , linguistic ): 2.0132
Key weight for textgraph edge ( consisting , linguistic ): 5.0504
Value weight for textgraph edge ( consisting , linguistic ): 8.0876
Query weight for textgraph edge ( consisting , theory ): 3.0338
Key weight for textgraph edge ( consisting , theory ): 6.2636
Value weight for textgraph edge ( consisting , theory ): 9.4934
Query weight for textgraph edge ( linguistic , consisting ): 0.11346666666666667
Key weight for textgraph edge ( linguistic , consisting ): 0.11346666666666667
Value weight for textgraph edge ( linguistic , consisting ): 0.11346666666666667
Query weight for textgraph edge ( linguistic , linguistic ): 0.31268
Key weight for textgraph edge ( linguistic , linguistic ): 0.31268
Value weight for textgraph edge ( linguistic , linguistic ): 0.31268
Query weight for textgraph edge ( linguistic , theory ): 0.50362
Key weight for textgraph edge ( linguistic , theory ): 0.50362
Value weight for textgraph edge ( linguistic , theory ): 0.50362
Query weight for textgraph edge ( theory , consisting ): 3.02
Key weight for textgraph edge ( theory , consisting ): 3.02
Value weight for textgraph edge ( theory , consisting ): 3.02
Query weight for textgraph edge ( theory , linguistic ): 4.038
Key weight for textgraph edge ( theory , linguistic ): 4.038
Value weight for textgraph edge ( theory , linguistic ): 4.038
Query weight for textgraph edge ( theory , theory ): 5.187
Key weight for textgraph edge ( theory , theory ): 5.187
Value weight for textgraph edge ( theory , theory ): 5.187
