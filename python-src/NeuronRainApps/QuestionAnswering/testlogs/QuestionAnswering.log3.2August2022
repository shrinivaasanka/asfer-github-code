*** Introductory Examples for the NLTK Book ***
Loading text1, ..., text9 and sent1, ..., sent9
Type the name of the text or sentence to view it.
Type: 'texts()' or 'sents()' to list the materials.
text1: Moby Dick by Herman Melville 1851
text2: Sense and Sensibility by Jane Austen 1811
text3: The Book of Genesis
text4: Inaugural Address Corpus
text5: Chat Corpus
text6: Monty Python and the Holy Grail
text7: Wall Street Journal
text8: Personals Corpus
text9: The Man Who Was Thursday by G . K . Chesterton 1908
================================================================
Question: Who is the Father of Indian Freedom Struggle
2
defaultdict(<class 'list'>, {'especially': ['Father'], 'frequently': ['Father'], 'condition': ['freedom'], 'term': ['Father'], 'United': ['World_Health_Organization'], 'Nations': ['World_Health_Organization'], 'arrived': ['Indian'], 'international': ['World_Health_Organization'], 'churches': ['Father'], 'Padre': ['Father'], 'activities': ['World_Health_Organization'], 'Church': ['Father'], 'used': ['Father'], 'something': ['struggle'], '`': ['Father'], 'people': ['Indian'], 'Orthodox': ['Father'], 'energetic': ['struggle'], 'America': ['Indian'], "'": ['Father'], 'governments': ['World_Health_Organization'], 'member': ['Indian'], 'help': ['World_Health_Organization'], 'health': ['World_Health_Organization'], 'Roman': ['Father'], 'living': ['Indian'], 'achieve': ['struggle'], 'act': ['freedom'], 'speak': ['freedom'], 'Father': ['Father'], 'think': ['freedom'], 'power': ['freedom'], 'priests': ['Father'], 'free': ['freedom'], 'agency': ['World_Health_Organization'], 'externally': ['freedom'], 'race': ['Indian'], 'imposed': ['freedom'], 'address': ['Father'], 'military': ['Father'], 'services': ['World_Health_Organization'], 'restraints': ['freedom'], 'Catholic': ['Father'], 'without': ['freedom'], 'attempt': ['struggle'], 'improve': ['World_Health_Organization'], 'coordinate': ['World_Health_Organization'], 'Europeans': ['Indian']})
('definitiongraph networkx edges:', OutEdgeView([('especially', 'Father'), ('Father', 'especially'), ('Father', 'frequently'), ('Father', 'term'), ('Father', 'churches'), ('Father', 'Padre'), ('Father', 'Church'), ('Father', 'used'), ('Father', '`'), ('Father', 'Orthodox'), ('Father', "'"), ('Father', 'Roman'), ('Father', 'Father'), ('Father', 'priests'), ('Father', 'address'), ('Father', 'military'), ('Father', 'Catholic'), ('frequently', 'Father'), ('condition', 'freedom'), ('freedom', 'condition'), ('freedom', 'act'), ('freedom', 'speak'), ('freedom', 'think'), ('freedom', 'power'), ('freedom', 'free'), ('freedom', 'externally'), ('freedom', 'imposed'), ('freedom', 'restraints'), ('freedom', 'without'), ('term', 'Father'), ('United', 'World_Health_Organization'), ('World_Health_Organization', 'United'), ('World_Health_Organization', 'Nations'), ('World_Health_Organization', 'international'), ('World_Health_Organization', 'activities'), ('World_Health_Organization', 'governments'), ('World_Health_Organization', 'help'), ('World_Health_Organization', 'health'), ('World_Health_Organization', 'agency'), ('World_Health_Organization', 'services'), ('World_Health_Organization', 'improve'), ('World_Health_Organization', 'coordinate'), ('Nations', 'World_Health_Organization'), ('arrived', 'Indian'), ('Indian', 'arrived'), ('Indian', 'people'), ('Indian', 'America'), ('Indian', 'member'), ('Indian', 'living'), ('Indian', 'race'), ('Indian', 'Europeans'), ('international', 'World_Health_Organization'), ('churches', 'Father'), ('Padre', 'Father'), ('activities', 'World_Health_Organization'), ('Church', 'Father'), ('used', 'Father'), ('something', 'struggle'), ('struggle', 'something'), ('struggle', 'energetic'), ('struggle', 'achieve'), ('struggle', 'attempt'), ('`', 'Father'), ('people', 'Indian'), ('Orthodox', 'Father'), ('energetic', 'struggle'), ('America', 'Indian'), ("'", 'Father'), ('governments', 'World_Health_Organization'), ('member', 'Indian'), ('help', 'World_Health_Organization'), ('health', 'World_Health_Organization'), ('Roman', 'Father'), ('living', 'Indian'), ('achieve', 'struggle'), ('act', 'freedom'), ('speak', 'freedom'), ('think', 'freedom'), ('power', 'freedom'), ('priests', 'Father'), ('free', 'freedom'), ('agency', 'World_Health_Organization'), ('externally', 'freedom'), ('race', 'Indian'), ('imposed', 'freedom'), ('address', 'Father'), ('military', 'Father'), ('services', 'World_Health_Organization'), ('restraints', 'freedom'), ('Catholic', 'Father'), ('without', 'freedom'), ('attempt', 'struggle'), ('improve', 'World_Health_Organization'), ('coordinate', 'World_Health_Organization'), ('Europeans', 'Indian')]))
('Core number (sorted) :', [('especially', 2), ('Father', 2), ('frequently', 2), ('condition', 2), ('freedom', 2), ('term', 2), ('United', 2), ('World_Health_Organization', 2), ('Nations', 2), ('arrived', 2), ('Indian', 2), ('international', 2), ('churches', 2), ('Padre', 2), ('activities', 2), ('Church', 2), ('used', 2), ('something', 2), ('struggle', 2), ('`', 2), ('people', 2), ('Orthodox', 2), ('energetic', 2), ('America', 2), ("'", 2), ('governments', 2), ('member', 2), ('help', 2), ('health', 2), ('Roman', 2), ('living', 2), ('achieve', 2), ('act', 2), ('speak', 2), ('think', 2), ('power', 2), ('priests', 2), ('free', 2), ('agency', 2), ('externally', 2), ('race', 2), ('imposed', 2), ('address', 2), ('military', 2), ('services', 2), ('restraints', 2), ('Catholic', 2), ('without', 2), ('attempt', 2), ('improve', 2), ('coordinate', 2), ('Europeans', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'especially', ',core number=', 2)
('This document belongs to class:', 'Father', ',core number=', 2)
('This document belongs to class:', 'frequently', ',core number=', 2)
('This document belongs to class:', 'condition', ',core number=', 2)
('This document belongs to class:', 'freedom', ',core number=', 2)
('This document belongs to class:', 'term', ',core number=', 2)
('This document belongs to class:', 'United', ',core number=', 2)
('This document belongs to class:', 'World_Health_Organization', ',core number=', 2)
('This document belongs to class:', 'Nations', ',core number=', 2)
('This document belongs to class:', 'arrived', ',core number=', 2)
('This document belongs to class:', 'Indian', ',core number=', 2)
('This document belongs to class:', 'international', ',core number=', 2)
('This document belongs to class:', 'churches', ',core number=', 2)
('This document belongs to class:', 'Padre', ',core number=', 2)
('This document belongs to class:', 'activities', ',core number=', 2)
('This document belongs to class:', 'Church', ',core number=', 2)
('This document belongs to class:', 'used', ',core number=', 2)
('This document belongs to class:', 'something', ',core number=', 2)
('This document belongs to class:', 'struggle', ',core number=', 2)
('This document belongs to class:', '`', ',core number=', 2)
('This document belongs to class:', 'people', ',core number=', 2)
('This document belongs to class:', 'Orthodox', ',core number=', 2)
('This document belongs to class:', 'energetic', ',core number=', 2)
('This document belongs to class:', 'America', ',core number=', 2)
('This document belongs to class:', "'", ',core number=', 2)
('This document belongs to class:', 'governments', ',core number=', 2)
('This document belongs to class:', 'member', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Father', 0.08235294117647059), ('World_Health_Organization', 0.043137254901960784), ('freedom', 0.03529411764705882), ('Indian', 0.016470588235294115), ('struggle', 0.004705882352941176), ('especially', 0.0), ('frequently', 0.0), ('condition', 0.0), ('term', 0.0), ('United', 0.0), ('Nations', 0.0), ('arrived', 0.0), ('international', 0.0), ('churches', 0.0), ('Padre', 0.0), ('activities', 0.0), ('Church', 0.0), ('used', 0.0), ('something', 0.0), ('`', 0.0), ('people', 0.0), ('Orthodox', 0.0), ('energetic', 0.0), ('America', 0.0), ("'", 0.0), ('governments', 0.0), ('member', 0.0), ('help', 0.0), ('health', 0.0), ('Roman', 0.0), ('living', 0.0), ('achieve', 0.0), ('act', 0.0), ('speak', 0.0), ('think', 0.0), ('power', 0.0), ('priests', 0.0), ('free', 0.0), ('agency', 0.0), ('externally', 0.0), ('race', 0.0), ('imposed', 0.0), ('address', 0.0), ('military', 0.0), ('services', 0.0), ('restraints', 0.0), ('Catholic', 0.0), ('without', 0.0), ('attempt', 0.0), ('improve', 0.0), ('coordinate', 0.0), ('Europeans', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Father', 0.29411764705882354), ('World_Health_Organization', 0.21568627450980393), ('freedom', 0.19607843137254902), ('especially', 0.15212981744421908), ('frequently', 0.15212981744421908), ('term', 0.15212981744421908), ('churches', 0.15212981744421908), ('Padre', 0.15212981744421908), ('Church', 0.15212981744421908), ('used', 0.15212981744421908), ('`', 0.15212981744421908), ('Orthodox', 0.15212981744421908), ("'", 0.15212981744421908), ('Roman', 0.15212981744421908), ('priests', 0.15212981744421908), ('address', 0.15212981744421908), ('military', 0.15212981744421908), ('Catholic', 0.15212981744421908), ('Indian', 0.13725490196078433), ('United', 0.11297852474323064), ('Nations', 0.11297852474323064), ('international', 0.11297852474323064), ('activities', 0.11297852474323064), ('governments', 0.11297852474323064), ('help', 0.11297852474323064), ('health', 0.11297852474323064), ('agency', 0.11297852474323064), ('services', 0.11297852474323064), ('improve', 0.11297852474323064), ('coordinate', 0.11297852474323064), ('condition', 0.10319917440660474), ('act', 0.10319917440660474), ('speak', 0.10319917440660474), ('think', 0.10319917440660474), ('power', 0.10319917440660474), ('free', 0.10319917440660474), ('externally', 0.10319917440660474), ('imposed', 0.10319917440660474), ('restraints', 0.10319917440660474), ('without', 0.10319917440660474), ('struggle', 0.0784313725490196), ('arrived', 0.07390648567119155), ('people', 0.07390648567119155), ('America', 0.07390648567119155), ('member', 0.07390648567119155), ('living', 0.07390648567119155), ('race', 0.07390648567119155), ('Europeans', 0.07390648567119155), ('something', 0.04481792717086834), ('energetic', 0.04481792717086834), ('achieve', 0.04481792717086834), ('attempt', 0.04481792717086834)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Father', 0.5882352941176471), ('World_Health_Organization', 0.43137254901960786), ('freedom', 0.39215686274509803), ('Indian', 0.27450980392156865), ('struggle', 0.1568627450980392), ('especially', 0.0392156862745098), ('frequently', 0.0392156862745098), ('condition', 0.0392156862745098), ('term', 0.0392156862745098), ('United', 0.0392156862745098), ('Nations', 0.0392156862745098), ('arrived', 0.0392156862745098), ('international', 0.0392156862745098), ('churches', 0.0392156862745098), ('Padre', 0.0392156862745098), ('activities', 0.0392156862745098), ('Church', 0.0392156862745098), ('used', 0.0392156862745098), ('something', 0.0392156862745098), ('`', 0.0392156862745098), ('people', 0.0392156862745098), ('Orthodox', 0.0392156862745098), ('energetic', 0.0392156862745098), ('America', 0.0392156862745098), ("'", 0.0392156862745098), ('governments', 0.0392156862745098), ('member', 0.0392156862745098), ('help', 0.0392156862745098), ('health', 0.0392156862745098), ('Roman', 0.0392156862745098), ('living', 0.0392156862745098), ('achieve', 0.0392156862745098), ('act', 0.0392156862745098), ('speak', 0.0392156862745098), ('think', 0.0392156862745098), ('power', 0.0392156862745098), ('priests', 0.0392156862745098), ('free', 0.0392156862745098), ('agency', 0.0392156862745098), ('externally', 0.0392156862745098), ('race', 0.0392156862745098), ('imposed', 0.0392156862745098), ('address', 0.0392156862745098), ('military', 0.0392156862745098), ('services', 0.0392156862745098), ('restraints', 0.0392156862745098), ('Catholic', 0.0392156862745098), ('without', 0.0392156862745098), ('attempt', 0.0392156862745098), ('improve', 0.0392156862745098), ('coordinate', 0.0392156862745098), ('Europeans', 0.0392156862745098)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('Father', 0.14292763297216937), ('World_Health_Organization', 0.10758567190319789), ('freedom', 0.098750181635955), ('Indian', 0.07224371083422644), ('struggle', 0.04573724003249783), ('something', 0.012604151530337082), ('energetic', 0.012604151530337082), ('achieve', 0.012604151530337082), ('attempt', 0.012604151530337082), ('arrived', 0.011657491858846774), ('people', 0.011657491858846774), ('America', 0.011657491858846774), ('member', 0.011657491858846774), ('living', 0.011657491858846774), ('race', 0.011657491858846774), ('Europeans', 0.011657491858846774), ('condition', 0.011278827990250656), ('act', 0.011278827990250656), ('speak', 0.011278827990250656), ('think', 0.011278827990250656), ('power', 0.011278827990250656), ('free', 0.011278827990250656), ('externally', 0.011278827990250656), ('imposed', 0.011278827990250656), ('restraints', 0.011278827990250656), ('without', 0.011278827990250656), ('United', 0.011198505351457536), ('Nations', 0.011198505351457536), ('international', 0.011198505351457536), ('activities', 0.011198505351457536), ('governments', 0.011198505351457536), ('help', 0.011198505351457536), ('health', 0.011198505351457536), ('agency', 0.011198505351457536), ('services', 0.011198505351457536), ('improve', 0.011198505351457536), ('coordinate', 0.011198505351457536), ('especially', 0.010984311648009221), ('frequently', 0.010984311648009221), ('term', 0.010984311648009221), ('churches', 0.010984311648009221), ('Padre', 0.010984311648009221), ('Church', 0.010984311648009221), ('used', 0.010984311648009221), ('`', 0.010984311648009221), ('Orthodox', 0.010984311648009221), ("'", 0.010984311648009221), ('Roman', 0.010984311648009221), ('priests', 0.010984311648009221), ('address', 0.010984311648009221), ('military', 0.010984311648009221), ('Catholic', 0.010984311648009221)]
Question Textgraph: ([('especially', 2), ('Father', 2), ('frequently', 2), ('condition', 2), ('freedom', 2), ('term', 2), ('United', 2), ('World_Health_Organization', 2), ('Nations', 2), ('arrived', 2), ('Indian', 2), ('international', 2), ('churches', 2), ('Padre', 2), ('activities', 2), ('Church', 2), ('used', 2), ('something', 2), ('struggle', 2), ('`', 2), ('people', 2), ('Orthodox', 2), ('energetic', 2), ('America', 2), ("'", 2), ('governments', 2), ('member', 2), ('help', 2), ('health', 2), ('Roman', 2), ('living', 2), ('achieve', 2), ('act', 2), ('speak', 2), ('think', 2), ('power', 2), ('priests', 2), ('free', 2), ('agency', 2), ('externally', 2), ('race', 2), ('imposed', 2), ('address', 2), ('military', 2), ('services', 2), ('restraints', 2), ('Catholic', 2), ('without', 2), ('attempt', 2), ('improve', 2), ('coordinate', 2), ('Europeans', 2)], [('Father', 0.14292763297216937), ('World_Health_Organization', 0.10758567190319789), ('freedom', 0.098750181635955), ('Indian', 0.07224371083422644), ('struggle', 0.04573724003249783), ('something', 0.012604151530337082), ('energetic', 0.012604151530337082), ('achieve', 0.012604151530337082), ('attempt', 0.012604151530337082), ('arrived', 0.011657491858846774), ('people', 0.011657491858846774), ('America', 0.011657491858846774), ('member', 0.011657491858846774), ('living', 0.011657491858846774), ('race', 0.011657491858846774), ('Europeans', 0.011657491858846774), ('condition', 0.011278827990250656), ('act', 0.011278827990250656), ('speak', 0.011278827990250656), ('think', 0.011278827990250656), ('power', 0.011278827990250656), ('free', 0.011278827990250656), ('externally', 0.011278827990250656), ('imposed', 0.011278827990250656), ('restraints', 0.011278827990250656), ('without', 0.011278827990250656), ('United', 0.011198505351457536), ('Nations', 0.011198505351457536), ('international', 0.011198505351457536), ('activities', 0.011198505351457536), ('governments', 0.011198505351457536), ('help', 0.011198505351457536), ('health', 0.011198505351457536), ('agency', 0.011198505351457536), ('services', 0.011198505351457536), ('improve', 0.011198505351457536), ('coordinate', 0.011198505351457536), ('especially', 0.010984311648009221), ('frequently', 0.010984311648009221), ('term', 0.010984311648009221), ('churches', 0.010984311648009221), ('Padre', 0.010984311648009221), ('Church', 0.010984311648009221), ('used', 0.010984311648009221), ('`', 0.010984311648009221), ('Orthodox', 0.010984311648009221), ("'", 0.010984311648009221), ('Roman', 0.010984311648009221), ('priests', 0.010984311648009221), ('address', 0.010984311648009221), ('military', 0.010984311648009221), ('Catholic', 0.010984311648009221)])
Init of ConceptNet Client
wikipedia search result: Indian independence movement
wikipedia search result summary: The Indian independence movement was a series of historic events with the ultimate aim of ending British rule in India. It lasted from 1857 to 1947.The first nationalistic revolutionary movement for Indian independence emerged from  Bengal. It later took root in the newly formed Indian National Congress with prominent moderate leaders seeking the right to appear for Indian Civil Service examinations in British India, as well as more economic rights for natives. The first half of the 20th century saw a more radical approach towards self-rule by the  Lal Bal Pal triumvirate, Aurobindo Ghosh and V. O. Chidambaram Pillai.
The last stages of the self-rule struggle from the 1920s was characterized by Congress' adoption of Gandhi's policy of non-violence and civil disobedience. Intellectuals such as Rabindranath Tagore, Subramania Bharati, and Bankim Chandra Chattopadhyay spread patriotic awareness. Female leaders like Sarojini Naidu, Pritilata Waddedar, and Kasturba Gandhi promoted the emancipation of Indian women and their participation in the freedom struggle. B. R. Ambedkar championed the cause of the disadvantaged sections of Indian society.Some leaders followed a more violent approach. This became especially popular after the Rowlatt Act, which permitted indefinite detention. The Act sparked protests across India, especially in Punjab Province (British India) where they were violently suppressed in the Jallianwala Bagh massacre. Frustrated by perceived Congress inaction, revolutionaries such as Bhagat Singh, Shivaram Rajguru, Sukhdev Thapar, Chandra Shekhar Azad, and Subhas Chandra Bose resorted to violent means. Bose famously allied himself with the Axis powers and formed the Azad Hind. Meanwhile, Singh, Rajguru, Thapar, and Azad assassinated key British officers, and bombed Government buildings.
The Indian independence movement was in constant ideological evolution. Essentially anti-colonial, it was supplemented by visions of independent, economic development with a secular, democratic, republican, and civil-libertarian political structure. After the 1930s, the movement took on a strong socialist orientation. It culminated in the Indian Independence Act 1947, which ended suzerainty in India and created Pakistan.
India remained a Crown Dominion until 26 January 1950, when the Constitution of India established the Republic of India. Pakistan remained a dominion until 1956 when it adopted its first constitution. In 1971, East Pakistan declared its own independence as Bangladesh.


2
defaultdict(<class 'list'>, {'control': ['independence'], 'another': ['independence'], 'others': ['independence'], 'location': ['motion'], 'arrived': ['Indian'], 'change': ['motion'], 'influence': ['independence'], 'member': ['Indian'], 'race': ['Indian'], 'position': ['motion'], 'people': ['Indian'], 'America': ['Indian'], 'freedom': ['independence'], 'entail': ['motion'], 'Europeans': ['Indian'], 'living': ['Indian']})
('definitiongraph networkx edges:', OutEdgeView([('control', 'independence'), ('independence', 'control'), ('independence', 'another'), ('independence', 'others'), ('independence', 'influence'), ('independence', 'freedom'), ('another', 'independence'), ('others', 'independence'), ('location', 'motion'), ('motion', 'location'), ('motion', 'change'), ('motion', 'position'), ('motion', 'entail'), ('arrived', 'Indian'), ('Indian', 'arrived'), ('Indian', 'member'), ('Indian', 'race'), ('Indian', 'people'), ('Indian', 'America'), ('Indian', 'Europeans'), ('Indian', 'living'), ('change', 'motion'), ('influence', 'independence'), ('member', 'Indian'), ('race', 'Indian'), ('position', 'motion'), ('people', 'Indian'), ('America', 'Indian'), ('freedom', 'independence'), ('entail', 'motion'), ('Europeans', 'Indian'), ('living', 'Indian')]))
('Core number (sorted) :', [('control', 2), ('independence', 2), ('another', 2), ('others', 2), ('location', 2), ('motion', 2), ('arrived', 2), ('Indian', 2), ('change', 2), ('influence', 2), ('member', 2), ('race', 2), ('position', 2), ('people', 2), ('America', 2), ('freedom', 2), ('entail', 2), ('Europeans', 2), ('living', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'control', ',core number=', 2)
('This document belongs to class:', 'independence', ',core number=', 2)
('This document belongs to class:', 'another', ',core number=', 2)
('This document belongs to class:', 'others', ',core number=', 2)
('This document belongs to class:', 'location', ',core number=', 2)
('This document belongs to class:', 'motion', ',core number=', 2)
('This document belongs to class:', 'arrived', ',core number=', 2)
('This document belongs to class:', 'Indian', ',core number=', 2)
('This document belongs to class:', 'change', ',core number=', 2)
('This document belongs to class:', 'influence', ',core number=', 2)
('This document belongs to class:', 'member', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Indian', 0.13725490196078433), ('independence', 0.06535947712418301), ('motion', 0.0392156862745098), ('control', 0.0), ('another', 0.0), ('others', 0.0), ('location', 0.0), ('arrived', 0.0), ('change', 0.0), ('influence', 0.0), ('member', 0.0), ('race', 0.0), ('position', 0.0), ('people', 0.0), ('America', 0.0), ('freedom', 0.0), ('entail', 0.0), ('Europeans', 0.0), ('living', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Indian', 0.3888888888888889), ('independence', 0.2777777777777778), ('motion', 0.2222222222222222), ('arrived', 0.2094017094017094), ('member', 0.2094017094017094), ('race', 0.2094017094017094), ('people', 0.2094017094017094), ('America', 0.2094017094017094), ('Europeans', 0.2094017094017094), ('living', 0.2094017094017094), ('control', 0.154320987654321), ('another', 0.154320987654321), ('others', 0.154320987654321), ('influence', 0.154320987654321), ('freedom', 0.154320987654321), ('location', 0.12698412698412698), ('change', 0.12698412698412698), ('position', 0.12698412698412698), ('entail', 0.12698412698412698)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Indian', 0.7777777777777777), ('independence', 0.5555555555555556), ('motion', 0.4444444444444444), ('control', 0.1111111111111111), ('another', 0.1111111111111111), ('others', 0.1111111111111111), ('location', 0.1111111111111111), ('arrived', 0.1111111111111111), ('change', 0.1111111111111111), ('influence', 0.1111111111111111), ('member', 0.1111111111111111), ('race', 0.1111111111111111), ('position', 0.1111111111111111), ('people', 0.1111111111111111), ('America', 0.1111111111111111), ('freedom', 0.1111111111111111), ('entail', 0.1111111111111111), ('Europeans', 0.1111111111111111), ('living', 0.1111111111111111)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('Indian', 0.19772599664859347), ('independence', 0.14936119074818516), ('motion', 0.12517878779798097), ('location', 0.03449477673471528), ('change', 0.03449477673471528), ('position', 0.03449477673471528), ('entail', 0.03449477673471528), ('control', 0.03328565658720509), ('another', 0.03328565658720509), ('others', 0.03328565658720509), ('influence', 0.03328565658720509), ('freedom', 0.03328565658720509), ('arrived', 0.031903804990050535), ('member', 0.031903804990050535), ('race', 0.031903804990050535), ('people', 0.031903804990050535), ('America', 0.031903804990050535), ('Europeans', 0.031903804990050535), ('living', 0.031903804990050535)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('control', 'independence'), ('independence', 'control'), ('independence', 'another'), ('independence', 'others'), ('independence', 'influence'), ('independence', 'freedom'), ('another', 'independence'), ('others', 'independence'), ('location', 'motion'), ('motion', 'location'), ('motion', 'change'), ('motion', 'position'), ('motion', 'entail'), ('arrived', 'Indian'), ('Indian', 'arrived'), ('Indian', 'member'), ('Indian', 'race'), ('Indian', 'people'), ('Indian', 'America'), ('Indian', 'Europeans'), ('Indian', 'living'), ('change', 'motion'), ('influence', 'independence'), ('member', 'Indian'), ('race', 'Indian'), ('position', 'motion'), ('people', 'Indian'), ('America', 'Indian'), ('freedom', 'independence'), ('entail', 'motion'), ('Europeans', 'Indian'), ('living', 'Indian')]
Answer Textgraph  1 : ([('control', 2), ('independence', 2), ('another', 2), ('others', 2), ('location', 2), ('motion', 2), ('arrived', 2), ('Indian', 2), ('change', 2), ('influence', 2), ('member', 2), ('race', 2), ('position', 2), ('people', 2), ('America', 2), ('freedom', 2), ('entail', 2), ('Europeans', 2), ('living', 2)], [('Indian', 0.19772599664859347), ('independence', 0.14936119074818516), ('motion', 0.12517878779798097), ('location', 0.03449477673471528), ('change', 0.03449477673471528), ('position', 0.03449477673471528), ('entail', 0.03449477673471528), ('control', 0.03328565658720509), ('another', 0.03328565658720509), ('others', 0.03328565658720509), ('influence', 0.03328565658720509), ('freedom', 0.03328565658720509), ('arrived', 0.031903804990050535), ('member', 0.031903804990050535), ('race', 0.031903804990050535), ('people', 0.031903804990050535), ('America', 0.031903804990050535), ('Europeans', 0.031903804990050535), ('living', 0.031903804990050535)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.1, 0.1, 0.1], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11480000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31548
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.31548, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51382
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights updated after Gradient :  [0.11480000000000001, 0.31548, 0.51382]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11480000000000001, 0.31548, 0.51382], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11480000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31548
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.31548, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51382
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights updated after Gradient :  [0.11480000000000001, 0.31548, 0.51382]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11480000000000001, 0.31548, 0.51382], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11480000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31548
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.31548, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51382
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights updated after Gradient :  [0.11480000000000001, 0.31548, 0.51382]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11480000000000001, 0.31548, 0.51382], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( control , control ): 1.012
Key weight for textgraph edge ( control , control ): 4.024
Value weight for textgraph edge ( control , control ): 7.036
Query weight for textgraph edge ( control , independence ): 2.0132
Key weight for textgraph edge ( control , independence ): 5.0504
Value weight for textgraph edge ( control , independence ): 8.0876
Query weight for textgraph edge ( control , another ): 3.0338
Key weight for textgraph edge ( control , another ): 6.2636
Value weight for textgraph edge ( control , another ): 9.4934
Query weight for textgraph edge ( independence , control ): 0.11480000000000001
Key weight for textgraph edge ( independence , control ): 0.11480000000000001
Value weight for textgraph edge ( independence , control ): 0.11480000000000001
Query weight for textgraph edge ( independence , independence ): 0.31548
Key weight for textgraph edge ( independence , independence ): 0.31548
Value weight for textgraph edge ( independence , independence ): 0.31548
Query weight for textgraph edge ( independence , another ): 0.51382
Key weight for textgraph edge ( independence , another ): 0.51382
Value weight for textgraph edge ( independence , another ): 0.51382
Query weight for textgraph edge ( another , control ): 3.02
Key weight for textgraph edge ( another , control ): 3.02
Value weight for textgraph edge ( another , control ): 3.02
Query weight for textgraph edge ( another , independence ): 4.038
Key weight for textgraph edge ( another , independence ): 4.038
Value weight for textgraph edge ( another , independence ): 4.038
Query weight for textgraph edge ( another , another ): 5.187
Key weight for textgraph edge ( another , another ): 5.187
Value weight for textgraph edge ( another , another ): 5.187
wikipedia search result: List of Indian independence activists
wikipedia search result summary: The Indian independence movement consisted of efforts by individuals and organizations from a wide spectrum of society to obtain political independence from the British, French and Portuguese rule through the use of a many methods. This is a list of individuals who notably campaigned against or are considered to have campaigned against colonial rule on the Indian sub-continent.
Post-independence, the term "freedom fighter" was officially recognized by the Indian government Veeran Alagumuthu kone is a first freedom fighter in India 1710- 1759 for those who took part in the movement; people in this category (which can also include dependent family members) receive pensions and other benefits such as Special Railway Counters.


2
defaultdict(<class 'list'>, {'ordered': ['list'], 'control': ['independence'], 'another': ['independence'], 'others': ['independence'], 'containing': ['list'], 'arrived': ['Indian'], 'militant': ['militant'], 'influence': ['independence'], 'member': ['Indian'], 'race': ['Indian'], 'Europeans': ['Indian'], 'database': ['list'], 'people': ['Indian'], 'names': ['list'], 'array': ['list'], 'topics': ['list'], 'America': ['Indian'], 'freedom': ['independence'], 'reformer': ['militant'], 'items': ['list'], 'living': ['Indian']})
('definitiongraph networkx edges:', OutEdgeView([('ordered', 'list'), ('list', 'ordered'), ('list', 'containing'), ('list', 'database'), ('list', 'names'), ('list', 'array'), ('list', 'topics'), ('list', 'items'), ('control', 'independence'), ('independence', 'control'), ('independence', 'another'), ('independence', 'others'), ('independence', 'influence'), ('independence', 'freedom'), ('another', 'independence'), ('others', 'independence'), ('containing', 'list'), ('arrived', 'Indian'), ('Indian', 'arrived'), ('Indian', 'member'), ('Indian', 'race'), ('Indian', 'Europeans'), ('Indian', 'people'), ('Indian', 'America'), ('Indian', 'living'), ('militant', 'militant'), ('militant', 'reformer'), ('influence', 'independence'), ('member', 'Indian'), ('race', 'Indian'), ('Europeans', 'Indian'), ('database', 'list'), ('people', 'Indian'), ('names', 'list'), ('array', 'list'), ('topics', 'list'), ('America', 'Indian'), ('freedom', 'independence'), ('reformer', 'militant'), ('items', 'list'), ('living', 'Indian')]))
('Core number (sorted) :', [('ordered', 2), ('list', 2), ('control', 2), ('independence', 2), ('another', 2), ('others', 2), ('containing', 2), ('arrived', 2), ('Indian', 2), ('militant', 2), ('influence', 2), ('member', 2), ('race', 2), ('Europeans', 2), ('database', 2), ('people', 2), ('names', 2), ('array', 2), ('topics', 2), ('America', 2), ('freedom', 2), ('reformer', 2), ('items', 2), ('living', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'ordered', ',core number=', 2)
('This document belongs to class:', 'list', ',core number=', 2)
('This document belongs to class:', 'control', ',core number=', 2)
('This document belongs to class:', 'independence', ',core number=', 2)
('This document belongs to class:', 'another', ',core number=', 2)
('This document belongs to class:', 'others', ',core number=', 2)
('This document belongs to class:', 'containing', ',core number=', 2)
('This document belongs to class:', 'arrived', ',core number=', 2)
('This document belongs to class:', 'Indian', ',core number=', 2)
('This document belongs to class:', 'militant', ',core number=', 2)
('This document belongs to class:', 'influence', ',core number=', 2)
('This document belongs to class:', 'member', ',core number=', 2)
('This document belongs to class:', 'race', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('list', 0.08300395256916995), ('Indian', 0.08300395256916995), ('independence', 0.03952569169960474), ('ordered', 0.0), ('control', 0.0), ('another', 0.0), ('others', 0.0), ('containing', 0.0), ('arrived', 0.0), ('militant', 0.0), ('influence', 0.0), ('member', 0.0), ('race', 0.0), ('Europeans', 0.0), ('database', 0.0), ('people', 0.0), ('names', 0.0), ('array', 0.0), ('topics', 0.0), ('America', 0.0), ('freedom', 0.0), ('reformer', 0.0), ('items', 0.0), ('living', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('list', 0.30434782608695654), ('Indian', 0.30434782608695654), ('independence', 0.21739130434782608), ('ordered', 0.16387959866220736), ('containing', 0.16387959866220736), ('arrived', 0.16387959866220736), ('member', 0.16387959866220736), ('race', 0.16387959866220736), ('Europeans', 0.16387959866220736), ('database', 0.16387959866220736), ('people', 0.16387959866220736), ('names', 0.16387959866220736), ('array', 0.16387959866220736), ('topics', 0.16387959866220736), ('America', 0.16387959866220736), ('items', 0.16387959866220736), ('living', 0.16387959866220736), ('control', 0.12077294685990338), ('another', 0.12077294685990338), ('others', 0.12077294685990338), ('influence', 0.12077294685990338), ('freedom', 0.12077294685990338), ('militant', 0.043478260869565216), ('reformer', 0.043478260869565216)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('list', 0.6086956521739131), ('Indian', 0.6086956521739131), ('independence', 0.43478260869565216), ('ordered', 0.08695652173913043), ('control', 0.08695652173913043), ('another', 0.08695652173913043), ('others', 0.08695652173913043), ('containing', 0.08695652173913043), ('arrived', 0.08695652173913043), ('militant', 0.08695652173913043), ('influence', 0.08695652173913043), ('member', 0.08695652173913043), ('race', 0.08695652173913043), ('Europeans', 0.08695652173913043), ('database', 0.08695652173913043), ('people', 0.08695652173913043), ('names', 0.08695652173913043), ('array', 0.08695652173913043), ('topics', 0.08695652173913043), ('America', 0.08695652173913043), ('freedom', 0.08695652173913043), ('reformer', 0.08695652173913043), ('items', 0.08695652173913043), ('living', 0.08695652173913043)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('list', 0.15652970900376093), ('Indian', 0.15652970900376093), ('independence', 0.11824202822472954), ('militant', 0.041666666666666664), ('reformer', 0.041666666666666664), ('control', 0.026351594355054096), ('another', 0.026351594355054096), ('others', 0.026351594355054096), ('influence', 0.026351594355054096), ('freedom', 0.026351594355054096), ('ordered', 0.025257660618510334), ('containing', 0.025257660618510334), ('arrived', 0.025257660618510334), ('member', 0.025257660618510334), ('race', 0.025257660618510334), ('Europeans', 0.025257660618510334), ('database', 0.025257660618510334), ('people', 0.025257660618510334), ('names', 0.025257660618510334), ('array', 0.025257660618510334), ('topics', 0.025257660618510334), ('America', 0.025257660618510334), ('items', 0.025257660618510334), ('living', 0.025257660618510334)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('ordered', 'list'), ('list', 'ordered'), ('list', 'containing'), ('list', 'database'), ('list', 'names'), ('list', 'array'), ('list', 'topics'), ('list', 'items'), ('control', 'independence'), ('independence', 'control'), ('independence', 'another'), ('independence', 'others'), ('independence', 'influence'), ('independence', 'freedom'), ('another', 'independence'), ('others', 'independence'), ('containing', 'list'), ('arrived', 'Indian'), ('Indian', 'arrived'), ('Indian', 'member'), ('Indian', 'race'), ('Indian', 'Europeans'), ('Indian', 'people'), ('Indian', 'America'), ('Indian', 'living'), ('militant', 'militant'), ('militant', 'reformer'), ('influence', 'independence'), ('member', 'Indian'), ('race', 'Indian'), ('Europeans', 'Indian'), ('database', 'list'), ('people', 'Indian'), ('names', 'list'), ('array', 'list'), ('topics', 'list'), ('America', 'Indian'), ('freedom', 'independence'), ('reformer', 'militant'), ('items', 'list'), ('living', 'Indian')]
Answer Textgraph  2 : ([('ordered', 2), ('list', 2), ('control', 2), ('independence', 2), ('another', 2), ('others', 2), ('containing', 2), ('arrived', 2), ('Indian', 2), ('militant', 2), ('influence', 2), ('member', 2), ('race', 2), ('Europeans', 2), ('database', 2), ('people', 2), ('names', 2), ('array', 2), ('topics', 2), ('America', 2), ('freedom', 2), ('reformer', 2), ('items', 2), ('living', 2)], [('list', 0.15652970900376093), ('Indian', 0.15652970900376093), ('independence', 0.11824202822472954), ('militant', 0.041666666666666664), ('reformer', 0.041666666666666664), ('control', 0.026351594355054096), ('another', 0.026351594355054096), ('others', 0.026351594355054096), ('influence', 0.026351594355054096), ('freedom', 0.026351594355054096), ('ordered', 0.025257660618510334), ('containing', 0.025257660618510334), ('arrived', 0.025257660618510334), ('member', 0.025257660618510334), ('race', 0.025257660618510334), ('Europeans', 0.025257660618510334), ('database', 0.025257660618510334), ('people', 0.025257660618510334), ('names', 0.025257660618510334), ('array', 0.025257660618510334), ('topics', 0.025257660618510334), ('America', 0.025257660618510334), ('items', 0.025257660618510334), ('living', 0.025257660618510334)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11537142857142858
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights: [0.11537142857142858, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31668
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights: [0.11537142857142858, 0.31668, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5181914285714285
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights updated after Gradient :  [0.11537142857142858, 0.31668, 0.5181914285714285]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11537142857142858, 0.31668, 0.5181914285714285], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11537142857142858
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights: [0.11537142857142858, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31668
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights: [0.11537142857142858, 0.31668, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5181914285714285
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights updated after Gradient :  [0.11537142857142858, 0.31668, 0.5181914285714285]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11537142857142858, 0.31668, 0.5181914285714285], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11537142857142858
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights: [0.11537142857142858, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31668
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights: [0.11537142857142858, 0.31668, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5181914285714285
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights updated after Gradient :  [0.11537142857142858, 0.31668, 0.5181914285714285]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11537142857142858, 0.31668, 0.5181914285714285], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( ordered , ordered ): 1.012
Key weight for textgraph edge ( ordered , ordered ): 4.024
Value weight for textgraph edge ( ordered , ordered ): 7.036
Query weight for textgraph edge ( ordered , list ): 2.0132
Key weight for textgraph edge ( ordered , list ): 5.0504
Value weight for textgraph edge ( ordered , list ): 8.0876
Query weight for textgraph edge ( ordered , control ): 3.0338
Key weight for textgraph edge ( ordered , control ): 6.2636
Value weight for textgraph edge ( ordered , control ): 9.4934
Query weight for textgraph edge ( list , ordered ): 0.11537142857142858
Key weight for textgraph edge ( list , ordered ): 0.11537142857142858
Value weight for textgraph edge ( list , ordered ): 0.11537142857142858
Query weight for textgraph edge ( list , list ): 0.31668
Key weight for textgraph edge ( list , list ): 0.31668
Value weight for textgraph edge ( list , list ): 0.31668
Query weight for textgraph edge ( list , control ): 0.5181914285714285
Key weight for textgraph edge ( list , control ): 0.5181914285714285
Value weight for textgraph edge ( list , control ): 0.5181914285714285
Query weight for textgraph edge ( control , ordered ): 3.02
Key weight for textgraph edge ( control , ordered ): 3.02
Value weight for textgraph edge ( control , ordered ): 3.02
Query weight for textgraph edge ( control , list ): 4.038
Key weight for textgraph edge ( control , list ): 4.038
Value weight for textgraph edge ( control , list ): 4.038
Query weight for textgraph edge ( control , control ): 5.187
Key weight for textgraph edge ( control , control ): 5.187
Value weight for textgraph edge ( control , control ): 5.187
wikipedia search result: History of the Indian National Congress
wikipedia search result summary: The Indian National Congress was established when 72 delegates from all over the country met at Bombay in 1885. Prominent delegates included Dadabhai Naoroji, Surendranath Banerjee, Badruddin Tyabji, Pherozeshah Mehta W. C. Bonnerjee, S. Ramaswami Mudaliar, S. Subramania Iyer, and Romesh Chunder Dutt. The Englishman Allan Octavian Hume, a former British civil servant, was one of the founding members of the Indian National Congress.


2
defaultdict(<class 'list'>, {'aggregate': ['history'], 'events': ['history'], 'past': ['history'], 'person': ['national'], 'United': ['Congress'], 'arrived': ['Indian'], 'allegiance': ['national'], 'States': ['Congress'], 'member': ['Indian'], 'owes': ['national'], 'race': ['Indian'], 'nation': ['national'], 'people': ['Indian'], 'legislature': ['Congress'], 'America': ['Indian'], 'Europeans': ['Indian'], 'living': ['Indian'], 'government': ['Congress']})
('definitiongraph networkx edges:', OutEdgeView([('aggregate', 'history'), ('history', 'aggregate'), ('history', 'events'), ('history', 'past'), ('events', 'history'), ('past', 'history'), ('person', 'national'), ('national', 'person'), ('national', 'allegiance'), ('national', 'owes'), ('national', 'nation'), ('United', 'Congress'), ('Congress', 'United'), ('Congress', 'States'), ('Congress', 'legislature'), ('Congress', 'government'), ('arrived', 'Indian'), ('Indian', 'arrived'), ('Indian', 'member'), ('Indian', 'race'), ('Indian', 'people'), ('Indian', 'America'), ('Indian', 'Europeans'), ('Indian', 'living'), ('allegiance', 'national'), ('States', 'Congress'), ('member', 'Indian'), ('owes', 'national'), ('race', 'Indian'), ('nation', 'national'), ('people', 'Indian'), ('legislature', 'Congress'), ('America', 'Indian'), ('Europeans', 'Indian'), ('living', 'Indian'), ('government', 'Congress')]))
('Core number (sorted) :', [('aggregate', 2), ('history', 2), ('events', 2), ('past', 2), ('person', 2), ('national', 2), ('United', 2), ('Congress', 2), ('arrived', 2), ('Indian', 2), ('allegiance', 2), ('States', 2), ('member', 2), ('owes', 2), ('race', 2), ('nation', 2), ('people', 2), ('legislature', 2), ('America', 2), ('Europeans', 2), ('living', 2), ('government', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'aggregate', ',core number=', 2)
('This document belongs to class:', 'history', ',core number=', 2)
('This document belongs to class:', 'events', ',core number=', 2)
('This document belongs to class:', 'past', ',core number=', 2)
('This document belongs to class:', 'person', ',core number=', 2)
('This document belongs to class:', 'national', ',core number=', 2)
('This document belongs to class:', 'United', ',core number=', 2)
('This document belongs to class:', 'Congress', ',core number=', 2)
('This document belongs to class:', 'arrived', ',core number=', 2)
('This document belongs to class:', 'Indian', ',core number=', 2)
('This document belongs to class:', 'allegiance', ',core number=', 2)
('This document belongs to class:', 'States', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Indian', 0.1), ('national', 0.028571428571428574), ('Congress', 0.028571428571428574), ('history', 0.014285714285714287), ('aggregate', 0.0), ('events', 0.0), ('past', 0.0), ('person', 0.0), ('United', 0.0), ('arrived', 0.0), ('allegiance', 0.0), ('States', 0.0), ('member', 0.0), ('owes', 0.0), ('race', 0.0), ('nation', 0.0), ('people', 0.0), ('legislature', 0.0), ('America', 0.0), ('Europeans', 0.0), ('living', 0.0), ('government', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Indian', 0.3333333333333333), ('national', 0.19047619047619047), ('Congress', 0.19047619047619047), ('arrived', 0.17948717948717946), ('member', 0.17948717948717946), ('race', 0.17948717948717946), ('people', 0.17948717948717946), ('America', 0.17948717948717946), ('Europeans', 0.17948717948717946), ('living', 0.17948717948717946), ('history', 0.14285714285714285), ('person', 0.10884353741496597), ('United', 0.10884353741496597), ('allegiance', 0.10884353741496597), ('States', 0.10884353741496597), ('owes', 0.10884353741496597), ('nation', 0.10884353741496597), ('legislature', 0.10884353741496597), ('government', 0.10884353741496597), ('aggregate', 0.0857142857142857), ('events', 0.0857142857142857), ('past', 0.0857142857142857)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Indian', 0.6666666666666666), ('national', 0.38095238095238093), ('Congress', 0.38095238095238093), ('history', 0.2857142857142857), ('aggregate', 0.09523809523809523), ('events', 0.09523809523809523), ('past', 0.09523809523809523), ('person', 0.09523809523809523), ('United', 0.09523809523809523), ('arrived', 0.09523809523809523), ('allegiance', 0.09523809523809523), ('States', 0.09523809523809523), ('member', 0.09523809523809523), ('owes', 0.09523809523809523), ('race', 0.09523809523809523), ('nation', 0.09523809523809523), ('people', 0.09523809523809523), ('legislature', 0.09523809523809523), ('America', 0.09523809523809523), ('Europeans', 0.09523809523809523), ('living', 0.09523809523809523), ('government', 0.09523809523809523)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('Indian', 0.1707596825495574), ('national', 0.10810711400205145), ('Congress', 0.10810711400205145), ('history', 0.08722292448621607), ('aggregate', 0.03153175244398856), ('events', 0.03153175244398856), ('past', 0.03153175244398856), ('person', 0.02979140331766896), ('United', 0.02979140331766896), ('allegiance', 0.02979140331766896), ('States', 0.02979140331766896), ('owes', 0.02979140331766896), ('nation', 0.02979140331766896), ('legislature', 0.02979140331766896), ('government', 0.02979140331766896), ('arrived', 0.02755381158382946), ('member', 0.02755381158382946), ('race', 0.02755381158382946), ('people', 0.02755381158382946), ('America', 0.02755381158382946), ('Europeans', 0.02755381158382946), ('living', 0.02755381158382946)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('aggregate', 'history'), ('history', 'aggregate'), ('history', 'events'), ('history', 'past'), ('events', 'history'), ('past', 'history'), ('person', 'national'), ('national', 'person'), ('national', 'allegiance'), ('national', 'owes'), ('national', 'nation'), ('United', 'Congress'), ('Congress', 'United'), ('Congress', 'States'), ('Congress', 'legislature'), ('Congress', 'government'), ('arrived', 'Indian'), ('Indian', 'arrived'), ('Indian', 'member'), ('Indian', 'race'), ('Indian', 'people'), ('Indian', 'America'), ('Indian', 'Europeans'), ('Indian', 'living'), ('allegiance', 'national'), ('States', 'Congress'), ('member', 'Indian'), ('owes', 'national'), ('race', 'Indian'), ('nation', 'national'), ('people', 'Indian'), ('legislature', 'Congress'), ('America', 'Indian'), ('Europeans', 'Indian'), ('living', 'Indian'), ('government', 'Congress')]
Answer Textgraph  3 : ([('aggregate', 2), ('history', 2), ('events', 2), ('past', 2), ('person', 2), ('national', 2), ('United', 2), ('Congress', 2), ('arrived', 2), ('Indian', 2), ('allegiance', 2), ('States', 2), ('member', 2), ('owes', 2), ('race', 2), ('nation', 2), ('people', 2), ('legislature', 2), ('America', 2), ('Europeans', 2), ('living', 2), ('government', 2)], [('Indian', 0.1707596825495574), ('national', 0.10810711400205145), ('Congress', 0.10810711400205145), ('history', 0.08722292448621607), ('aggregate', 0.03153175244398856), ('events', 0.03153175244398856), ('past', 0.03153175244398856), ('person', 0.02979140331766896), ('United', 0.02979140331766896), ('allegiance', 0.02979140331766896), ('States', 0.02979140331766896), ('owes', 0.02979140331766896), ('nation', 0.02979140331766896), ('legislature', 0.02979140331766896), ('government', 0.02979140331766896), ('arrived', 0.02755381158382946), ('member', 0.02755381158382946), ('race', 0.02755381158382946), ('people', 0.02755381158382946), ('America', 0.02755381158382946), ('Europeans', 0.02755381158382946), ('living', 0.02755381158382946)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.16666666666666666, 0.16666666666666666, 0.16666666666666666], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11346666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31268
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.31268, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.50362
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights updated after Gradient :  [0.11346666666666667, 0.31268, 0.50362]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11346666666666667, 0.31268, 0.50362], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11346666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31268
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.31268, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.50362
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights updated after Gradient :  [0.11346666666666667, 0.31268, 0.50362]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11346666666666667, 0.31268, 0.50362], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11346666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31268
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.31268, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.50362
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights updated after Gradient :  [0.11346666666666667, 0.31268, 0.50362]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11346666666666667, 0.31268, 0.50362], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( aggregate , aggregate ): 1.012
Key weight for textgraph edge ( aggregate , aggregate ): 4.024
Value weight for textgraph edge ( aggregate , aggregate ): 7.036
Query weight for textgraph edge ( aggregate , history ): 2.0132
Key weight for textgraph edge ( aggregate , history ): 5.0504
Value weight for textgraph edge ( aggregate , history ): 8.0876
Query weight for textgraph edge ( aggregate , events ): 3.0338
Key weight for textgraph edge ( aggregate , events ): 6.2636
Value weight for textgraph edge ( aggregate , events ): 9.4934
Query weight for textgraph edge ( history , aggregate ): 0.11346666666666667
Key weight for textgraph edge ( history , aggregate ): 0.11346666666666667
Value weight for textgraph edge ( history , aggregate ): 0.11346666666666667
Query weight for textgraph edge ( history , history ): 0.31268
Key weight for textgraph edge ( history , history ): 0.31268
Value weight for textgraph edge ( history , history ): 0.31268
Query weight for textgraph edge ( history , events ): 0.50362
Key weight for textgraph edge ( history , events ): 0.50362
Value weight for textgraph edge ( history , events ): 0.50362
Query weight for textgraph edge ( events , aggregate ): 3.02
Key weight for textgraph edge ( events , aggregate ): 3.02
Value weight for textgraph edge ( events , aggregate ): 3.02
Query weight for textgraph edge ( events , history ): 4.038
Key weight for textgraph edge ( events , history ): 4.038
Value weight for textgraph edge ( events , history ): 4.038
Query weight for textgraph edge ( events , events ): 5.187
Key weight for textgraph edge ( events , events ): 5.187
Value weight for textgraph edge ( events , events ): 5.187
wikipedia search result: The Great Indian Kitchen
wikipedia search result summary: The Great Indian Kitchen is a 2021 Indian Malayalam-language drama film written and directed by Jeo Baby. The film tells the story of a newly wed woman (Nimisha Sajayan) who struggles to be the submissive wife that her husband (Suraj Venjaramood) and his family expect her to be. The music was composed by Sooraj S. Kurup and Mathews Pulickan.
The film was directly released on Neestream on 15 January 2021. The film received universal critical acclaim and won Kerala State Film Award for Best Film, Best Screenplay award for Jeo Baby and Best Sound Designer award for Tony Babu.
2
defaultdict(<class 'list'>, {'honor': ['great'], 'person': ['great'], 'arrived': ['Indian'], 'member': ['Indian'], 'field': ['great'], 'race': ['Indian'], 'achieved': ['great'], 'preparing': ['kitchen'], 'distinction': ['great'], 'people': ['Indian'], 'room': ['kitchen'], 'America': ['Indian'], 'equipped': ['kitchen'], 'meals': ['kitchen'], 'Europeans': ['Indian'], 'living': ['Indian']})
('definitiongraph networkx edges:', OutEdgeView([('honor', 'great'), ('great', 'honor'), ('great', 'person'), ('great', 'field'), ('great', 'achieved'), ('great', 'distinction'), ('person', 'great'), ('arrived', 'Indian'), ('Indian', 'arrived'), ('Indian', 'member'), ('Indian', 'race'), ('Indian', 'people'), ('Indian', 'America'), ('Indian', 'Europeans'), ('Indian', 'living'), ('member', 'Indian'), ('field', 'great'), ('race', 'Indian'), ('achieved', 'great'), ('preparing', 'kitchen'), ('kitchen', 'preparing'), ('kitchen', 'room'), ('kitchen', 'equipped'), ('kitchen', 'meals'), ('distinction', 'great'), ('people', 'Indian'), ('room', 'kitchen'), ('America', 'Indian'), ('equipped', 'kitchen'), ('meals', 'kitchen'), ('Europeans', 'Indian'), ('living', 'Indian')]))
('Core number (sorted) :', [('honor', 2), ('great', 2), ('person', 2), ('arrived', 2), ('Indian', 2), ('member', 2), ('field', 2), ('race', 2), ('achieved', 2), ('preparing', 2), ('kitchen', 2), ('distinction', 2), ('people', 2), ('room', 2), ('America', 2), ('equipped', 2), ('meals', 2), ('Europeans', 2), ('living', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'honor', ',core number=', 2)
('This document belongs to class:', 'great', ',core number=', 2)
('This document belongs to class:', 'person', ',core number=', 2)
('This document belongs to class:', 'arrived', ',core number=', 2)
('This document belongs to class:', 'Indian', ',core number=', 2)
('This document belongs to class:', 'member', ',core number=', 2)
('This document belongs to class:', 'field', ',core number=', 2)
('This document belongs to class:', 'race', ',core number=', 2)
('This document belongs to class:', 'achieved', ',core number=', 2)
('This document belongs to class:', 'preparing', ',core number=', 2)
('This document belongs to class:', 'kitchen', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Indian', 0.13725490196078433), ('great', 0.06535947712418301), ('kitchen', 0.0392156862745098), ('honor', 0.0), ('person', 0.0), ('arrived', 0.0), ('member', 0.0), ('field', 0.0), ('race', 0.0), ('achieved', 0.0), ('preparing', 0.0), ('distinction', 0.0), ('people', 0.0), ('room', 0.0), ('America', 0.0), ('equipped', 0.0), ('meals', 0.0), ('Europeans', 0.0), ('living', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Indian', 0.3888888888888889), ('great', 0.2777777777777778), ('kitchen', 0.2222222222222222), ('arrived', 0.2094017094017094), ('member', 0.2094017094017094), ('race', 0.2094017094017094), ('people', 0.2094017094017094), ('America', 0.2094017094017094), ('Europeans', 0.2094017094017094), ('living', 0.2094017094017094), ('honor', 0.154320987654321), ('person', 0.154320987654321), ('field', 0.154320987654321), ('achieved', 0.154320987654321), ('distinction', 0.154320987654321), ('preparing', 0.12698412698412698), ('room', 0.12698412698412698), ('equipped', 0.12698412698412698), ('meals', 0.12698412698412698)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Indian', 0.7777777777777777), ('great', 0.5555555555555556), ('kitchen', 0.4444444444444444), ('honor', 0.1111111111111111), ('person', 0.1111111111111111), ('arrived', 0.1111111111111111), ('member', 0.1111111111111111), ('field', 0.1111111111111111), ('race', 0.1111111111111111), ('achieved', 0.1111111111111111), ('preparing', 0.1111111111111111), ('distinction', 0.1111111111111111), ('people', 0.1111111111111111), ('room', 0.1111111111111111), ('America', 0.1111111111111111), ('equipped', 0.1111111111111111), ('meals', 0.1111111111111111), ('Europeans', 0.1111111111111111), ('living', 0.1111111111111111)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('Indian', 0.19772599664859347), ('great', 0.14936119074818516), ('kitchen', 0.12517878779798097), ('preparing', 0.03449477673471528), ('room', 0.03449477673471528), ('equipped', 0.03449477673471528), ('meals', 0.03449477673471528), ('honor', 0.03328565658720509), ('person', 0.03328565658720509), ('field', 0.03328565658720509), ('achieved', 0.03328565658720509), ('distinction', 0.03328565658720509), ('arrived', 0.031903804990050535), ('member', 0.031903804990050535), ('race', 0.031903804990050535), ('people', 0.031903804990050535), ('America', 0.031903804990050535), ('Europeans', 0.031903804990050535), ('living', 0.031903804990050535)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('honor', 'great'), ('great', 'honor'), ('great', 'person'), ('great', 'field'), ('great', 'achieved'), ('great', 'distinction'), ('person', 'great'), ('arrived', 'Indian'), ('Indian', 'arrived'), ('Indian', 'member'), ('Indian', 'race'), ('Indian', 'people'), ('Indian', 'America'), ('Indian', 'Europeans'), ('Indian', 'living'), ('member', 'Indian'), ('field', 'great'), ('race', 'Indian'), ('achieved', 'great'), ('preparing', 'kitchen'), ('kitchen', 'preparing'), ('kitchen', 'room'), ('kitchen', 'equipped'), ('kitchen', 'meals'), ('distinction', 'great'), ('people', 'Indian'), ('room', 'kitchen'), ('America', 'Indian'), ('equipped', 'kitchen'), ('meals', 'kitchen'), ('Europeans', 'Indian'), ('living', 'Indian')]
Answer Textgraph  4 : ([('honor', 2), ('great', 2), ('person', 2), ('arrived', 2), ('Indian', 2), ('member', 2), ('field', 2), ('race', 2), ('achieved', 2), ('preparing', 2), ('kitchen', 2), ('distinction', 2), ('people', 2), ('room', 2), ('America', 2), ('equipped', 2), ('meals', 2), ('Europeans', 2), ('living', 2)], [('Indian', 0.19772599664859347), ('great', 0.14936119074818516), ('kitchen', 0.12517878779798097), ('preparing', 0.03449477673471528), ('room', 0.03449477673471528), ('equipped', 0.03449477673471528), ('meals', 0.03449477673471528), ('honor', 0.03328565658720509), ('person', 0.03328565658720509), ('field', 0.03328565658720509), ('achieved', 0.03328565658720509), ('distinction', 0.03328565658720509), ('arrived', 0.031903804990050535), ('member', 0.031903804990050535), ('race', 0.031903804990050535), ('people', 0.031903804990050535), ('America', 0.031903804990050535), ('Europeans', 0.031903804990050535), ('living', 0.031903804990050535)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.1, 0.1, 0.1], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11480000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31548
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.31548, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51382
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights updated after Gradient :  [0.11480000000000001, 0.31548, 0.51382]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11480000000000001, 0.31548, 0.51382], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11480000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31548
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.31548, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51382
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights updated after Gradient :  [0.11480000000000001, 0.31548, 0.51382]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11480000000000001, 0.31548, 0.51382], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11480000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31548
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.31548, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51382
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights updated after Gradient :  [0.11480000000000001, 0.31548, 0.51382]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11480000000000001, 0.31548, 0.51382], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( honor , honor ): 1.012
Key weight for textgraph edge ( honor , honor ): 4.024
Value weight for textgraph edge ( honor , honor ): 7.036
Query weight for textgraph edge ( honor , great ): 2.0132
Key weight for textgraph edge ( honor , great ): 5.0504
Value weight for textgraph edge ( honor , great ): 8.0876
Query weight for textgraph edge ( honor , person ): 3.0338
Key weight for textgraph edge ( honor , person ): 6.2636
Value weight for textgraph edge ( honor , person ): 9.4934
Query weight for textgraph edge ( great , honor ): 0.11480000000000001
Key weight for textgraph edge ( great , honor ): 0.11480000000000001
Value weight for textgraph edge ( great , honor ): 0.11480000000000001
Query weight for textgraph edge ( great , great ): 0.31548
Key weight for textgraph edge ( great , great ): 0.31548
Value weight for textgraph edge ( great , great ): 0.31548
Query weight for textgraph edge ( great , person ): 0.51382
Key weight for textgraph edge ( great , person ): 0.51382
Value weight for textgraph edge ( great , person ): 0.51382
Query weight for textgraph edge ( person , honor ): 3.02
Key weight for textgraph edge ( person , honor ): 3.02
Value weight for textgraph edge ( person , honor ): 3.02
Query weight for textgraph edge ( person , great ): 4.038
Key weight for textgraph edge ( person , great ): 4.038
Value weight for textgraph edge ( person , great ): 4.038
Query weight for textgraph edge ( person , person ): 5.187
Key weight for textgraph edge ( person , person ): 5.187
Value weight for textgraph edge ( person , person ): 5.187
wikipedia search result: 7 March Speech of Bangabandhu
wikipedia search result summary: The 7 March Speech of Bangabandhu was a historic speech given by Sheikh Mujibur Rahman, the Founding Father of Bangladesh on 7 March 1971 at the Ramna Race Course (now Suhrawardy Udyan) made in Dhaka to a gathering of over 20 thousands  (20,000) people. It was delivered during a period of escalating tensions between East Pakistan and the powerful political and military establishment of West Pakistan. In the speech, Bangabandhu informally declared independence of Bangladesh, proclaiming: "The struggle this time, is a struggle for our liberty. The struggle this time, is a struggle for our independence." He announced a civil disobedience movement in the province, calling for "every house to turn into a fortress". The speech inspired the Bengali people to prepare for a war of independence amid widespread reports of armed mobilisation by West Pakistan. The Bangladesh Liberation War began 18 days later when the Pakistan Army initiated Operation Searchlight against Bengali civilians, intelligentsia, students, politicians, and armed personnel. On 30 October 2017, UNESCO added the speech to the Memory of the World Register as a documentary heritage.
2
defaultdict(<class 'list'>, {'April': ['March'], 'preceding': ['March'], 'act': ['address'], 'February': ['March'], 'one': ['seven'], 'number': ['seven'], 'spoken': ['address'], 'six': ['seven'], 'sum': ['seven'], 'communication': ['address'], 'audience': ['address'], 'delivering': ['address'], 'formal': ['address'], 'month': ['March'], 'cardinal': ['seven'], 'following': ['March']})
('definitiongraph networkx edges:', OutEdgeView([('April', 'March'), ('March', 'April'), ('March', 'preceding'), ('March', 'February'), ('March', 'month'), ('March', 'following'), ('preceding', 'March'), ('act', 'address'), ('address', 'act'), ('address', 'spoken'), ('address', 'communication'), ('address', 'audience'), ('address', 'delivering'), ('address', 'formal'), ('February', 'March'), ('one', 'seven'), ('seven', 'one'), ('seven', 'number'), ('seven', 'six'), ('seven', 'sum'), ('seven', 'cardinal'), ('number', 'seven'), ('spoken', 'address'), ('six', 'seven'), ('sum', 'seven'), ('communication', 'address'), ('audience', 'address'), ('delivering', 'address'), ('formal', 'address'), ('month', 'March'), ('cardinal', 'seven'), ('following', 'March')]))
('Core number (sorted) :', [('April', 2), ('March', 2), ('preceding', 2), ('act', 2), ('address', 2), ('February', 2), ('one', 2), ('seven', 2), ('number', 2), ('spoken', 2), ('six', 2), ('sum', 2), ('communication', 2), ('audience', 2), ('delivering', 2), ('formal', 2), ('month', 2), ('cardinal', 2), ('following', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'April', ',core number=', 2)
('This document belongs to class:', 'March', ',core number=', 2)
('This document belongs to class:', 'preceding', ',core number=', 2)
('This document belongs to class:', 'act', ',core number=', 2)
('This document belongs to class:', 'address', ',core number=', 2)
('This document belongs to class:', 'February', ',core number=', 2)
('This document belongs to class:', 'one', ',core number=', 2)
('This document belongs to class:', 'seven', ',core number=', 2)
('This document belongs to class:', 'number', ',core number=', 2)
('This document belongs to class:', 'spoken', ',core number=', 2)
('This document belongs to class:', 'six', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('address', 0.09803921568627451), ('March', 0.06535947712418301), ('seven', 0.06535947712418301), ('April', 0.0), ('preceding', 0.0), ('act', 0.0), ('February', 0.0), ('one', 0.0), ('number', 0.0), ('spoken', 0.0), ('six', 0.0), ('sum', 0.0), ('communication', 0.0), ('audience', 0.0), ('delivering', 0.0), ('formal', 0.0), ('month', 0.0), ('cardinal', 0.0), ('following', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('address', 0.3333333333333333), ('March', 0.2777777777777778), ('seven', 0.2777777777777778), ('act', 0.1818181818181818), ('spoken', 0.1818181818181818), ('communication', 0.1818181818181818), ('audience', 0.1818181818181818), ('delivering', 0.1818181818181818), ('formal', 0.1818181818181818), ('April', 0.154320987654321), ('preceding', 0.154320987654321), ('February', 0.154320987654321), ('one', 0.154320987654321), ('number', 0.154320987654321), ('six', 0.154320987654321), ('sum', 0.154320987654321), ('month', 0.154320987654321), ('cardinal', 0.154320987654321), ('following', 0.154320987654321)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('address', 0.6666666666666666), ('March', 0.5555555555555556), ('seven', 0.5555555555555556), ('April', 0.1111111111111111), ('preceding', 0.1111111111111111), ('act', 0.1111111111111111), ('February', 0.1111111111111111), ('one', 0.1111111111111111), ('number', 0.1111111111111111), ('spoken', 0.1111111111111111), ('six', 0.1111111111111111), ('sum', 0.1111111111111111), ('communication', 0.1111111111111111), ('audience', 0.1111111111111111), ('delivering', 0.1111111111111111), ('formal', 0.1111111111111111), ('month', 0.1111111111111111), ('cardinal', 0.1111111111111111), ('following', 0.1111111111111111)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('address', 0.17354359369838931), ('March', 0.14936119074818516), ('seven', 0.14936119074818516), ('April', 0.03328565658720509), ('preceding', 0.03328565658720509), ('February', 0.03328565658720509), ('one', 0.03328565658720509), ('number', 0.03328565658720509), ('six', 0.03328565658720509), ('sum', 0.03328565658720509), ('month', 0.03328565658720509), ('cardinal', 0.03328565658720509), ('following', 0.03328565658720509), ('act', 0.03247957648886493), ('spoken', 0.03247957648886493), ('communication', 0.03247957648886493), ('audience', 0.03247957648886493), ('delivering', 0.03247957648886493), ('formal', 0.03247957648886493)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('April', 'March'), ('March', 'April'), ('March', 'preceding'), ('March', 'February'), ('March', 'month'), ('March', 'following'), ('preceding', 'March'), ('act', 'address'), ('address', 'act'), ('address', 'spoken'), ('address', 'communication'), ('address', 'audience'), ('address', 'delivering'), ('address', 'formal'), ('February', 'March'), ('one', 'seven'), ('seven', 'one'), ('seven', 'number'), ('seven', 'six'), ('seven', 'sum'), ('seven', 'cardinal'), ('number', 'seven'), ('spoken', 'address'), ('six', 'seven'), ('sum', 'seven'), ('communication', 'address'), ('audience', 'address'), ('delivering', 'address'), ('formal', 'address'), ('month', 'March'), ('cardinal', 'seven'), ('following', 'March')]
Answer Textgraph  5 : ([('April', 2), ('March', 2), ('preceding', 2), ('act', 2), ('address', 2), ('February', 2), ('one', 2), ('seven', 2), ('number', 2), ('spoken', 2), ('six', 2), ('sum', 2), ('communication', 2), ('audience', 2), ('delivering', 2), ('formal', 2), ('month', 2), ('cardinal', 2), ('following', 2)], [('address', 0.17354359369838931), ('March', 0.14936119074818516), ('seven', 0.14936119074818516), ('April', 0.03328565658720509), ('preceding', 0.03328565658720509), ('February', 0.03328565658720509), ('one', 0.03328565658720509), ('number', 0.03328565658720509), ('six', 0.03328565658720509), ('sum', 0.03328565658720509), ('month', 0.03328565658720509), ('cardinal', 0.03328565658720509), ('following', 0.03328565658720509), ('act', 0.03247957648886493), ('spoken', 0.03247957648886493), ('communication', 0.03247957648886493), ('audience', 0.03247957648886493), ('delivering', 0.03247957648886493), ('formal', 0.03247957648886493)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.1, 0.1, 0.1], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11480000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31548
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.31548, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51382
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights updated after Gradient :  [0.11480000000000001, 0.31548, 0.51382]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11480000000000001, 0.31548, 0.51382], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11480000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31548
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.31548, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51382
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights updated after Gradient :  [0.11480000000000001, 0.31548, 0.51382]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11480000000000001, 0.31548, 0.51382], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11480000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31548
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.31548, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51382
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights updated after Gradient :  [0.11480000000000001, 0.31548, 0.51382]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11480000000000001, 0.31548, 0.51382], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( April , April ): 1.012
Key weight for textgraph edge ( April , April ): 4.024
Value weight for textgraph edge ( April , April ): 7.036
Query weight for textgraph edge ( April , March ): 2.0132
Key weight for textgraph edge ( April , March ): 5.0504
Value weight for textgraph edge ( April , March ): 8.0876
Query weight for textgraph edge ( April , preceding ): 3.0338
Key weight for textgraph edge ( April , preceding ): 6.2636
Value weight for textgraph edge ( April , preceding ): 9.4934
Query weight for textgraph edge ( March , April ): 0.11480000000000001
Key weight for textgraph edge ( March , April ): 0.11480000000000001
Value weight for textgraph edge ( March , April ): 0.11480000000000001
Query weight for textgraph edge ( March , March ): 0.31548
Key weight for textgraph edge ( March , March ): 0.31548
Value weight for textgraph edge ( March , March ): 0.31548
Query weight for textgraph edge ( March , preceding ): 0.51382
Key weight for textgraph edge ( March , preceding ): 0.51382
Value weight for textgraph edge ( March , preceding ): 0.51382
Query weight for textgraph edge ( preceding , April ): 3.02
Key weight for textgraph edge ( preceding , April ): 3.02
Value weight for textgraph edge ( preceding , April ): 3.02
Query weight for textgraph edge ( preceding , March ): 4.038
Key weight for textgraph edge ( preceding , March ): 4.038
Value weight for textgraph edge ( preceding , March ): 4.038
Query weight for textgraph edge ( preceding , preceding ): 5.187
Key weight for textgraph edge ( preceding , preceding ): 5.187
Value weight for textgraph edge ( preceding , preceding ): 5.187
wikipedia search result: Kashmir conflict
wikipedia search result summary: The Kashmir conflict is a territorial conflict over the Kashmir region, primarily between India and Pakistan, with China playing a third-party role. The conflict started after the partition of India in 1947 as both India and Pakistan claimed the entirety of the former princely state of Jammu and Kashmir. It is a dispute over the region that escalated into three wars between India and Pakistan and several other armed skirmishes. India controls approximately 55% of the land area of the region that includes Jammu, the Kashmir Valley, most of Ladakh, the Siachen Glacier, and 70% of its population; Pakistan controls approximately 30% of the land area that includes Azad Kashmir and Gilgit-Baltistan; and China controls the remaining 15% of the land area that includes the Aksai Chin region, the mostly uninhabited Trans-Karakoram Tract, and part of the Demchok sector.After the partition of India and a rebellion in the western districts of the state, Pakistani tribal militias invaded Kashmir, leading the Hindu ruler of Jammu and Kashmir to join India. The resulting Indo-Pakistani War ended with an UN-mediated ceasefire along a line that was eventually named the Line of Control. After further fighting in the wars of 1965 and 1971, the Simla Agreement formally established the Line of Control between the two nations' controlled territories. In 1999, an armed conflict between India and Pakistan broke out again in Kargil with no effect on the status quo.Since 1989, Kashmiri protest movements were created to voice Kashmir's disputes and grievances with the Indian government in the Indian-controlled Kashmir Valley, with some Kashmiri separatists in armed conflict with the Indian government based on the demand for self-determination. Targeted violence by the insurgents also resulted in the large-scale migration of Kashmiri Hindus out of the Kashmir Valley in the early 1990s. The 2010s were marked by further unrest erupting within the Kashmir Valley. The 2010 Kashmir unrest began after an alleged fake encounter between local youth and security forces. Thousands of youths pelted security forces with rocks, burned government offices, and attacked railway stations and official vehicles in steadily intensifying violence. The Indian government blamed separatists and Lashkar-e-Taiba, a Pakistan-based militant group, for stoking the 2010 protests. The 2016 Kashmir unrest erupted after the killing of a Hizbul Mujahideen militant, Burhan Wani, by Indian security forces. Further unrest in the region erupted after the 2019 Pulwama attack.According to scholars, Indian forces have committed many human rights abuses and acts of terror against the Kashmiri civilian population, including extrajudicial killing, rape, torture, and enforced disappearances. According to Amnesty International, no member of the Indian military deployed in Jammu and Kashmir has been tried for human rights violations in a civilian court as of June 2015, although military courts-martial have been held. Amnesty International has also accused the Indian government of refusing to prosecute perpetrators of abuses in the region. Moreover, there have been instances of human rights abuses in Azad Kashmir, including but not limited to political repressions and forced disappearances. Brad Adams, the Asia director at Human Rights Watch said in 2006 "Although 'Azad' means 'free', the residents of Azad Kashmir are anything but free. The Pakistani authorities govern Azad Kashmir with strict controls on basic freedoms". The OHCHR reports on Kashmir released two reports on "the situation of human rights in Indian-Administered Kashmir and Pakistan-Administered Kashmir".


2
defaultdict(<class 'list'>, {'disputed': ['Kashmir'], 'India': ['Kashmir'], 'Asia': ['Kashmir'], 'area': ['Kashmir'], 'conflict': ['conflict'], 'sovereignty': ['Kashmir'], 'whose': ['Kashmir'], 'Pakistan': ['Kashmir'], 'southwestern': ['Kashmir']})
('definitiongraph networkx edges:', OutEdgeView([('disputed', 'Kashmir'), ('Kashmir', 'disputed'), ('Kashmir', 'India'), ('Kashmir', 'Asia'), ('Kashmir', 'area'), ('Kashmir', 'sovereignty'), ('Kashmir', 'whose'), ('Kashmir', 'Pakistan'), ('Kashmir', 'southwestern'), ('India', 'Kashmir'), ('Asia', 'Kashmir'), ('area', 'Kashmir'), ('conflict', 'conflict'), ('sovereignty', 'Kashmir'), ('whose', 'Kashmir'), ('Pakistan', 'Kashmir'), ('southwestern', 'Kashmir')]))
('Core number (sorted) :', [('disputed', 2), ('Kashmir', 2), ('India', 2), ('Asia', 2), ('area', 2), ('sovereignty', 2), ('whose', 2), ('Pakistan', 2), ('southwestern', 2), ('conflict', 0)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'disputed', ',core number=', 2)
('This document belongs to class:', 'Kashmir', ',core number=', 2)
('This document belongs to class:', 'India', ',core number=', 2)
('This document belongs to class:', 'Asia', ',core number=', 2)
('This document belongs to class:', 'area', ',core number=', 2)
('This document belongs to class:', 'sovereignty', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Kashmir', 0.7777777777777777), ('disputed', 0.0), ('India', 0.0), ('Asia', 0.0), ('area', 0.0), ('conflict', 0.0), ('sovereignty', 0.0), ('whose', 0.0), ('Pakistan', 0.0), ('southwestern', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Kashmir', 0.8888888888888888), ('disputed', 0.47407407407407404), ('India', 0.47407407407407404), ('Asia', 0.47407407407407404), ('area', 0.47407407407407404), ('sovereignty', 0.47407407407407404), ('whose', 0.47407407407407404), ('Pakistan', 0.47407407407407404), ('southwestern', 0.47407407407407404), ('conflict', 0.0)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Kashmir', 1.7777777777777777), ('disputed', 0.2222222222222222), ('India', 0.2222222222222222), ('Asia', 0.2222222222222222), ('area', 0.2222222222222222), ('sovereignty', 0.2222222222222222), ('whose', 0.2222222222222222), ('Pakistan', 0.2222222222222222), ('southwestern', 0.2222222222222222), ('conflict', 0.0)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('Kashmir', 0.4607907159306157), ('disputed', 0.06535198018080421), ('India', 0.06535198018080421), ('Asia', 0.06535198018080421), ('area', 0.06535198018080421), ('sovereignty', 0.06535198018080421), ('whose', 0.06535198018080421), ('Pakistan', 0.06535198018080421), ('southwestern', 0.06535198018080421), ('conflict', 0.016393442622950824)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('disputed', 'Kashmir'), ('Kashmir', 'disputed'), ('Kashmir', 'India'), ('Kashmir', 'Asia'), ('Kashmir', 'area'), ('Kashmir', 'sovereignty'), ('Kashmir', 'whose'), ('Kashmir', 'Pakistan'), ('Kashmir', 'southwestern'), ('India', 'Kashmir'), ('Asia', 'Kashmir'), ('area', 'Kashmir'), ('conflict', 'conflict'), ('sovereignty', 'Kashmir'), ('whose', 'Kashmir'), ('Pakistan', 'Kashmir'), ('southwestern', 'Kashmir')]
Answer Textgraph  6 : ([('disputed', 2), ('Kashmir', 2), ('India', 2), ('Asia', 2), ('area', 2), ('sovereignty', 2), ('whose', 2), ('Pakistan', 2), ('southwestern', 2), ('conflict', 0)], [('Kashmir', 0.4607907159306157), ('disputed', 0.06535198018080421), ('India', 0.06535198018080421), ('Asia', 0.06535198018080421), ('area', 0.06535198018080421), ('sovereignty', 0.06535198018080421), ('whose', 0.06535198018080421), ('Pakistan', 0.06535198018080421), ('southwestern', 0.06535198018080421), ('conflict', 0.016393442622950824)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11555000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.317055
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.317055, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5195575
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights updated after Gradient :  [0.11555000000000001, 0.317055, 0.5195575]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11555000000000001, 0.317055, 0.5195575], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11555000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.317055
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.317055, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5195575
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights updated after Gradient :  [0.11555000000000001, 0.317055, 0.5195575]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11555000000000001, 0.317055, 0.5195575], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11555000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.317055
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights: [0.11555000000000001, 0.317055, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.0625, 0.0625, 0.0625]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5195575
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15550000000000003, 0.17055000000000003, 0.19557500000000005]
weights updated after Gradient :  [0.11555000000000001, 0.317055, 0.5195575]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11555000000000001, 0.317055, 0.5195575], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( disputed , disputed ): 1.012
Key weight for textgraph edge ( disputed , disputed ): 4.024
Value weight for textgraph edge ( disputed , disputed ): 7.036
Query weight for textgraph edge ( disputed , Kashmir ): 2.0132
Key weight for textgraph edge ( disputed , Kashmir ): 5.0504
Value weight for textgraph edge ( disputed , Kashmir ): 8.0876
Query weight for textgraph edge ( disputed , India ): 3.0338
Key weight for textgraph edge ( disputed , India ): 6.2636
Value weight for textgraph edge ( disputed , India ): 9.4934
Query weight for textgraph edge ( Kashmir , disputed ): 0.11555000000000001
Key weight for textgraph edge ( Kashmir , disputed ): 0.11555000000000001
Value weight for textgraph edge ( Kashmir , disputed ): 0.11555000000000001
Query weight for textgraph edge ( Kashmir , Kashmir ): 0.317055
Key weight for textgraph edge ( Kashmir , Kashmir ): 0.317055
Value weight for textgraph edge ( Kashmir , Kashmir ): 0.317055
Query weight for textgraph edge ( Kashmir , India ): 0.5195575
Key weight for textgraph edge ( Kashmir , India ): 0.5195575
Value weight for textgraph edge ( Kashmir , India ): 0.5195575
Query weight for textgraph edge ( India , disputed ): 3.02
Key weight for textgraph edge ( India , disputed ): 3.02
Value weight for textgraph edge ( India , disputed ): 3.02
Query weight for textgraph edge ( India , Kashmir ): 4.038
Key weight for textgraph edge ( India , Kashmir ): 4.038
Value weight for textgraph edge ( India , Kashmir ): 4.038
Query weight for textgraph edge ( India , India ): 5.187
Key weight for textgraph edge ( India , India ): 5.187
Value weight for textgraph edge ( India , India ): 5.187
wikipedia search result: Yug (TV series)
wikipedia search result summary: Yug is an Indian Hindi language television series that was telecast on DD National from September 1996 to November 1997.Yug was a fictional series depicting the story of Indian freedom fighters and their struggle to win freedom for India. The series was produced and directed by Sunil Agnihotri and had notable actors like Hema Malini, Ashwini Bhave, Pankaj Dheer, Shahbaz Khan, Mukesh Khanna, Vinod Kapoor, Javed Khan, Sudesh Berry and Abhimanyu Singh.
2
defaultdict(<class 'list'>, {'similar': ['series'], 'things': ['series'], 'Kovacs': ['television'], 'stationary': ['television'], 'visual': ['television'], 'placed': ['series'], 'another': ['series'], 'images': ['television'], 'one': ['series'], 'moving': ['television'], 'Ernie': ['television'], 'happening': ['series'], 'broadcasting': ['television'], 'order': ['series'], 'objects': ['television']})
('definitiongraph networkx edges:', OutEdgeView([('similar', 'series'), ('series', 'similar'), ('series', 'things'), ('series', 'placed'), ('series', 'another'), ('series', 'one'), ('series', 'happening'), ('series', 'order'), ('things', 'series'), ('Kovacs', 'television'), ('television', 'Kovacs'), ('television', 'stationary'), ('television', 'visual'), ('television', 'images'), ('television', 'moving'), ('television', 'Ernie'), ('television', 'broadcasting'), ('television', 'objects'), ('stationary', 'television'), ('visual', 'television'), ('placed', 'series'), ('another', 'series'), ('images', 'television'), ('one', 'series'), ('moving', 'television'), ('Ernie', 'television'), ('happening', 'series'), ('broadcasting', 'television'), ('order', 'series'), ('objects', 'television')]))
('Core number (sorted) :', [('similar', 2), ('series', 2), ('things', 2), ('Kovacs', 2), ('television', 2), ('stationary', 2), ('visual', 2), ('placed', 2), ('another', 2), ('images', 2), ('one', 2), ('moving', 2), ('Ernie', 2), ('happening', 2), ('broadcasting', 2), ('order', 2), ('objects', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'similar', ',core number=', 2)
('This document belongs to class:', 'series', ',core number=', 2)
('This document belongs to class:', 'things', ',core number=', 2)
('This document belongs to class:', 'Kovacs', ',core number=', 2)
('This document belongs to class:', 'television', ',core number=', 2)
('This document belongs to class:', 'stationary', ',core number=', 2)
('This document belongs to class:', 'visual', ',core number=', 2)
('This document belongs to class:', 'placed', ',core number=', 2)
('This document belongs to class:', 'another', ',core number=', 2)
('This document belongs to class:', 'images', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('television', 0.23333333333333334), ('series', 0.175), ('similar', 0.0), ('things', 0.0), ('Kovacs', 0.0), ('stationary', 0.0), ('visual', 0.0), ('placed', 0.0), ('another', 0.0), ('images', 0.0), ('one', 0.0), ('moving', 0.0), ('Ernie', 0.0), ('happening', 0.0), ('broadcasting', 0.0), ('order', 0.0), ('objects', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('television', 0.5), ('series', 0.4375), ('Kovacs', 0.26666666666666666), ('stationary', 0.26666666666666666), ('visual', 0.26666666666666666), ('images', 0.26666666666666666), ('moving', 0.26666666666666666), ('Ernie', 0.26666666666666666), ('broadcasting', 0.26666666666666666), ('objects', 0.26666666666666666), ('similar', 0.23557692307692307), ('things', 0.23557692307692307), ('placed', 0.23557692307692307), ('another', 0.23557692307692307), ('one', 0.23557692307692307), ('happening', 0.23557692307692307), ('order', 0.23557692307692307)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('television', 1.0), ('series', 0.875), ('similar', 0.125), ('things', 0.125), ('Kovacs', 0.125), ('stationary', 0.125), ('visual', 0.125), ('placed', 0.125), ('another', 0.125), ('images', 0.125), ('one', 0.125), ('moving', 0.125), ('Ernie', 0.125), ('happening', 0.125), ('broadcasting', 0.125), ('order', 0.125), ('objects', 0.125)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('television', 0.24801456208779385), ('series', 0.22098727170550392), ('similar', 0.035657280512659095), ('things', 0.035657280512659095), ('placed', 0.035657280512659095), ('another', 0.035657280512659095), ('one', 0.035657280512659095), ('happening', 0.035657280512659095), ('order', 0.035657280512659095), ('Kovacs', 0.03517465032726107), ('stationary', 0.03517465032726107), ('visual', 0.03517465032726107), ('images', 0.03517465032726107), ('moving', 0.03517465032726107), ('Ernie', 0.03517465032726107), ('broadcasting', 0.03517465032726107), ('objects', 0.03517465032726107)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('similar', 'series'), ('series', 'similar'), ('series', 'things'), ('series', 'placed'), ('series', 'another'), ('series', 'one'), ('series', 'happening'), ('series', 'order'), ('things', 'series'), ('Kovacs', 'television'), ('television', 'Kovacs'), ('television', 'stationary'), ('television', 'visual'), ('television', 'images'), ('television', 'moving'), ('television', 'Ernie'), ('television', 'broadcasting'), ('television', 'objects'), ('stationary', 'television'), ('visual', 'television'), ('placed', 'series'), ('another', 'series'), ('images', 'television'), ('one', 'series'), ('moving', 'television'), ('Ernie', 'television'), ('happening', 'series'), ('broadcasting', 'television'), ('order', 'series'), ('objects', 'television')]
Answer Textgraph  7 : ([('similar', 2), ('series', 2), ('things', 2), ('Kovacs', 2), ('television', 2), ('stationary', 2), ('visual', 2), ('placed', 2), ('another', 2), ('images', 2), ('one', 2), ('moving', 2), ('Ernie', 2), ('happening', 2), ('broadcasting', 2), ('order', 2), ('objects', 2)], [('television', 0.24801456208779385), ('series', 0.22098727170550392), ('similar', 0.035657280512659095), ('things', 0.035657280512659095), ('placed', 0.035657280512659095), ('another', 0.035657280512659095), ('one', 0.035657280512659095), ('happening', 0.035657280512659095), ('order', 0.035657280512659095), ('Kovacs', 0.03517465032726107), ('stationary', 0.03517465032726107), ('visual', 0.03517465032726107), ('images', 0.03517465032726107), ('moving', 0.03517465032726107), ('Ernie', 0.03517465032726107), ('broadcasting', 0.03517465032726107), ('objects', 0.03517465032726107)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11537142857142858
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights: [0.11537142857142858, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31668
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights: [0.11537142857142858, 0.31668, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5181914285714285
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights updated after Gradient :  [0.11537142857142858, 0.31668, 0.5181914285714285]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11537142857142858, 0.31668, 0.5181914285714285], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11537142857142858
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights: [0.11537142857142858, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31668
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights: [0.11537142857142858, 0.31668, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5181914285714285
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights updated after Gradient :  [0.11537142857142858, 0.31668, 0.5181914285714285]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11537142857142858, 0.31668, 0.5181914285714285], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11537142857142858
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights: [0.11537142857142858, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31668
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights: [0.11537142857142858, 0.31668, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.07142857142857142, 0.07142857142857142, 0.07142857142857142]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5181914285714285
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15371428571428575, 0.16680000000000003, 0.18191428571428575]
weights updated after Gradient :  [0.11537142857142858, 0.31668, 0.5181914285714285]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11537142857142858, 0.31668, 0.5181914285714285], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( similar , similar ): 1.012
Key weight for textgraph edge ( similar , similar ): 4.024
Value weight for textgraph edge ( similar , similar ): 7.036
Query weight for textgraph edge ( similar , series ): 2.0132
Key weight for textgraph edge ( similar , series ): 5.0504
Value weight for textgraph edge ( similar , series ): 8.0876
Query weight for textgraph edge ( similar , things ): 3.0338
Key weight for textgraph edge ( similar , things ): 6.2636
Value weight for textgraph edge ( similar , things ): 9.4934
Query weight for textgraph edge ( series , similar ): 0.11537142857142858
Key weight for textgraph edge ( series , similar ): 0.11537142857142858
Value weight for textgraph edge ( series , similar ): 0.11537142857142858
Query weight for textgraph edge ( series , series ): 0.31668
Key weight for textgraph edge ( series , series ): 0.31668
Value weight for textgraph edge ( series , series ): 0.31668
Query weight for textgraph edge ( series , things ): 0.5181914285714285
Key weight for textgraph edge ( series , things ): 0.5181914285714285
Value weight for textgraph edge ( series , things ): 0.5181914285714285
Query weight for textgraph edge ( things , similar ): 3.02
Key weight for textgraph edge ( things , similar ): 3.02
Value weight for textgraph edge ( things , similar ): 3.02
Query weight for textgraph edge ( things , series ): 4.038
Key weight for textgraph edge ( things , series ): 4.038
Value weight for textgraph edge ( things , series ): 4.038
Query weight for textgraph edge ( things , things ): 5.187
Key weight for textgraph edge ( things , things ): 5.187
Value weight for textgraph edge ( things , things ): 5.187
wikipedia search result: List of Pakistan Movement activists
wikipedia search result summary: The Founders and activists of the Pakistan Movement, also known as Founding Fathers of Pakistan (Urdu:بانيڹ پاكستان; Romanization lit.:bəŋɨaɪaɪ-e-Pəkɨstəŋ), were the political leaders and statespersons who participated in the success of the political movement, following the signing of the Pakistan Resolution, that led the establishment and creation of the independent Pakistan on August 1947. Within this large group, a further and extended subset signed the Objective Resolution that was annexed to the Constitution of Pakistan in 1950.The term was first used by the linguist and archeologist Dr. Ahmad Hasan Dani's book, the Founding Fathers of Pakistan (1998), which popularized the term in literary activities of the country. The Pakistan Movement was led by a large group of activists and statesmen who played crucial role in the politics of the British Indian Empire in 1930s and 1940s. More recently, the term was used by the government officially in explaining the foreign policy text. Authors and historians of Pakistan more broadly define the term "Founding Fathers" to mean a larger group which also includes all those who, whether as politicians, jurists, statesperson, soldiers, diplomats, academicians, or ordinary citizens, took part in winning the independence of four provinces in the north-west region of British India from the control of the United Kingdom and also from the influence of the Indian Congress; this creating Pakistan.The following is a list of people who played a prominent role in making of Pakistan as independence activists, leaders, freedom fighters and revolutionaries.
2
defaultdict(<class 'list'>, {'India': ['Pakistan'], 'Asian': ['Pakistan'], 'United': ['Pakistan'], 'containing': ['list'], 'change': ['motion'], 'ancient': ['Pakistan'], 'achieved': ['Pakistan'], 'database': ['list'], 'names': ['list'], 'array': ['list'], 'formerly': ['Pakistan'], 'republic': ['Pakistan'], 'Muslim': ['Pakistan'], 'civilization': ['Pakistan'], 'reformer': ['militant'], 'items': ['list'], 'valley': ['Pakistan'], 'heartland': ['Pakistan'], 'independence': ['Pakistan'], 'ordered': ['list'], 'Indus': ['Pakistan'], 'location': ['motion'], 'River': ['Pakistan'], 'militant': ['militant'], 'occupies': ['Pakistan'], 'south': ['Pakistan'], 'part': ['Pakistan'], 'Kingdom': ['Pakistan'], 'position': ['motion'], '1947': ['Pakistan'], 'topics': ['list'], 'entail': ['motion']})
('definitiongraph networkx edges:', OutEdgeView([('India', 'Pakistan'), ('Pakistan', 'India'), ('Pakistan', 'Asian'), ('Pakistan', 'United'), ('Pakistan', 'ancient'), ('Pakistan', 'achieved'), ('Pakistan', 'formerly'), ('Pakistan', 'republic'), ('Pakistan', 'Muslim'), ('Pakistan', 'civilization'), ('Pakistan', 'valley'), ('Pakistan', 'heartland'), ('Pakistan', 'independence'), ('Pakistan', 'Indus'), ('Pakistan', 'River'), ('Pakistan', 'occupies'), ('Pakistan', 'south'), ('Pakistan', 'part'), ('Pakistan', 'Kingdom'), ('Pakistan', '1947'), ('Asian', 'Pakistan'), ('United', 'Pakistan'), ('containing', 'list'), ('list', 'containing'), ('list', 'database'), ('list', 'names'), ('list', 'array'), ('list', 'items'), ('list', 'ordered'), ('list', 'topics'), ('change', 'motion'), ('motion', 'change'), ('motion', 'location'), ('motion', 'position'), ('motion', 'entail'), ('ancient', 'Pakistan'), ('achieved', 'Pakistan'), ('database', 'list'), ('names', 'list'), ('array', 'list'), ('formerly', 'Pakistan'), ('republic', 'Pakistan'), ('Muslim', 'Pakistan'), ('civilization', 'Pakistan'), ('reformer', 'militant'), ('militant', 'reformer'), ('militant', 'militant'), ('items', 'list'), ('valley', 'Pakistan'), ('heartland', 'Pakistan'), ('independence', 'Pakistan'), ('ordered', 'list'), ('Indus', 'Pakistan'), ('location', 'motion'), ('River', 'Pakistan'), ('occupies', 'Pakistan'), ('south', 'Pakistan'), ('part', 'Pakistan'), ('Kingdom', 'Pakistan'), ('position', 'motion'), ('1947', 'Pakistan'), ('topics', 'list'), ('entail', 'motion')]))
('Core number (sorted) :', [('India', 2), ('Pakistan', 2), ('Asian', 2), ('United', 2), ('containing', 2), ('list', 2), ('change', 2), ('motion', 2), ('ancient', 2), ('achieved', 2), ('database', 2), ('names', 2), ('array', 2), ('formerly', 2), ('republic', 2), ('Muslim', 2), ('civilization', 2), ('reformer', 2), ('militant', 2), ('items', 2), ('valley', 2), ('heartland', 2), ('independence', 2), ('ordered', 2), ('Indus', 2), ('location', 2), ('River', 2), ('occupies', 2), ('south', 2), ('part', 2), ('Kingdom', 2), ('position', 2), ('1947', 2), ('topics', 2), ('entail', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'India', ',core number=', 2)
('This document belongs to class:', 'Pakistan', ',core number=', 2)
('This document belongs to class:', 'Asian', ',core number=', 2)
('This document belongs to class:', 'United', ',core number=', 2)
('This document belongs to class:', 'containing', ',core number=', 2)
('This document belongs to class:', 'list', ',core number=', 2)
('This document belongs to class:', 'change', ',core number=', 2)
('This document belongs to class:', 'motion', ',core number=', 2)
('This document belongs to class:', 'ancient', ',core number=', 2)
('This document belongs to class:', 'achieved', ',core number=', 2)
('This document belongs to class:', 'database', ',core number=', 2)
('This document belongs to class:', 'names', ',core number=', 2)
('This document belongs to class:', 'array', ',core number=', 2)
('This document belongs to class:', 'formerly', ',core number=', 2)
('This document belongs to class:', 'republic', ',core number=', 2)
('This document belongs to class:', 'Muslim', ',core number=', 2)
('This document belongs to class:', 'civilization', ',core number=', 2)
('This document belongs to class:', 'reformer', ',core number=', 2)
('This document belongs to class:', 'militant', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Pakistan', 0.3048128342245989), ('list', 0.0374331550802139), ('motion', 0.0106951871657754), ('India', 0.0), ('Asian', 0.0), ('United', 0.0), ('containing', 0.0), ('change', 0.0), ('ancient', 0.0), ('achieved', 0.0), ('database', 0.0), ('names', 0.0), ('array', 0.0), ('formerly', 0.0), ('republic', 0.0), ('Muslim', 0.0), ('civilization', 0.0), ('reformer', 0.0), ('militant', 0.0), ('items', 0.0), ('valley', 0.0), ('heartland', 0.0), ('independence', 0.0), ('ordered', 0.0), ('Indus', 0.0), ('location', 0.0), ('River', 0.0), ('occupies', 0.0), ('south', 0.0), ('part', 0.0), ('Kingdom', 0.0), ('position', 0.0), ('1947', 0.0), ('topics', 0.0), ('entail', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Pakistan', 0.5588235294117647), ('India', 0.28696343402225755), ('Asian', 0.28696343402225755), ('United', 0.28696343402225755), ('ancient', 0.28696343402225755), ('achieved', 0.28696343402225755), ('formerly', 0.28696343402225755), ('republic', 0.28696343402225755), ('Muslim', 0.28696343402225755), ('civilization', 0.28696343402225755), ('valley', 0.28696343402225755), ('heartland', 0.28696343402225755), ('independence', 0.28696343402225755), ('Indus', 0.28696343402225755), ('River', 0.28696343402225755), ('occupies', 0.28696343402225755), ('south', 0.28696343402225755), ('part', 0.28696343402225755), ('Kingdom', 0.28696343402225755), ('1947', 0.28696343402225755), ('list', 0.20588235294117646), ('motion', 0.11764705882352941), ('containing', 0.11085972850678733), ('database', 0.11085972850678733), ('names', 0.11085972850678733), ('array', 0.11085972850678733), ('items', 0.11085972850678733), ('ordered', 0.11085972850678733), ('topics', 0.11085972850678733), ('change', 0.06722689075630252), ('location', 0.06722689075630252), ('position', 0.06722689075630252), ('entail', 0.06722689075630252), ('reformer', 0.029411764705882353), ('militant', 0.029411764705882353)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Pakistan', 1.1176470588235294), ('list', 0.4117647058823529), ('motion', 0.23529411764705882), ('India', 0.058823529411764705), ('Asian', 0.058823529411764705), ('United', 0.058823529411764705), ('containing', 0.058823529411764705), ('change', 0.058823529411764705), ('ancient', 0.058823529411764705), ('achieved', 0.058823529411764705), ('database', 0.058823529411764705), ('names', 0.058823529411764705), ('array', 0.058823529411764705), ('formerly', 0.058823529411764705), ('republic', 0.058823529411764705), ('Muslim', 0.058823529411764705), ('civilization', 0.058823529411764705), ('reformer', 0.058823529411764705), ('militant', 0.058823529411764705), ('items', 0.058823529411764705), ('valley', 0.058823529411764705), ('heartland', 0.058823529411764705), ('independence', 0.058823529411764705), ('ordered', 0.058823529411764705), ('Indus', 0.058823529411764705), ('location', 0.058823529411764705), ('River', 0.058823529411764705), ('occupies', 0.058823529411764705), ('south', 0.058823529411764705), ('part', 0.058823529411764705), ('Kingdom', 0.058823529411764705), ('position', 0.058823529411764705), ('1947', 0.058823529411764705), ('topics', 0.058823529411764705), ('entail', 0.058823529411764705)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('Pakistan', 0.264859675660733), ('list', 0.10733417760119672), ('motion', 0.06795280308631269), ('reformer', 0.02857142857142857), ('militant', 0.02857142857142857), ('change', 0.018726084942707544), ('location', 0.018726084942707544), ('position', 0.018726084942707544), ('entail', 0.018726084942707544), ('containing', 0.017319607281461685), ('database', 0.017319607281461685), ('names', 0.017319607281461685), ('array', 0.017319607281461685), ('items', 0.017319607281461685), ('ordered', 0.017319607281461685), ('topics', 0.017319607281461685), ('India', 0.016135205040412527), ('Asian', 0.016135205040412527), ('United', 0.016135205040412527), ('ancient', 0.016135205040412527), ('achieved', 0.016135205040412527), ('formerly', 0.016135205040412527), ('republic', 0.016135205040412527), ('Muslim', 0.016135205040412527), ('civilization', 0.016135205040412527), ('valley', 0.016135205040412527), ('heartland', 0.016135205040412527), ('independence', 0.016135205040412527), ('Indus', 0.016135205040412527), ('River', 0.016135205040412527), ('occupies', 0.016135205040412527), ('south', 0.016135205040412527), ('part', 0.016135205040412527), ('Kingdom', 0.016135205040412527), ('1947', 0.016135205040412527)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('India', 'Pakistan'), ('Pakistan', 'India'), ('Pakistan', 'Asian'), ('Pakistan', 'United'), ('Pakistan', 'ancient'), ('Pakistan', 'achieved'), ('Pakistan', 'formerly'), ('Pakistan', 'republic'), ('Pakistan', 'Muslim'), ('Pakistan', 'civilization'), ('Pakistan', 'valley'), ('Pakistan', 'heartland'), ('Pakistan', 'independence'), ('Pakistan', 'Indus'), ('Pakistan', 'River'), ('Pakistan', 'occupies'), ('Pakistan', 'south'), ('Pakistan', 'part'), ('Pakistan', 'Kingdom'), ('Pakistan', '1947'), ('Asian', 'Pakistan'), ('United', 'Pakistan'), ('containing', 'list'), ('list', 'containing'), ('list', 'database'), ('list', 'names'), ('list', 'array'), ('list', 'items'), ('list', 'ordered'), ('list', 'topics'), ('change', 'motion'), ('motion', 'change'), ('motion', 'location'), ('motion', 'position'), ('motion', 'entail'), ('ancient', 'Pakistan'), ('achieved', 'Pakistan'), ('database', 'list'), ('names', 'list'), ('array', 'list'), ('formerly', 'Pakistan'), ('republic', 'Pakistan'), ('Muslim', 'Pakistan'), ('civilization', 'Pakistan'), ('reformer', 'militant'), ('militant', 'reformer'), ('militant', 'militant'), ('items', 'list'), ('valley', 'Pakistan'), ('heartland', 'Pakistan'), ('independence', 'Pakistan'), ('ordered', 'list'), ('Indus', 'Pakistan'), ('location', 'motion'), ('River', 'Pakistan'), ('occupies', 'Pakistan'), ('south', 'Pakistan'), ('part', 'Pakistan'), ('Kingdom', 'Pakistan'), ('position', 'motion'), ('1947', 'Pakistan'), ('topics', 'list'), ('entail', 'motion')]
Answer Textgraph  8 : ([('India', 2), ('Pakistan', 2), ('Asian', 2), ('United', 2), ('containing', 2), ('list', 2), ('change', 2), ('motion', 2), ('ancient', 2), ('achieved', 2), ('database', 2), ('names', 2), ('array', 2), ('formerly', 2), ('republic', 2), ('Muslim', 2), ('civilization', 2), ('reformer', 2), ('militant', 2), ('items', 2), ('valley', 2), ('heartland', 2), ('independence', 2), ('ordered', 2), ('Indus', 2), ('location', 2), ('River', 2), ('occupies', 2), ('south', 2), ('part', 2), ('Kingdom', 2), ('position', 2), ('1947', 2), ('topics', 2), ('entail', 2)], [('Pakistan', 0.264859675660733), ('list', 0.10733417760119672), ('motion', 0.06795280308631269), ('reformer', 0.02857142857142857), ('militant', 0.02857142857142857), ('change', 0.018726084942707544), ('location', 0.018726084942707544), ('position', 0.018726084942707544), ('entail', 0.018726084942707544), ('containing', 0.017319607281461685), ('database', 0.017319607281461685), ('names', 0.017319607281461685), ('array', 0.017319607281461685), ('items', 0.017319607281461685), ('ordered', 0.017319607281461685), ('topics', 0.017319607281461685), ('India', 0.016135205040412527), ('Asian', 0.016135205040412527), ('United', 0.016135205040412527), ('ancient', 0.016135205040412527), ('achieved', 0.016135205040412527), ('formerly', 0.016135205040412527), ('republic', 0.016135205040412527), ('Muslim', 0.016135205040412527), ('civilization', 0.016135205040412527), ('valley', 0.016135205040412527), ('heartland', 0.016135205040412527), ('independence', 0.016135205040412527), ('Indus', 0.016135205040412527), ('River', 0.016135205040412527), ('occupies', 0.016135205040412527), ('south', 0.016135205040412527), ('part', 0.016135205040412527), ('Kingdom', 0.016135205040412527), ('1947', 0.016135205040412527)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.02631578947368421, 0.02631578947368421, 0.02631578947368421], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11627368421052632
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights: [0.11627368421052632, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31857473684210524
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights: [0.11627368421052632, 0.31857473684210524, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5250936842105263
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights updated after Gradient :  [0.11627368421052632, 0.31857473684210524, 0.5250936842105263]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11627368421052632, 0.31857473684210524, 0.5250936842105263], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11627368421052632
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights: [0.11627368421052632, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31857473684210524
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights: [0.11627368421052632, 0.31857473684210524, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5250936842105263
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights updated after Gradient :  [0.11627368421052632, 0.31857473684210524, 0.5250936842105263]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11627368421052632, 0.31857473684210524, 0.5250936842105263], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11627368421052632
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights: [0.11627368421052632, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31857473684210524
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights: [0.11627368421052632, 0.31857473684210524, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5250936842105263
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights updated after Gradient :  [0.11627368421052632, 0.31857473684210524, 0.5250936842105263]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11627368421052632, 0.31857473684210524, 0.5250936842105263], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( India , India ): 1.012
Key weight for textgraph edge ( India , India ): 4.024
Value weight for textgraph edge ( India , India ): 7.036
Query weight for textgraph edge ( India , Pakistan ): 2.0132
Key weight for textgraph edge ( India , Pakistan ): 5.0504
Value weight for textgraph edge ( India , Pakistan ): 8.0876
Query weight for textgraph edge ( India , Asian ): 3.0338
Key weight for textgraph edge ( India , Asian ): 6.2636
Value weight for textgraph edge ( India , Asian ): 9.4934
Query weight for textgraph edge ( Pakistan , India ): 0.11627368421052632
Key weight for textgraph edge ( Pakistan , India ): 0.11627368421052632
Value weight for textgraph edge ( Pakistan , India ): 0.11627368421052632
Query weight for textgraph edge ( Pakistan , Pakistan ): 0.31857473684210524
Key weight for textgraph edge ( Pakistan , Pakistan ): 0.31857473684210524
Value weight for textgraph edge ( Pakistan , Pakistan ): 0.31857473684210524
Query weight for textgraph edge ( Pakistan , Asian ): 0.5250936842105263
Key weight for textgraph edge ( Pakistan , Asian ): 0.5250936842105263
Value weight for textgraph edge ( Pakistan , Asian ): 0.5250936842105263
Query weight for textgraph edge ( Asian , India ): 3.02
Key weight for textgraph edge ( Asian , India ): 3.02
Value weight for textgraph edge ( Asian , India ): 3.02
Query weight for textgraph edge ( Asian , Pakistan ): 4.038
Key weight for textgraph edge ( Asian , Pakistan ): 4.038
Value weight for textgraph edge ( Asian , Pakistan ): 4.038
Query weight for textgraph edge ( Asian , Asian ): 5.187
Key weight for textgraph edge ( Asian , Asian ): 5.187
Value weight for textgraph edge ( Asian , Asian ): 5.187
wikipedia search result: Kayyur incident
wikipedia search result summary: Kayyur incident also known as Kayyur uprising or Kayyur Revolt is a series of incidents that occurred in Kayyur village of present-day Kasaragod district during British rule in India. The peaceful farmers protest on 1941 March 28 turned violent and the mob accidentally killed a policeman. 61 were trialed for this violent deed and 4 persons were sentenced to death.
2
defaultdict(<class 'list'>, {'event': ['incident'], 'single': ['incident'], 'distinct': ['incident']})
('definitiongraph networkx edges:', OutEdgeView([('event', 'incident'), ('incident', 'event'), ('incident', 'single'), ('incident', 'distinct'), ('single', 'incident'), ('distinct', 'incident')]))
('Core number (sorted) :', [('event', 2), ('incident', 2), ('single', 2), ('distinct', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'event', ',core number=', 2)
('This document belongs to class:', 'incident', ',core number=', 2)
('This document belongs to class:', 'single', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('incident', 1.0), ('event', 0.0), ('single', 0.0), ('distinct', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('incident', 1.0), ('event', 0.6), ('single', 0.6), ('distinct', 0.6)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('incident', 2.0), ('event', 0.6666666666666666), ('single', 0.6666666666666666), ('distinct', 0.6666666666666666)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('incident', 0.4797305739863632), ('event', 0.1734231420045456), ('single', 0.1734231420045456), ('distinct', 0.1734231420045456)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('event', 'incident'), ('incident', 'event'), ('incident', 'single'), ('incident', 'distinct'), ('single', 'incident'), ('distinct', 'incident')]
Answer Textgraph  9 : ([('event', 2), ('incident', 2), ('single', 2), ('distinct', 2)], [('incident', 0.4797305739863632), ('event', 0.1734231420045456), ('single', 0.1734231420045456), ('distinct', 0.1734231420045456)])
Attention from Definition Graph: [[0.5, 0.5, 0.5], [0.16666666666666666, 0.16666666666666666, 0.16666666666666666], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.16666666666666666, 0.16666666666666666, 0.16666666666666666], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11346666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31268
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.31268, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.50362
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights updated after Gradient :  [0.11346666666666667, 0.31268, 0.50362]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11346666666666667, 0.31268, 0.50362], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11346666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31268
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.31268, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.50362
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights updated after Gradient :  [0.11346666666666667, 0.31268, 0.50362]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11346666666666667, 0.31268, 0.50362], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11346666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31268
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.31268, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.50362
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights updated after Gradient :  [0.11346666666666667, 0.31268, 0.50362]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11346666666666667, 0.31268, 0.50362], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( event , event ): 1.012
Key weight for textgraph edge ( event , event ): 4.024
Value weight for textgraph edge ( event , event ): 7.036
Query weight for textgraph edge ( event , incident ): 2.0132
Key weight for textgraph edge ( event , incident ): 5.0504
Value weight for textgraph edge ( event , incident ): 8.0876
Query weight for textgraph edge ( event , single ): 3.0338
Key weight for textgraph edge ( event , single ): 6.2636
Value weight for textgraph edge ( event , single ): 9.4934
Query weight for textgraph edge ( incident , event ): 0.11346666666666667
Key weight for textgraph edge ( incident , event ): 0.11346666666666667
Value weight for textgraph edge ( incident , event ): 0.11346666666666667
Query weight for textgraph edge ( incident , incident ): 0.31268
Key weight for textgraph edge ( incident , incident ): 0.31268
Value weight for textgraph edge ( incident , incident ): 0.31268
Query weight for textgraph edge ( incident , single ): 0.50362
Key weight for textgraph edge ( incident , single ): 0.50362
Value weight for textgraph edge ( incident , single ): 0.50362
Query weight for textgraph edge ( single , event ): 3.02
Key weight for textgraph edge ( single , event ): 3.02
Value weight for textgraph edge ( single , event ): 3.02
Query weight for textgraph edge ( single , incident ): 4.038
Key weight for textgraph edge ( single , incident ): 4.038
Value weight for textgraph edge ( single , incident ): 4.038
Query weight for textgraph edge ( single , single ): 5.187
Key weight for textgraph edge ( single , single ): 5.187
Value weight for textgraph edge ( single , single ): 5.187
wikipedia search result: Pakistan Movement
wikipedia search result summary: The Pakistan Movement (Urdu: تحریکِ پاکستان, romanized: Teḥreek-e-Pākistān) was a political movement in the first half of the 20th century that aimed for the creation of Pakistan from the Muslim-majority areas of British India. It was connected to the perceived need for self-determination for Muslims under British rule at the time. Muhammad Ali Jinnah lead this movement after the Lahore Resolution was passed by All-India Muslim League, on March 23rd, 1940.
Pakistan Movement started originally as the Aligarh Movement, and as a result, the British Indian Muslims began to develop a secular political identity. Soon thereafter, the All India Muslim League was formed, which perhaps marked the beginning of the Pakistan Movement. Many of the top leadership of the movement were educated in Great Britain, with many of them educated at the Aligarh Muslim University. Many graduates of the Dhaka University soon also joined.
The Pakistan Movement was a part of the Indian independence movement, but eventually it also sought to establish a new nation-state that protected the political interests of the Indian Muslims. Urdu poets such as Iqbal and Faiz used literature, poetry and speech as a powerful tool for political awareness. Ashraf Ali Thanwi's disciples Shabbir Ahmad Usmani and Zafar Ahmad Usmani were key players in religious support for the creation of Pakistan.Many people may think that the driving force behind the Pakistan Movement was the Muslim community of the Muslim minority provinces, United Provinces and Bombay Presidency, rather than that of the Muslim majority provinces. Land boundaries and population demographics of West Pakistan (present-day Pakistan), East Pakistan (present-day Bangladesh) and India are among the primary achievements of the Pakistan Movement. Not all Muslims of colonial India supported the Pakistan Movement and there was widespread opposition to the partition of India.
2
defaultdict(<class 'list'>, {'independence': ['Pakistan'], 'India': ['Pakistan'], 'Indus': ['Pakistan'], 'Asian': ['Pakistan'], 'United': ['Pakistan'], 'location': ['motion'], 'change': ['motion'], 'River': ['Pakistan'], 'occupies': ['Pakistan'], 'south': ['Pakistan'], 'part': ['Pakistan'], 'ancient': ['Pakistan'], 'Kingdom': ['Pakistan'], 'achieved': ['Pakistan'], 'position': ['motion'], '1947': ['Pakistan'], 'formerly': ['Pakistan'], 'republic': ['Pakistan'], 'Muslim': ['Pakistan'], 'civilization': ['Pakistan'], 'entail': ['motion'], 'valley': ['Pakistan'], 'heartland': ['Pakistan']})
('definitiongraph networkx edges:', OutEdgeView([('independence', 'Pakistan'), ('Pakistan', 'independence'), ('Pakistan', 'India'), ('Pakistan', 'Indus'), ('Pakistan', 'Asian'), ('Pakistan', 'United'), ('Pakistan', 'River'), ('Pakistan', 'occupies'), ('Pakistan', 'south'), ('Pakistan', 'part'), ('Pakistan', 'ancient'), ('Pakistan', 'Kingdom'), ('Pakistan', 'achieved'), ('Pakistan', '1947'), ('Pakistan', 'formerly'), ('Pakistan', 'republic'), ('Pakistan', 'Muslim'), ('Pakistan', 'civilization'), ('Pakistan', 'valley'), ('Pakistan', 'heartland'), ('India', 'Pakistan'), ('Indus', 'Pakistan'), ('Asian', 'Pakistan'), ('United', 'Pakistan'), ('location', 'motion'), ('motion', 'location'), ('motion', 'change'), ('motion', 'position'), ('motion', 'entail'), ('change', 'motion'), ('River', 'Pakistan'), ('occupies', 'Pakistan'), ('south', 'Pakistan'), ('part', 'Pakistan'), ('ancient', 'Pakistan'), ('Kingdom', 'Pakistan'), ('achieved', 'Pakistan'), ('position', 'motion'), ('1947', 'Pakistan'), ('formerly', 'Pakistan'), ('republic', 'Pakistan'), ('Muslim', 'Pakistan'), ('civilization', 'Pakistan'), ('entail', 'motion'), ('valley', 'Pakistan'), ('heartland', 'Pakistan')]))
('Core number (sorted) :', [('independence', 2), ('Pakistan', 2), ('India', 2), ('Indus', 2), ('Asian', 2), ('United', 2), ('location', 2), ('motion', 2), ('change', 2), ('River', 2), ('occupies', 2), ('south', 2), ('part', 2), ('ancient', 2), ('Kingdom', 2), ('achieved', 2), ('position', 2), ('1947', 2), ('formerly', 2), ('republic', 2), ('Muslim', 2), ('civilization', 2), ('entail', 2), ('valley', 2), ('heartland', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'independence', ',core number=', 2)
('This document belongs to class:', 'Pakistan', ',core number=', 2)
('This document belongs to class:', 'India', ',core number=', 2)
('This document belongs to class:', 'Indus', ',core number=', 2)
('This document belongs to class:', 'Asian', ',core number=', 2)
('This document belongs to class:', 'United', ',core number=', 2)
('This document belongs to class:', 'location', ',core number=', 2)
('This document belongs to class:', 'motion', ',core number=', 2)
('This document belongs to class:', 'change', ',core number=', 2)
('This document belongs to class:', 'River', ',core number=', 2)
('This document belongs to class:', 'occupies', ',core number=', 2)
('This document belongs to class:', 'south', ',core number=', 2)
('This document belongs to class:', 'part', ',core number=', 2)
('This document belongs to class:', 'ancient', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Pakistan', 0.6195652173913043), ('motion', 0.021739130434782608), ('independence', 0.0), ('India', 0.0), ('Indus', 0.0), ('Asian', 0.0), ('United', 0.0), ('location', 0.0), ('change', 0.0), ('River', 0.0), ('occupies', 0.0), ('south', 0.0), ('part', 0.0), ('ancient', 0.0), ('Kingdom', 0.0), ('achieved', 0.0), ('position', 0.0), ('1947', 0.0), ('formerly', 0.0), ('republic', 0.0), ('Muslim', 0.0), ('civilization', 0.0), ('entail', 0.0), ('valley', 0.0), ('heartland', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Pakistan', 0.7916666666666666), ('independence', 0.4065315315315315), ('India', 0.4065315315315315), ('Indus', 0.4065315315315315), ('Asian', 0.4065315315315315), ('United', 0.4065315315315315), ('River', 0.4065315315315315), ('occupies', 0.4065315315315315), ('south', 0.4065315315315315), ('part', 0.4065315315315315), ('ancient', 0.4065315315315315), ('Kingdom', 0.4065315315315315), ('achieved', 0.4065315315315315), ('1947', 0.4065315315315315), ('formerly', 0.4065315315315315), ('republic', 0.4065315315315315), ('Muslim', 0.4065315315315315), ('civilization', 0.4065315315315315), ('valley', 0.4065315315315315), ('heartland', 0.4065315315315315), ('motion', 0.16666666666666666), ('location', 0.09523809523809523), ('change', 0.09523809523809523), ('position', 0.09523809523809523), ('entail', 0.09523809523809523)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Pakistan', 1.5833333333333333), ('motion', 0.3333333333333333), ('independence', 0.08333333333333333), ('India', 0.08333333333333333), ('Indus', 0.08333333333333333), ('Asian', 0.08333333333333333), ('United', 0.08333333333333333), ('location', 0.08333333333333333), ('change', 0.08333333333333333), ('River', 0.08333333333333333), ('occupies', 0.08333333333333333), ('south', 0.08333333333333333), ('part', 0.08333333333333333), ('ancient', 0.08333333333333333), ('Kingdom', 0.08333333333333333), ('achieved', 0.08333333333333333), ('position', 0.08333333333333333), ('1947', 0.08333333333333333), ('formerly', 0.08333333333333333), ('republic', 0.08333333333333333), ('Muslim', 0.08333333333333333), ('civilization', 0.08333333333333333), ('entail', 0.08333333333333333), ('valley', 0.08333333333333333), ('heartland', 0.08333333333333333)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('Pakistan', 0.3708152723587932), ('motion', 0.09513587872646553), ('location', 0.02621603031838362), ('change', 0.02621603031838362), ('position', 0.02621603031838362), ('entail', 0.02621603031838362), ('independence', 0.022588669875852996), ('India', 0.022588669875852996), ('Indus', 0.022588669875852996), ('Asian', 0.022588669875852996), ('United', 0.022588669875852996), ('River', 0.022588669875852996), ('occupies', 0.022588669875852996), ('south', 0.022588669875852996), ('part', 0.022588669875852996), ('ancient', 0.022588669875852996), ('Kingdom', 0.022588669875852996), ('achieved', 0.022588669875852996), ('1947', 0.022588669875852996), ('formerly', 0.022588669875852996), ('republic', 0.022588669875852996), ('Muslim', 0.022588669875852996), ('civilization', 0.022588669875852996), ('valley', 0.022588669875852996), ('heartland', 0.022588669875852996)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('independence', 'Pakistan'), ('Pakistan', 'independence'), ('Pakistan', 'India'), ('Pakistan', 'Indus'), ('Pakistan', 'Asian'), ('Pakistan', 'United'), ('Pakistan', 'River'), ('Pakistan', 'occupies'), ('Pakistan', 'south'), ('Pakistan', 'part'), ('Pakistan', 'ancient'), ('Pakistan', 'Kingdom'), ('Pakistan', 'achieved'), ('Pakistan', '1947'), ('Pakistan', 'formerly'), ('Pakistan', 'republic'), ('Pakistan', 'Muslim'), ('Pakistan', 'civilization'), ('Pakistan', 'valley'), ('Pakistan', 'heartland'), ('India', 'Pakistan'), ('Indus', 'Pakistan'), ('Asian', 'Pakistan'), ('United', 'Pakistan'), ('location', 'motion'), ('motion', 'location'), ('motion', 'change'), ('motion', 'position'), ('motion', 'entail'), ('change', 'motion'), ('River', 'Pakistan'), ('occupies', 'Pakistan'), ('south', 'Pakistan'), ('part', 'Pakistan'), ('ancient', 'Pakistan'), ('Kingdom', 'Pakistan'), ('achieved', 'Pakistan'), ('position', 'motion'), ('1947', 'Pakistan'), ('formerly', 'Pakistan'), ('republic', 'Pakistan'), ('Muslim', 'Pakistan'), ('civilization', 'Pakistan'), ('entail', 'motion'), ('valley', 'Pakistan'), ('heartland', 'Pakistan')]
Answer Textgraph  10 : ([('independence', 2), ('Pakistan', 2), ('India', 2), ('Indus', 2), ('Asian', 2), ('United', 2), ('location', 2), ('motion', 2), ('change', 2), ('River', 2), ('occupies', 2), ('south', 2), ('part', 2), ('ancient', 2), ('Kingdom', 2), ('achieved', 2), ('position', 2), ('1947', 2), ('formerly', 2), ('republic', 2), ('Muslim', 2), ('civilization', 2), ('entail', 2), ('valley', 2), ('heartland', 2)], [('Pakistan', 0.3708152723587932), ('motion', 0.09513587872646553), ('location', 0.02621603031838362), ('change', 0.02621603031838362), ('position', 0.02621603031838362), ('entail', 0.02621603031838362), ('independence', 0.022588669875852996), ('India', 0.022588669875852996), ('Indus', 0.022588669875852996), ('Asian', 0.022588669875852996), ('United', 0.022588669875852996), ('River', 0.022588669875852996), ('occupies', 0.022588669875852996), ('south', 0.022588669875852996), ('part', 0.022588669875852996), ('ancient', 0.022588669875852996), ('Kingdom', 0.022588669875852996), ('achieved', 0.022588669875852996), ('1947', 0.022588669875852996), ('formerly', 0.022588669875852996), ('republic', 0.022588669875852996), ('Muslim', 0.022588669875852996), ('civilization', 0.022588669875852996), ('valley', 0.022588669875852996), ('heartland', 0.022588669875852996)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421, 0.02631578947368421], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.02631578947368421, 0.02631578947368421, 0.02631578947368421], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11627368421052632
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights: [0.11627368421052632, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31857473684210524
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights: [0.11627368421052632, 0.31857473684210524, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5250936842105263
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights updated after Gradient :  [0.11627368421052632, 0.31857473684210524, 0.5250936842105263]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11627368421052632, 0.31857473684210524, 0.5250936842105263], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11627368421052632
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights: [0.11627368421052632, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31857473684210524
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights: [0.11627368421052632, 0.31857473684210524, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5250936842105263
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights updated after Gradient :  [0.11627368421052632, 0.31857473684210524, 0.5250936842105263]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11627368421052632, 0.31857473684210524, 0.5250936842105263], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11627368421052632
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights: [0.11627368421052632, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31857473684210524
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights: [0.11627368421052632, 0.31857473684210524, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.02631578947368421, 0.02631578947368421, 0.02631578947368421]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.5250936842105263
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16273684210526318, 0.18574736842105266, 0.2509368421052632]
weights updated after Gradient :  [0.11627368421052632, 0.31857473684210524, 0.5250936842105263]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11627368421052632, 0.31857473684210524, 0.5250936842105263], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( independence , independence ): 1.012
Key weight for textgraph edge ( independence , independence ): 4.024
Value weight for textgraph edge ( independence , independence ): 7.036
Query weight for textgraph edge ( independence , Pakistan ): 2.0132
Key weight for textgraph edge ( independence , Pakistan ): 5.0504
Value weight for textgraph edge ( independence , Pakistan ): 8.0876
Query weight for textgraph edge ( independence , India ): 3.0338
Key weight for textgraph edge ( independence , India ): 6.2636
Value weight for textgraph edge ( independence , India ): 9.4934
Query weight for textgraph edge ( Pakistan , independence ): 0.11627368421052632
Key weight for textgraph edge ( Pakistan , independence ): 0.11627368421052632
Value weight for textgraph edge ( Pakistan , independence ): 0.11627368421052632
Query weight for textgraph edge ( Pakistan , Pakistan ): 0.31857473684210524
Key weight for textgraph edge ( Pakistan , Pakistan ): 0.31857473684210524
Value weight for textgraph edge ( Pakistan , Pakistan ): 0.31857473684210524
Query weight for textgraph edge ( Pakistan , India ): 0.5250936842105263
Key weight for textgraph edge ( Pakistan , India ): 0.5250936842105263
Value weight for textgraph edge ( Pakistan , India ): 0.5250936842105263
Query weight for textgraph edge ( India , independence ): 3.02
Key weight for textgraph edge ( India , independence ): 3.02
Value weight for textgraph edge ( India , independence ): 3.02
Query weight for textgraph edge ( India , Pakistan ): 4.038
Key weight for textgraph edge ( India , Pakistan ): 4.038
Value weight for textgraph edge ( India , Pakistan ): 4.038
Query weight for textgraph edge ( India , India ): 5.187
Key weight for textgraph edge ( India , India ): 5.187
Value weight for textgraph edge ( India , India ): 5.187
