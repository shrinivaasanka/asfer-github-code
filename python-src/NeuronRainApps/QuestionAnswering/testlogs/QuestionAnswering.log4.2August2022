*** Introductory Examples for the NLTK Book ***
Loading text1, ..., text9 and sent1, ..., sent9
Type the name of the text or sentence to view it.
Type: 'texts()' or 'sents()' to list the materials.
text1: Moby Dick by Herman Melville 1851
text2: Sense and Sensibility by Jane Austen 1811
text3: The Book of Genesis
text4: Inaugural Address Corpus
text5: Chat Corpus
text6: Monty Python and the Holy Grail
text7: Wall Street Journal
text8: Personals Corpus
text9: The Man Who Was Thursday by G . K . Chesterton 1908
================================================================
Question: Where were the 1992 Olympics held
2
defaultdict(<class 'list'>, {'selected': ['Olympic_Games'], 'modern': ['Olympic_Games'], '4': ['Olympic_Games'], 'revival': ['Olympic_Games'], 'ancient': ['Olympic_Games'], 'held': ['Olympic_Games'], 'games': ['Olympic_Games'], 'country': ['Olympic_Games'], 'e.g.': ['keep'], 'keep': ['keep'], 'activity': ['keep'], 'state': ['keep'], 'position': ['keep'], 'certain': ['keep'], 'every': ['Olympic_Games'], 'years': ['Olympic_Games']})
('definitiongraph networkx edges:', OutEdgeView([('selected', 'Olympic_Games'), ('Olympic_Games', 'selected'), ('Olympic_Games', 'modern'), ('Olympic_Games', '4'), ('Olympic_Games', 'revival'), ('Olympic_Games', 'ancient'), ('Olympic_Games', 'held'), ('Olympic_Games', 'games'), ('Olympic_Games', 'country'), ('Olympic_Games', 'every'), ('Olympic_Games', 'years'), ('modern', 'Olympic_Games'), ('4', 'Olympic_Games'), ('revival', 'Olympic_Games'), ('ancient', 'Olympic_Games'), ('held', 'Olympic_Games'), ('games', 'Olympic_Games'), ('country', 'Olympic_Games'), ('e.g.', 'keep'), ('keep', 'e.g.'), ('keep', 'keep'), ('keep', 'activity'), ('keep', 'state'), ('keep', 'position'), ('keep', 'certain'), ('activity', 'keep'), ('state', 'keep'), ('position', 'keep'), ('certain', 'keep'), ('every', 'Olympic_Games'), ('years', 'Olympic_Games')]))
('Core number (sorted) :', [('selected', 2), ('Olympic_Games', 2), ('modern', 2), ('4', 2), ('revival', 2), ('ancient', 2), ('held', 2), ('games', 2), ('country', 2), ('e.g.', 2), ('keep', 2), ('activity', 2), ('state', 2), ('position', 2), ('certain', 2), ('every', 2), ('years', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'selected', ',core number=', 2)
('This document belongs to class:', 'Olympic_Games', ',core number=', 2)
('This document belongs to class:', 'modern', ',core number=', 2)
('This document belongs to class:', '4', ',core number=', 2)
('This document belongs to class:', 'revival', ',core number=', 2)
('This document belongs to class:', 'ancient', ',core number=', 2)
('This document belongs to class:', 'held', ',core number=', 2)
('This document belongs to class:', 'games', ',core number=', 2)
('This document belongs to class:', 'country', ',core number=', 2)
('This document belongs to class:', 'e.g.', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Olympic_Games', 0.375), ('keep', 0.08333333333333333), ('selected', 0.0), ('modern', 0.0), ('4', 0.0), ('revival', 0.0), ('ancient', 0.0), ('held', 0.0), ('games', 0.0), ('country', 0.0), ('e.g.', 0.0), ('activity', 0.0), ('state', 0.0), ('position', 0.0), ('certain', 0.0), ('every', 0.0), ('years', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Olympic_Games', 0.625), ('selected', 0.3289473684210526), ('modern', 0.3289473684210526), ('4', 0.3289473684210526), ('revival', 0.3289473684210526), ('ancient', 0.3289473684210526), ('held', 0.3289473684210526), ('games', 0.3289473684210526), ('country', 0.3289473684210526), ('every', 0.3289473684210526), ('years', 0.3289473684210526), ('keep', 0.3125), ('e.g.', 0.1736111111111111), ('activity', 0.1736111111111111), ('state', 0.1736111111111111), ('position', 0.1736111111111111), ('certain', 0.1736111111111111)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Olympic_Games', 1.25), ('keep', 0.625), ('selected', 0.125), ('modern', 0.125), ('4', 0.125), ('revival', 0.125), ('ancient', 0.125), ('held', 0.125), ('games', 0.125), ('country', 0.125), ('e.g.', 0.125), ('activity', 0.125), ('state', 0.125), ('position', 0.125), ('certain', 0.125), ('every', 0.125), ('years', 0.125)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('Olympic_Games', 0.3020691428523738), ('keep', 0.16693269094092425), ('e.g.', 0.03720169710593281), ('activity', 0.03720169710593281), ('state', 0.03720169710593281), ('position', 0.03720169710593281), ('certain', 0.03720169710593281), ('selected', 0.034498968067703834), ('modern', 0.034498968067703834), ('4', 0.034498968067703834), ('revival', 0.034498968067703834), ('ancient', 0.034498968067703834), ('held', 0.034498968067703834), ('games', 0.034498968067703834), ('country', 0.034498968067703834), ('every', 0.034498968067703834), ('years', 0.034498968067703834)]
Question Textgraph: ([('selected', 2), ('Olympic_Games', 2), ('modern', 2), ('4', 2), ('revival', 2), ('ancient', 2), ('held', 2), ('games', 2), ('country', 2), ('e.g.', 2), ('keep', 2), ('activity', 2), ('state', 2), ('position', 2), ('certain', 2), ('every', 2), ('years', 2)], [('Olympic_Games', 0.3020691428523738), ('keep', 0.16693269094092425), ('e.g.', 0.03720169710593281), ('activity', 0.03720169710593281), ('state', 0.03720169710593281), ('position', 0.03720169710593281), ('certain', 0.03720169710593281), ('selected', 0.034498968067703834), ('modern', 0.034498968067703834), ('4', 0.034498968067703834), ('revival', 0.034498968067703834), ('ancient', 0.034498968067703834), ('held', 0.034498968067703834), ('games', 0.034498968067703834), ('country', 0.034498968067703834), ('every', 0.034498968067703834), ('years', 0.034498968067703834)])
Init of ConceptNet Client
wikipedia search result: Basketball at the 1992 Summer Olympics
wikipedia search result summary: Basketball at the 1992 Summer Olympics was the thirteenth appearance of the sport of basketball as an official Olympic medal event. It included the sport of basketball's men's and women's competitions of the 1992 Summer Olympics. The games were played at the Pavelló Olímpic de Badalona. 12 men's teams and 8 women's teams participated in the tournament.
This was the first time that NBA players were eligible to play in Summer Olympics basketball, following a decision of FIBA in April 1989. Until 1992, only amateurs and players from professional leagues other than the NBA were allowed to play.The United States men's team, which was nicknamed "The Dream Team", won the gold medal by beating Croatia in the men's final, with Lithuania winning the bronze medal. A documentary film, The Other Dream Team, covered the progress of the Lithuanian team.The Unified Team, representing the Commonwealth of Independent States, of the recently defunct Soviet Union, won the women's tournament, with China as runner-up. The United States women's team won the bronze medal after losing to the CIS in the semifinal, suffering their third and last defeat to date in the Olympic basketball history.
2
defaultdict(<class 'list'>, {'elevated': ['basketball'], 'opposing': ['basketball'], 'modern': ['Olympic_Games'], 'warmest': ['summer'], 'ball': ['basketball'], 'scored': ['basketball'], 'teams': ['basketball'], 'summer': ['summer'], 'extends': ['summer'], 'games': ['Olympic_Games'], 'throwing': ['basketball'], 'northern': ['summer'], 'years': ['Olympic_Games'], 'court': ['basketball'], 'season': ['summer'], 'points': ['basketball'], 'selected': ['Olympic_Games'], 'autumnal': ['summer'], 'two': ['basketball'], 'played': ['basketball'], '4': ['Olympic_Games'], 'horizontal': ['basketball'], 'revival': ['Olympic_Games'], 'ancient': ['Olympic_Games'], 'held': ['Olympic_Games'], 'country': ['Olympic_Games'], 'equinox': ['summer'], 'hoop': ['basketball'], 'hemisphere': ['summer'], 'solstice': ['summer'], '5': ['basketball'], 'year': ['summer'], 'every': ['Olympic_Games'], 'game': ['basketball'], 'players': ['basketball']})
('definitiongraph networkx edges:', OutEdgeView([('elevated', 'basketball'), ('basketball', 'elevated'), ('basketball', 'opposing'), ('basketball', 'ball'), ('basketball', 'scored'), ('basketball', 'teams'), ('basketball', 'throwing'), ('basketball', 'court'), ('basketball', 'points'), ('basketball', 'two'), ('basketball', 'played'), ('basketball', 'horizontal'), ('basketball', 'hoop'), ('basketball', '5'), ('basketball', 'game'), ('basketball', 'players'), ('opposing', 'basketball'), ('modern', 'Olympic_Games'), ('Olympic_Games', 'modern'), ('Olympic_Games', 'games'), ('Olympic_Games', 'years'), ('Olympic_Games', 'selected'), ('Olympic_Games', '4'), ('Olympic_Games', 'revival'), ('Olympic_Games', 'ancient'), ('Olympic_Games', 'held'), ('Olympic_Games', 'country'), ('Olympic_Games', 'every'), ('warmest', 'summer'), ('summer', 'warmest'), ('summer', 'summer'), ('summer', 'extends'), ('summer', 'northern'), ('summer', 'season'), ('summer', 'autumnal'), ('summer', 'equinox'), ('summer', 'hemisphere'), ('summer', 'solstice'), ('summer', 'year'), ('ball', 'basketball'), ('scored', 'basketball'), ('teams', 'basketball'), ('extends', 'summer'), ('games', 'Olympic_Games'), ('throwing', 'basketball'), ('northern', 'summer'), ('years', 'Olympic_Games'), ('court', 'basketball'), ('season', 'summer'), ('points', 'basketball'), ('selected', 'Olympic_Games'), ('autumnal', 'summer'), ('two', 'basketball'), ('played', 'basketball'), ('4', 'Olympic_Games'), ('horizontal', 'basketball'), ('revival', 'Olympic_Games'), ('ancient', 'Olympic_Games'), ('held', 'Olympic_Games'), ('country', 'Olympic_Games'), ('equinox', 'summer'), ('hoop', 'basketball'), ('hemisphere', 'summer'), ('solstice', 'summer'), ('5', 'basketball'), ('year', 'summer'), ('every', 'Olympic_Games'), ('game', 'basketball'), ('players', 'basketball')]))
('Core number (sorted) :', [('elevated', 2), ('basketball', 2), ('opposing', 2), ('modern', 2), ('Olympic_Games', 2), ('warmest', 2), ('summer', 2), ('ball', 2), ('scored', 2), ('teams', 2), ('extends', 2), ('games', 2), ('throwing', 2), ('northern', 2), ('years', 2), ('court', 2), ('season', 2), ('points', 2), ('selected', 2), ('autumnal', 2), ('two', 2), ('played', 2), ('4', 2), ('horizontal', 2), ('revival', 2), ('ancient', 2), ('held', 2), ('country', 2), ('equinox', 2), ('hoop', 2), ('hemisphere', 2), ('solstice', 2), ('5', 2), ('year', 2), ('every', 2), ('game', 2), ('players', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'elevated', ',core number=', 2)
('This document belongs to class:', 'basketball', ',core number=', 2)
('This document belongs to class:', 'opposing', ',core number=', 2)
('This document belongs to class:', 'modern', ',core number=', 2)
('This document belongs to class:', 'Olympic_Games', ',core number=', 2)
('This document belongs to class:', 'warmest', ',core number=', 2)
('This document belongs to class:', 'summer', ',core number=', 2)
('This document belongs to class:', 'ball', ',core number=', 2)
('This document belongs to class:', 'scored', ',core number=', 2)
('This document belongs to class:', 'teams', ',core number=', 2)
('This document belongs to class:', 'extends', ',core number=', 2)
('This document belongs to class:', 'games', ',core number=', 2)
('This document belongs to class:', 'throwing', ',core number=', 2)
('This document belongs to class:', 'northern', ',core number=', 2)
('This document belongs to class:', 'years', ',core number=', 2)
('This document belongs to class:', 'court', ',core number=', 2)
('This document belongs to class:', 'season', ',core number=', 2)
('This document belongs to class:', 'points', ',core number=', 2)
('This document belongs to class:', 'selected', ',core number=', 2)
('This document belongs to class:', 'autumnal', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('basketball', 0.16666666666666666), ('Olympic_Games', 0.07142857142857142), ('summer', 0.05714285714285714), ('elevated', 0.0), ('opposing', 0.0), ('modern', 0.0), ('warmest', 0.0), ('ball', 0.0), ('scored', 0.0), ('teams', 0.0), ('extends', 0.0), ('games', 0.0), ('throwing', 0.0), ('northern', 0.0), ('years', 0.0), ('court', 0.0), ('season', 0.0), ('points', 0.0), ('selected', 0.0), ('autumnal', 0.0), ('two', 0.0), ('played', 0.0), ('4', 0.0), ('horizontal', 0.0), ('revival', 0.0), ('ancient', 0.0), ('held', 0.0), ('country', 0.0), ('equinox', 0.0), ('hoop', 0.0), ('hemisphere', 0.0), ('solstice', 0.0), ('5', 0.0), ('year', 0.0), ('every', 0.0), ('game', 0.0), ('players', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('basketball', 0.4166666666666667), ('Olympic_Games', 0.2777777777777778), ('summer', 0.25), ('elevated', 0.21551724137931036), ('opposing', 0.21551724137931036), ('ball', 0.21551724137931036), ('scored', 0.21551724137931036), ('teams', 0.21551724137931036), ('throwing', 0.21551724137931036), ('court', 0.21551724137931036), ('points', 0.21551724137931036), ('two', 0.21551724137931036), ('played', 0.21551724137931036), ('horizontal', 0.21551724137931036), ('hoop', 0.21551724137931036), ('5', 0.21551724137931036), ('game', 0.21551724137931036), ('players', 0.21551724137931036), ('modern', 0.14619883040935672), ('games', 0.14619883040935672), ('years', 0.14619883040935672), ('selected', 0.14619883040935672), ('4', 0.14619883040935672), ('revival', 0.14619883040935672), ('ancient', 0.14619883040935672), ('held', 0.14619883040935672), ('country', 0.14619883040935672), ('every', 0.14619883040935672), ('warmest', 0.1323529411764706), ('extends', 0.1323529411764706), ('northern', 0.1323529411764706), ('season', 0.1323529411764706), ('autumnal', 0.1323529411764706), ('equinox', 0.1323529411764706), ('hemisphere', 0.1323529411764706), ('solstice', 0.1323529411764706), ('year', 0.1323529411764706)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('basketball', 0.8333333333333333), ('Olympic_Games', 0.5555555555555556), ('summer', 0.5), ('elevated', 0.05555555555555555), ('opposing', 0.05555555555555555), ('modern', 0.05555555555555555), ('warmest', 0.05555555555555555), ('ball', 0.05555555555555555), ('scored', 0.05555555555555555), ('teams', 0.05555555555555555), ('extends', 0.05555555555555555), ('games', 0.05555555555555555), ('throwing', 0.05555555555555555), ('northern', 0.05555555555555555), ('years', 0.05555555555555555), ('court', 0.05555555555555555), ('season', 0.05555555555555555), ('points', 0.05555555555555555), ('selected', 0.05555555555555555), ('autumnal', 0.05555555555555555), ('two', 0.05555555555555555), ('played', 0.05555555555555555), ('4', 0.05555555555555555), ('horizontal', 0.05555555555555555), ('revival', 0.05555555555555555), ('ancient', 0.05555555555555555), ('held', 0.05555555555555555), ('country', 0.05555555555555555), ('equinox', 0.05555555555555555), ('hoop', 0.05555555555555555), ('hemisphere', 0.05555555555555555), ('solstice', 0.05555555555555555), ('5', 0.05555555555555555), ('year', 0.05555555555555555), ('every', 0.05555555555555555), ('game', 0.05555555555555555), ('players', 0.05555555555555555)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('basketball', 0.2008727343449839), ('Olympic_Games', 0.13878498173142784), ('summer', 0.12636743120871663), ('warmest', 0.015989204340172623), ('extends', 0.015989204340172623), ('northern', 0.015989204340172623), ('season', 0.015989204340172623), ('autumnal', 0.015989204340172623), ('equinox', 0.015989204340172623), ('hemisphere', 0.015989204340172623), ('solstice', 0.015989204340172623), ('year', 0.015989204340172623), ('modern', 0.015851231556586954), ('games', 0.015851231556586954), ('years', 0.015851231556586954), ('selected', 0.015851231556586954), ('4', 0.015851231556586954), ('revival', 0.015851231556586954), ('ancient', 0.015851231556586954), ('held', 0.015851231556586954), ('country', 0.015851231556586954), ('every', 0.015851231556586954), ('elevated', 0.015437313205829903), ('opposing', 0.015437313205829903), ('ball', 0.015437313205829903), ('scored', 0.015437313205829903), ('teams', 0.015437313205829903), ('throwing', 0.015437313205829903), ('court', 0.015437313205829903), ('points', 0.015437313205829903), ('two', 0.015437313205829903), ('played', 0.015437313205829903), ('horizontal', 0.015437313205829903), ('hoop', 0.015437313205829903), ('5', 0.015437313205829903), ('game', 0.015437313205829903), ('players', 0.015437313205829903)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('elevated', 'basketball'), ('basketball', 'elevated'), ('basketball', 'opposing'), ('basketball', 'ball'), ('basketball', 'scored'), ('basketball', 'teams'), ('basketball', 'throwing'), ('basketball', 'court'), ('basketball', 'points'), ('basketball', 'two'), ('basketball', 'played'), ('basketball', 'horizontal'), ('basketball', 'hoop'), ('basketball', '5'), ('basketball', 'game'), ('basketball', 'players'), ('opposing', 'basketball'), ('modern', 'Olympic_Games'), ('Olympic_Games', 'modern'), ('Olympic_Games', 'games'), ('Olympic_Games', 'years'), ('Olympic_Games', 'selected'), ('Olympic_Games', '4'), ('Olympic_Games', 'revival'), ('Olympic_Games', 'ancient'), ('Olympic_Games', 'held'), ('Olympic_Games', 'country'), ('Olympic_Games', 'every'), ('warmest', 'summer'), ('summer', 'warmest'), ('summer', 'summer'), ('summer', 'extends'), ('summer', 'northern'), ('summer', 'season'), ('summer', 'autumnal'), ('summer', 'equinox'), ('summer', 'hemisphere'), ('summer', 'solstice'), ('summer', 'year'), ('ball', 'basketball'), ('scored', 'basketball'), ('teams', 'basketball'), ('extends', 'summer'), ('games', 'Olympic_Games'), ('throwing', 'basketball'), ('northern', 'summer'), ('years', 'Olympic_Games'), ('court', 'basketball'), ('season', 'summer'), ('points', 'basketball'), ('selected', 'Olympic_Games'), ('autumnal', 'summer'), ('two', 'basketball'), ('played', 'basketball'), ('4', 'Olympic_Games'), ('horizontal', 'basketball'), ('revival', 'Olympic_Games'), ('ancient', 'Olympic_Games'), ('held', 'Olympic_Games'), ('country', 'Olympic_Games'), ('equinox', 'summer'), ('hoop', 'basketball'), ('hemisphere', 'summer'), ('solstice', 'summer'), ('5', 'basketball'), ('year', 'summer'), ('every', 'Olympic_Games'), ('game', 'basketball'), ('players', 'basketball')]
Answer Textgraph  1 : ([('elevated', 2), ('basketball', 2), ('opposing', 2), ('modern', 2), ('Olympic_Games', 2), ('warmest', 2), ('summer', 2), ('ball', 2), ('scored', 2), ('teams', 2), ('extends', 2), ('games', 2), ('throwing', 2), ('northern', 2), ('years', 2), ('court', 2), ('season', 2), ('points', 2), ('selected', 2), ('autumnal', 2), ('two', 2), ('played', 2), ('4', 2), ('horizontal', 2), ('revival', 2), ('ancient', 2), ('held', 2), ('country', 2), ('equinox', 2), ('hoop', 2), ('hemisphere', 2), ('solstice', 2), ('5', 2), ('year', 2), ('every', 2), ('game', 2), ('players', 2)], [('basketball', 0.2008727343449839), ('Olympic_Games', 0.13878498173142784), ('summer', 0.12636743120871663), ('warmest', 0.015989204340172623), ('extends', 0.015989204340172623), ('northern', 0.015989204340172623), ('season', 0.015989204340172623), ('autumnal', 0.015989204340172623), ('equinox', 0.015989204340172623), ('hemisphere', 0.015989204340172623), ('solstice', 0.015989204340172623), ('year', 0.015989204340172623), ('modern', 0.015851231556586954), ('games', 0.015851231556586954), ('years', 0.015851231556586954), ('selected', 0.015851231556586954), ('4', 0.015851231556586954), ('revival', 0.015851231556586954), ('ancient', 0.015851231556586954), ('held', 0.015851231556586954), ('country', 0.015851231556586954), ('every', 0.015851231556586954), ('elevated', 0.015437313205829903), ('opposing', 0.015437313205829903), ('ball', 0.015437313205829903), ('scored', 0.015437313205829903), ('teams', 0.015437313205829903), ('throwing', 0.015437313205829903), ('court', 0.015437313205829903), ('points', 0.015437313205829903), ('two', 0.015437313205829903), ('played', 0.015437313205829903), ('horizontal', 0.015437313205829903), ('hoop', 0.015437313205829903), ('5', 0.015437313205829903), ('game', 0.015437313205829903), ('players', 0.015437313205829903)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.03333333333333333, 0.03333333333333333, 0.03333333333333333], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11613333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights: [0.11613333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31828
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights: [0.11613333333333334, 0.31828, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52402
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights updated after Gradient :  [0.11613333333333334, 0.31828, 0.52402]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11613333333333334, 0.31828, 0.52402], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11613333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights: [0.11613333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31828
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights: [0.11613333333333334, 0.31828, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52402
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights updated after Gradient :  [0.11613333333333334, 0.31828, 0.52402]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11613333333333334, 0.31828, 0.52402], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11613333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights: [0.11613333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31828
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights: [0.11613333333333334, 0.31828, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52402
LinearPerceptronGradient() weight update iteration: deltaw =  [0.16133333333333336, 0.18280000000000002, 0.24020000000000002]
weights updated after Gradient :  [0.11613333333333334, 0.31828, 0.52402]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11613333333333334, 0.31828, 0.52402], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( elevated , elevated ): 1.012
Key weight for textgraph edge ( elevated , elevated ): 4.024
Value weight for textgraph edge ( elevated , elevated ): 7.036
Query weight for textgraph edge ( elevated , basketball ): 2.0132
Key weight for textgraph edge ( elevated , basketball ): 5.0504
Value weight for textgraph edge ( elevated , basketball ): 8.0876
Query weight for textgraph edge ( elevated , opposing ): 3.0338
Key weight for textgraph edge ( elevated , opposing ): 6.2636
Value weight for textgraph edge ( elevated , opposing ): 9.4934
Query weight for textgraph edge ( basketball , elevated ): 0.11613333333333334
Key weight for textgraph edge ( basketball , elevated ): 0.11613333333333334
Value weight for textgraph edge ( basketball , elevated ): 0.11613333333333334
Query weight for textgraph edge ( basketball , basketball ): 0.31828
Key weight for textgraph edge ( basketball , basketball ): 0.31828
Value weight for textgraph edge ( basketball , basketball ): 0.31828
Query weight for textgraph edge ( basketball , opposing ): 0.52402
Key weight for textgraph edge ( basketball , opposing ): 0.52402
Value weight for textgraph edge ( basketball , opposing ): 0.52402
Query weight for textgraph edge ( opposing , elevated ): 3.02
Key weight for textgraph edge ( opposing , elevated ): 3.02
Value weight for textgraph edge ( opposing , elevated ): 3.02
Query weight for textgraph edge ( opposing , basketball ): 4.038
Key weight for textgraph edge ( opposing , basketball ): 4.038
Value weight for textgraph edge ( opposing , basketball ): 4.038
Query weight for textgraph edge ( opposing , opposing ): 5.187
Key weight for textgraph edge ( opposing , opposing ): 5.187
Value weight for textgraph edge ( opposing , opposing ): 5.187
wikipedia search result: 1992 Winter Olympics
wikipedia search result summary: The 1992 Winter Olympics, officially known as the XVI Olympic Winter Games (French: XVIes Jeux Olympiques d'hiver) and commonly known as Albertville '92, was a winter multi-sport event held from 8 to 23 February 1992 in and around Albertville, France. Albertville won the bid to host the Winter Olympics in 1986, beating Sofia, Falun, Lillehammer, Cortina d'Ampezzo, Anchorage, and Berchtesgaden. The 1992 Winter Olympics were the last winter games held in the same year as the Summer Olympics. The Games were the fifth Olympic Games held in France and the country's third Winter Olympics, after the 1924 Winter Games in Chamonix and the 1968 Winter Games in Grenoble. This games was the first of two consecutive Olympic games to be held in Western Europe, preceding the 1992 Summer Olympics in Barcelona, Spain.
Figure skating, short track speed skating, speed skating, and the opening and closing ceremonies were the only events that took place in Albertville. The other events were held in the villages of Courchevel, La Plagne, Les Arcs, Les Menuires, Les Saisies, Méribel, Pralognan-la-Vanoise, Tignes, and Val d'Isère. Sixty-four nations and 1,801 athletes participated in six sports and fifty-seven events. This included both the Unified Team, representing the non-Baltic former Soviet republics, and Germany, newly consolidated as a team following the reunification of the former East and West Germany in 1990. The event also saw the debut of eight nations in the Winter Olympics. New events included Short track speed skating, freestyle skiing, and women's biathlon. These were the last Winter Olympics to include demonstration sports, consisting of curling, aerials and ski ballet, and speed skiing, and the last Games to feature an outdoor speed skating rink.


2
defaultdict(<class 'list'>, {'selected': ['Olympic_Games'], 'modern': ['Olympic_Games'], '4': ['Olympic_Games'], 'revival': ['Olympic_Games'], 'ancient': ['Olympic_Games'], 'winter': ['winter'], 'held': ['Olympic_Games'], 'extends': ['winter'], 'coldest': ['winter'], 'games': ['Olympic_Games'], 'country': ['Olympic_Games'], 'equinox': ['winter'], 'vernal': ['winter'], 'hemisphere': ['winter'], 'solstice': ['winter'], 'northern': ['winter'], 'every': ['Olympic_Games'], 'year': ['winter'], 'years': ['Olympic_Games'], 'season': ['winter']})
('definitiongraph networkx edges:', OutEdgeView([('selected', 'Olympic_Games'), ('Olympic_Games', 'selected'), ('Olympic_Games', 'modern'), ('Olympic_Games', '4'), ('Olympic_Games', 'revival'), ('Olympic_Games', 'ancient'), ('Olympic_Games', 'held'), ('Olympic_Games', 'games'), ('Olympic_Games', 'country'), ('Olympic_Games', 'every'), ('Olympic_Games', 'years'), ('modern', 'Olympic_Games'), ('4', 'Olympic_Games'), ('revival', 'Olympic_Games'), ('ancient', 'Olympic_Games'), ('winter', 'winter'), ('winter', 'extends'), ('winter', 'coldest'), ('winter', 'equinox'), ('winter', 'vernal'), ('winter', 'hemisphere'), ('winter', 'solstice'), ('winter', 'northern'), ('winter', 'year'), ('winter', 'season'), ('held', 'Olympic_Games'), ('extends', 'winter'), ('coldest', 'winter'), ('games', 'Olympic_Games'), ('country', 'Olympic_Games'), ('equinox', 'winter'), ('vernal', 'winter'), ('hemisphere', 'winter'), ('solstice', 'winter'), ('northern', 'winter'), ('every', 'Olympic_Games'), ('year', 'winter'), ('years', 'Olympic_Games'), ('season', 'winter')]))
('Core number (sorted) :', [('selected', 2), ('Olympic_Games', 2), ('modern', 2), ('4', 2), ('revival', 2), ('ancient', 2), ('winter', 2), ('held', 2), ('extends', 2), ('coldest', 2), ('games', 2), ('country', 2), ('equinox', 2), ('vernal', 2), ('hemisphere', 2), ('solstice', 2), ('northern', 2), ('every', 2), ('year', 2), ('years', 2), ('season', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'selected', ',core number=', 2)
('This document belongs to class:', 'Olympic_Games', ',core number=', 2)
('This document belongs to class:', 'modern', ',core number=', 2)
('This document belongs to class:', '4', ',core number=', 2)
('This document belongs to class:', 'revival', ',core number=', 2)
('This document belongs to class:', 'ancient', ',core number=', 2)
('This document belongs to class:', 'winter', ',core number=', 2)
('This document belongs to class:', 'held', ',core number=', 2)
('This document belongs to class:', 'extends', ',core number=', 2)
('This document belongs to class:', 'coldest', ',core number=', 2)
('This document belongs to class:', 'games', ',core number=', 2)
('This document belongs to class:', 'country', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Olympic_Games', 0.23684210526315788), ('winter', 0.18947368421052632), ('selected', 0.0), ('modern', 0.0), ('4', 0.0), ('revival', 0.0), ('ancient', 0.0), ('held', 0.0), ('extends', 0.0), ('coldest', 0.0), ('games', 0.0), ('country', 0.0), ('equinox', 0.0), ('vernal', 0.0), ('hemisphere', 0.0), ('solstice', 0.0), ('northern', 0.0), ('every', 0.0), ('year', 0.0), ('years', 0.0), ('season', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Olympic_Games', 0.5), ('winter', 0.45), ('selected', 0.2631578947368421), ('modern', 0.2631578947368421), ('4', 0.2631578947368421), ('revival', 0.2631578947368421), ('ancient', 0.2631578947368421), ('held', 0.2631578947368421), ('games', 0.2631578947368421), ('country', 0.2631578947368421), ('every', 0.2631578947368421), ('years', 0.2631578947368421), ('extends', 0.23823529411764707), ('coldest', 0.23823529411764707), ('equinox', 0.23823529411764707), ('vernal', 0.23823529411764707), ('hemisphere', 0.23823529411764707), ('solstice', 0.23823529411764707), ('northern', 0.23823529411764707), ('year', 0.23823529411764707), ('season', 0.23823529411764707)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Olympic_Games', 1.0), ('winter', 0.9), ('selected', 0.1), ('modern', 0.1), ('4', 0.1), ('revival', 0.1), ('ancient', 0.1), ('held', 0.1), ('extends', 0.1), ('coldest', 0.1), ('games', 0.1), ('country', 0.1), ('equinox', 0.1), ('vernal', 0.1), ('hemisphere', 0.1), ('solstice', 0.1), ('northern', 0.1), ('every', 0.1), ('year', 0.1), ('years', 0.1), ('season', 0.1)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('Olympic_Games', 0.24452798719942012), ('winter', 0.22264921613493427), ('extends', 0.028171251117282428), ('coldest', 0.028171251117282428), ('equinox', 0.028171251117282428), ('vernal', 0.028171251117282428), ('hemisphere', 0.028171251117282428), ('solstice', 0.028171251117282428), ('northern', 0.028171251117282428), ('year', 0.028171251117282428), ('season', 0.028171251117282428), ('selected', 0.027928153661010383), ('modern', 0.027928153661010383), ('4', 0.027928153661010383), ('revival', 0.027928153661010383), ('ancient', 0.027928153661010383), ('held', 0.027928153661010383), ('games', 0.027928153661010383), ('country', 0.027928153661010383), ('every', 0.027928153661010383), ('years', 0.027928153661010383)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('selected', 'Olympic_Games'), ('Olympic_Games', 'selected'), ('Olympic_Games', 'modern'), ('Olympic_Games', '4'), ('Olympic_Games', 'revival'), ('Olympic_Games', 'ancient'), ('Olympic_Games', 'held'), ('Olympic_Games', 'games'), ('Olympic_Games', 'country'), ('Olympic_Games', 'every'), ('Olympic_Games', 'years'), ('modern', 'Olympic_Games'), ('4', 'Olympic_Games'), ('revival', 'Olympic_Games'), ('ancient', 'Olympic_Games'), ('winter', 'winter'), ('winter', 'extends'), ('winter', 'coldest'), ('winter', 'equinox'), ('winter', 'vernal'), ('winter', 'hemisphere'), ('winter', 'solstice'), ('winter', 'northern'), ('winter', 'year'), ('winter', 'season'), ('held', 'Olympic_Games'), ('extends', 'winter'), ('coldest', 'winter'), ('games', 'Olympic_Games'), ('country', 'Olympic_Games'), ('equinox', 'winter'), ('vernal', 'winter'), ('hemisphere', 'winter'), ('solstice', 'winter'), ('northern', 'winter'), ('every', 'Olympic_Games'), ('year', 'winter'), ('years', 'Olympic_Games'), ('season', 'winter')]
Answer Textgraph  2 : ([('selected', 2), ('Olympic_Games', 2), ('modern', 2), ('4', 2), ('revival', 2), ('ancient', 2), ('winter', 2), ('held', 2), ('extends', 2), ('coldest', 2), ('games', 2), ('country', 2), ('equinox', 2), ('vernal', 2), ('hemisphere', 2), ('solstice', 2), ('northern', 2), ('every', 2), ('year', 2), ('years', 2), ('season', 2)], [('Olympic_Games', 0.24452798719942012), ('winter', 0.22264921613493427), ('extends', 0.028171251117282428), ('coldest', 0.028171251117282428), ('equinox', 0.028171251117282428), ('vernal', 0.028171251117282428), ('hemisphere', 0.028171251117282428), ('solstice', 0.028171251117282428), ('northern', 0.028171251117282428), ('year', 0.028171251117282428), ('season', 0.028171251117282428), ('selected', 0.027928153661010383), ('modern', 0.027928153661010383), ('4', 0.027928153661010383), ('revival', 0.027928153661010383), ('ancient', 0.027928153661010383), ('held', 0.027928153661010383), ('games', 0.027928153661010383), ('country', 0.027928153661010383), ('every', 0.027928153661010383), ('years', 0.027928153661010383)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.05, 0.05, 0.05], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( selected , selected ): 1.012
Key weight for textgraph edge ( selected , selected ): 4.024
Value weight for textgraph edge ( selected , selected ): 7.036
Query weight for textgraph edge ( selected , Olympic_Games ): 2.0132
Key weight for textgraph edge ( selected , Olympic_Games ): 5.0504
Value weight for textgraph edge ( selected , Olympic_Games ): 8.0876
Query weight for textgraph edge ( selected , modern ): 3.0338
Key weight for textgraph edge ( selected , modern ): 6.2636
Value weight for textgraph edge ( selected , modern ): 9.4934
Query weight for textgraph edge ( Olympic_Games , selected ): 0.11580000000000001
Key weight for textgraph edge ( Olympic_Games , selected ): 0.11580000000000001
Value weight for textgraph edge ( Olympic_Games , selected ): 0.11580000000000001
Query weight for textgraph edge ( Olympic_Games , Olympic_Games ): 0.31758
Key weight for textgraph edge ( Olympic_Games , Olympic_Games ): 0.31758
Value weight for textgraph edge ( Olympic_Games , Olympic_Games ): 0.31758
Query weight for textgraph edge ( Olympic_Games , modern ): 0.52147
Key weight for textgraph edge ( Olympic_Games , modern ): 0.52147
Value weight for textgraph edge ( Olympic_Games , modern ): 0.52147
Query weight for textgraph edge ( modern , selected ): 3.02
Key weight for textgraph edge ( modern , selected ): 3.02
Value weight for textgraph edge ( modern , selected ): 3.02
Query weight for textgraph edge ( modern , Olympic_Games ): 4.038
Key weight for textgraph edge ( modern , Olympic_Games ): 4.038
Value weight for textgraph edge ( modern , Olympic_Games ): 4.038
Query weight for textgraph edge ( modern , modern ): 5.187
Key weight for textgraph edge ( modern , modern ): 5.187
Value weight for textgraph edge ( modern , modern ): 5.187
wikipedia search result: Badminton at the 1992 Summer Olympics
wikipedia search result summary: Badminton had its debut as an official medal sport at the 1992 Summer Olympics. It was held from 28 July to 4 August 1992. Four events were held in the first competition of the sport: men's singles, women's singles, men's doubles, and women's doubles. Badminton was contested in the Pavelló de la Mar Bella. 36 nations entered competitors, with a total of 177 entrants. Asian nations won fifteen of the sixteen medals, with their dominance being broken only by Denmark's bronze medal in the men's singles.The tournament was single-elimination.  Matches consisted of three sets, with sets being to 15 except in women's singles, where sets were to 11.  No playoffs were contested for semi-final losers, meaning that two bronze medals were awarded in each event.  Similarly, all four players/pairs defeated in the quarterfinals for each event were awarded fifth place.
2
defaultdict(<class 'list'>, {'selected': ['Olympic_Games'], 'autumnal': ['summer'], 'modern': ['Olympic_Games'], 'net': ['badminton'], 'warmest': ['summer'], 'played': ['badminton'], 'long-handled': ['badminton'], '4': ['Olympic_Games'], 'revival': ['Olympic_Games'], 'ancient': ['Olympic_Games'], 'summer': ['summer'], 'held': ['Olympic_Games'], 'extends': ['summer'], 'games': ['Olympic_Games'], 'volley': ['badminton'], 'country': ['Olympic_Games'], 'shuttlecock': ['badminton'], 'equinox': ['summer'], 'hemisphere': ['summer'], 'solstice': ['summer'], 'northern': ['summer'], 'every': ['Olympic_Games'], 'light': ['badminton'], 'year': ['summer'], 'used': ['badminton'], 'years': ['Olympic_Games'], 'game': ['badminton'], 'rackets': ['badminton'], 'court': ['badminton'], 'season': ['summer']})
('definitiongraph networkx edges:', OutEdgeView([('selected', 'Olympic_Games'), ('Olympic_Games', 'selected'), ('Olympic_Games', 'modern'), ('Olympic_Games', '4'), ('Olympic_Games', 'revival'), ('Olympic_Games', 'ancient'), ('Olympic_Games', 'held'), ('Olympic_Games', 'games'), ('Olympic_Games', 'country'), ('Olympic_Games', 'every'), ('Olympic_Games', 'years'), ('autumnal', 'summer'), ('summer', 'autumnal'), ('summer', 'warmest'), ('summer', 'summer'), ('summer', 'extends'), ('summer', 'equinox'), ('summer', 'hemisphere'), ('summer', 'solstice'), ('summer', 'northern'), ('summer', 'year'), ('summer', 'season'), ('modern', 'Olympic_Games'), ('net', 'badminton'), ('badminton', 'net'), ('badminton', 'played'), ('badminton', 'long-handled'), ('badminton', 'volley'), ('badminton', 'shuttlecock'), ('badminton', 'light'), ('badminton', 'used'), ('badminton', 'game'), ('badminton', 'rackets'), ('badminton', 'court'), ('warmest', 'summer'), ('played', 'badminton'), ('long-handled', 'badminton'), ('4', 'Olympic_Games'), ('revival', 'Olympic_Games'), ('ancient', 'Olympic_Games'), ('held', 'Olympic_Games'), ('extends', 'summer'), ('games', 'Olympic_Games'), ('volley', 'badminton'), ('country', 'Olympic_Games'), ('shuttlecock', 'badminton'), ('equinox', 'summer'), ('hemisphere', 'summer'), ('solstice', 'summer'), ('northern', 'summer'), ('every', 'Olympic_Games'), ('light', 'badminton'), ('year', 'summer'), ('used', 'badminton'), ('years', 'Olympic_Games'), ('game', 'badminton'), ('rackets', 'badminton'), ('court', 'badminton'), ('season', 'summer')]))
('Core number (sorted) :', [('selected', 2), ('Olympic_Games', 2), ('autumnal', 2), ('summer', 2), ('modern', 2), ('net', 2), ('badminton', 2), ('warmest', 2), ('played', 2), ('long-handled', 2), ('4', 2), ('revival', 2), ('ancient', 2), ('held', 2), ('extends', 2), ('games', 2), ('volley', 2), ('country', 2), ('shuttlecock', 2), ('equinox', 2), ('hemisphere', 2), ('solstice', 2), ('northern', 2), ('every', 2), ('light', 2), ('year', 2), ('used', 2), ('years', 2), ('game', 2), ('rackets', 2), ('court', 2), ('season', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'selected', ',core number=', 2)
('This document belongs to class:', 'Olympic_Games', ',core number=', 2)
('This document belongs to class:', 'autumnal', ',core number=', 2)
('This document belongs to class:', 'summer', ',core number=', 2)
('This document belongs to class:', 'modern', ',core number=', 2)
('This document belongs to class:', 'net', ',core number=', 2)
('This document belongs to class:', 'badminton', ',core number=', 2)
('This document belongs to class:', 'warmest', ',core number=', 2)
('This document belongs to class:', 'played', ',core number=', 2)
('This document belongs to class:', 'long-handled', ',core number=', 2)
('This document belongs to class:', '4', ',core number=', 2)
('This document belongs to class:', 'revival', ',core number=', 2)
('This document belongs to class:', 'ancient', ',core number=', 2)
('This document belongs to class:', 'held', ',core number=', 2)
('This document belongs to class:', 'extends', ',core number=', 2)
('This document belongs to class:', 'games', ',core number=', 2)
('This document belongs to class:', 'volley', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Olympic_Games', 0.0967741935483871), ('badminton', 0.0967741935483871), ('summer', 0.07741935483870968), ('selected', 0.0), ('autumnal', 0.0), ('modern', 0.0), ('net', 0.0), ('warmest', 0.0), ('played', 0.0), ('long-handled', 0.0), ('4', 0.0), ('revival', 0.0), ('ancient', 0.0), ('held', 0.0), ('extends', 0.0), ('games', 0.0), ('volley', 0.0), ('country', 0.0), ('shuttlecock', 0.0), ('equinox', 0.0), ('hemisphere', 0.0), ('solstice', 0.0), ('northern', 0.0), ('every', 0.0), ('light', 0.0), ('year', 0.0), ('used', 0.0), ('years', 0.0), ('game', 0.0), ('rackets', 0.0), ('court', 0.0), ('season', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Olympic_Games', 0.3225806451612903), ('badminton', 0.3225806451612903), ('summer', 0.2903225806451613), ('selected', 0.1697792869269949), ('modern', 0.1697792869269949), ('net', 0.1697792869269949), ('played', 0.1697792869269949), ('long-handled', 0.1697792869269949), ('4', 0.1697792869269949), ('revival', 0.1697792869269949), ('ancient', 0.1697792869269949), ('held', 0.1697792869269949), ('games', 0.1697792869269949), ('volley', 0.1697792869269949), ('country', 0.1697792869269949), ('shuttlecock', 0.1697792869269949), ('every', 0.1697792869269949), ('light', 0.1697792869269949), ('used', 0.1697792869269949), ('years', 0.1697792869269949), ('game', 0.1697792869269949), ('rackets', 0.1697792869269949), ('court', 0.1697792869269949), ('autumnal', 0.1537001897533207), ('warmest', 0.1537001897533207), ('extends', 0.1537001897533207), ('equinox', 0.1537001897533207), ('hemisphere', 0.1537001897533207), ('solstice', 0.1537001897533207), ('northern', 0.1537001897533207), ('year', 0.1537001897533207), ('season', 0.1537001897533207)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Olympic_Games', 0.6451612903225806), ('badminton', 0.6451612903225806), ('summer', 0.5806451612903225), ('selected', 0.06451612903225806), ('autumnal', 0.06451612903225806), ('modern', 0.06451612903225806), ('net', 0.06451612903225806), ('warmest', 0.06451612903225806), ('played', 0.06451612903225806), ('long-handled', 0.06451612903225806), ('4', 0.06451612903225806), ('revival', 0.06451612903225806), ('ancient', 0.06451612903225806), ('held', 0.06451612903225806), ('extends', 0.06451612903225806), ('games', 0.06451612903225806), ('volley', 0.06451612903225806), ('country', 0.06451612903225806), ('shuttlecock', 0.06451612903225806), ('equinox', 0.06451612903225806), ('hemisphere', 0.06451612903225806), ('solstice', 0.06451612903225806), ('northern', 0.06451612903225806), ('every', 0.06451612903225806), ('light', 0.06451612903225806), ('year', 0.06451612903225806), ('used', 0.06451612903225806), ('years', 0.06451612903225806), ('game', 0.06451612903225806), ('rackets', 0.06451612903225806), ('court', 0.06451612903225806), ('season', 0.06451612903225806)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('Olympic_Games', 0.16047538514208112), ('badminton', 0.16047538514208112), ('summer', 0.1461170090151832), ('autumnal', 0.01848699899831298), ('warmest', 0.01848699899831298), ('extends', 0.01848699899831298), ('equinox', 0.01848699899831298), ('hemisphere', 0.01848699899831298), ('solstice', 0.01848699899831298), ('northern', 0.01848699899831298), ('year', 0.01848699899831298), ('season', 0.01848699899831298), ('selected', 0.018327461485791896), ('modern', 0.018327461485791896), ('net', 0.018327461485791896), ('played', 0.018327461485791896), ('long-handled', 0.018327461485791896), ('4', 0.018327461485791896), ('revival', 0.018327461485791896), ('ancient', 0.018327461485791896), ('held', 0.018327461485791896), ('games', 0.018327461485791896), ('volley', 0.018327461485791896), ('country', 0.018327461485791896), ('shuttlecock', 0.018327461485791896), ('every', 0.018327461485791896), ('light', 0.018327461485791896), ('used', 0.018327461485791896), ('years', 0.018327461485791896), ('game', 0.018327461485791896), ('rackets', 0.018327461485791896), ('court', 0.018327461485791896)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('selected', 'Olympic_Games'), ('Olympic_Games', 'selected'), ('Olympic_Games', 'modern'), ('Olympic_Games', '4'), ('Olympic_Games', 'revival'), ('Olympic_Games', 'ancient'), ('Olympic_Games', 'held'), ('Olympic_Games', 'games'), ('Olympic_Games', 'country'), ('Olympic_Games', 'every'), ('Olympic_Games', 'years'), ('autumnal', 'summer'), ('summer', 'autumnal'), ('summer', 'warmest'), ('summer', 'summer'), ('summer', 'extends'), ('summer', 'equinox'), ('summer', 'hemisphere'), ('summer', 'solstice'), ('summer', 'northern'), ('summer', 'year'), ('summer', 'season'), ('modern', 'Olympic_Games'), ('net', 'badminton'), ('badminton', 'net'), ('badminton', 'played'), ('badminton', 'long-handled'), ('badminton', 'volley'), ('badminton', 'shuttlecock'), ('badminton', 'light'), ('badminton', 'used'), ('badminton', 'game'), ('badminton', 'rackets'), ('badminton', 'court'), ('warmest', 'summer'), ('played', 'badminton'), ('long-handled', 'badminton'), ('4', 'Olympic_Games'), ('revival', 'Olympic_Games'), ('ancient', 'Olympic_Games'), ('held', 'Olympic_Games'), ('extends', 'summer'), ('games', 'Olympic_Games'), ('volley', 'badminton'), ('country', 'Olympic_Games'), ('shuttlecock', 'badminton'), ('equinox', 'summer'), ('hemisphere', 'summer'), ('solstice', 'summer'), ('northern', 'summer'), ('every', 'Olympic_Games'), ('light', 'badminton'), ('year', 'summer'), ('used', 'badminton'), ('years', 'Olympic_Games'), ('game', 'badminton'), ('rackets', 'badminton'), ('court', 'badminton'), ('season', 'summer')]
Answer Textgraph  3 : ([('selected', 2), ('Olympic_Games', 2), ('autumnal', 2), ('summer', 2), ('modern', 2), ('net', 2), ('badminton', 2), ('warmest', 2), ('played', 2), ('long-handled', 2), ('4', 2), ('revival', 2), ('ancient', 2), ('held', 2), ('extends', 2), ('games', 2), ('volley', 2), ('country', 2), ('shuttlecock', 2), ('equinox', 2), ('hemisphere', 2), ('solstice', 2), ('northern', 2), ('every', 2), ('light', 2), ('year', 2), ('used', 2), ('years', 2), ('game', 2), ('rackets', 2), ('court', 2), ('season', 2)], [('Olympic_Games', 0.16047538514208112), ('badminton', 0.16047538514208112), ('summer', 0.1461170090151832), ('autumnal', 0.01848699899831298), ('warmest', 0.01848699899831298), ('extends', 0.01848699899831298), ('equinox', 0.01848699899831298), ('hemisphere', 0.01848699899831298), ('solstice', 0.01848699899831298), ('northern', 0.01848699899831298), ('year', 0.01848699899831298), ('season', 0.01848699899831298), ('selected', 0.018327461485791896), ('modern', 0.018327461485791896), ('net', 0.018327461485791896), ('played', 0.018327461485791896), ('long-handled', 0.018327461485791896), ('4', 0.018327461485791896), ('revival', 0.018327461485791896), ('ancient', 0.018327461485791896), ('held', 0.018327461485791896), ('games', 0.018327461485791896), ('volley', 0.018327461485791896), ('country', 0.018327461485791896), ('shuttlecock', 0.018327461485791896), ('every', 0.018327461485791896), ('light', 0.018327461485791896), ('used', 0.018327461485791896), ('years', 0.018327461485791896), ('game', 0.018327461485791896), ('rackets', 0.018327461485791896), ('court', 0.018327461485791896)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.05, 0.05, 0.05], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( selected , selected ): 1.012
Key weight for textgraph edge ( selected , selected ): 4.024
Value weight for textgraph edge ( selected , selected ): 7.036
Query weight for textgraph edge ( selected , Olympic_Games ): 2.0132
Key weight for textgraph edge ( selected , Olympic_Games ): 5.0504
Value weight for textgraph edge ( selected , Olympic_Games ): 8.0876
Query weight for textgraph edge ( selected , autumnal ): 3.0338
Key weight for textgraph edge ( selected , autumnal ): 6.2636
Value weight for textgraph edge ( selected , autumnal ): 9.4934
Query weight for textgraph edge ( Olympic_Games , selected ): 0.11580000000000001
Key weight for textgraph edge ( Olympic_Games , selected ): 0.11580000000000001
Value weight for textgraph edge ( Olympic_Games , selected ): 0.11580000000000001
Query weight for textgraph edge ( Olympic_Games , Olympic_Games ): 0.31758
Key weight for textgraph edge ( Olympic_Games , Olympic_Games ): 0.31758
Value weight for textgraph edge ( Olympic_Games , Olympic_Games ): 0.31758
Query weight for textgraph edge ( Olympic_Games , autumnal ): 0.52147
Key weight for textgraph edge ( Olympic_Games , autumnal ): 0.52147
Value weight for textgraph edge ( Olympic_Games , autumnal ): 0.52147
Query weight for textgraph edge ( autumnal , selected ): 3.02
Key weight for textgraph edge ( autumnal , selected ): 3.02
Value weight for textgraph edge ( autumnal , selected ): 3.02
Query weight for textgraph edge ( autumnal , Olympic_Games ): 4.038
Key weight for textgraph edge ( autumnal , Olympic_Games ): 4.038
Value weight for textgraph edge ( autumnal , Olympic_Games ): 4.038
Query weight for textgraph edge ( autumnal , autumnal ): 5.187
Key weight for textgraph edge ( autumnal , autumnal ): 5.187
Value weight for textgraph edge ( autumnal , autumnal ): 5.187
wikipedia search result: 1992 United States men's Olympic basketball team
wikipedia search result summary: The 1992 United States men's Olympic basketball team, nicknamed the "Dream Team", was the first American Olympic team to feature active professional players from the National Basketball Association (NBA). The team has been described by some journalists as the greatest sports team ever assembled.At the 1992 Summer Olympics held in Barcelona, the team defeated its opponents by an average of 44 points en route to the gold medal against Croatia.The team was collectively inducted into the U.S. Olympic Hall of Fame in 2009, the Naismith Memorial Basketball Hall of Fame in 2010, and the FIBA Hall of Fame in 2017. The Naismith Hall calls the team "the greatest collection of basketball talent on the planet".  In addition to the team induction, 11 players and three coaches have also been inducted individually into the Naismith Memorial Hall of Fame.


2
defaultdict(<class 'list'>, {'common': ['unite'], 'form': ['team'], 'foreign': ['Department_of_State'], 'force': ['work_force'], 'ball': ['basketball'], 'inflated': ['basketball'], 'department': ['Department_of_State'], 'Games': ['Olympic'], 'basketball': ['basketball'], 'playing': ['basketball'], 'United': ['Department_of_State'], 'sets': ['Department_of_State'], 'workers': ['work_force'], 'belief': ['unite'], 'Olympic': ['Olympic'], 'purpose': ['unite'], 'act': ['unite'], 'unite': ['unite'], 'maintains': ['Department_of_State'], 'available': ['work_force'], 'team': ['team'], 'policies': ['Department_of_State'], 'federal': ['Department_of_State'], 'used': ['basketball'], 'concert': ['unite'], 'relating': ['Olympic'], 'States': ['Department_of_State']})
('definitiongraph networkx edges:', OutEdgeView([('common', 'unite'), ('unite', 'common'), ('unite', 'belief'), ('unite', 'purpose'), ('unite', 'act'), ('unite', 'unite'), ('unite', 'concert'), ('form', 'team'), ('team', 'form'), ('team', 'team'), ('foreign', 'Department_of_State'), ('Department_of_State', 'foreign'), ('Department_of_State', 'department'), ('Department_of_State', 'United'), ('Department_of_State', 'sets'), ('Department_of_State', 'maintains'), ('Department_of_State', 'policies'), ('Department_of_State', 'federal'), ('Department_of_State', 'States'), ('force', 'work_force'), ('work_force', 'force'), ('work_force', 'workers'), ('work_force', 'available'), ('ball', 'basketball'), ('basketball', 'ball'), ('basketball', 'inflated'), ('basketball', 'basketball'), ('basketball', 'playing'), ('basketball', 'used'), ('inflated', 'basketball'), ('department', 'Department_of_State'), ('Games', 'Olympic'), ('Olympic', 'Games'), ('Olympic', 'Olympic'), ('Olympic', 'relating'), ('playing', 'basketball'), ('United', 'Department_of_State'), ('sets', 'Department_of_State'), ('workers', 'work_force'), ('belief', 'unite'), ('purpose', 'unite'), ('act', 'unite'), ('maintains', 'Department_of_State'), ('available', 'work_force'), ('policies', 'Department_of_State'), ('federal', 'Department_of_State'), ('used', 'basketball'), ('concert', 'unite'), ('relating', 'Olympic'), ('States', 'Department_of_State')]))
('Core number (sorted) :', [('common', 2), ('unite', 2), ('form', 2), ('team', 2), ('foreign', 2), ('Department_of_State', 2), ('force', 2), ('work_force', 2), ('ball', 2), ('basketball', 2), ('inflated', 2), ('department', 2), ('Games', 2), ('Olympic', 2), ('playing', 2), ('United', 2), ('sets', 2), ('workers', 2), ('belief', 2), ('purpose', 2), ('act', 2), ('maintains', 2), ('available', 2), ('policies', 2), ('federal', 2), ('used', 2), ('concert', 2), ('relating', 2), ('States', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'common', ',core number=', 2)
('This document belongs to class:', 'unite', ',core number=', 2)
('This document belongs to class:', 'form', ',core number=', 2)
('This document belongs to class:', 'team', ',core number=', 2)
('This document belongs to class:', 'foreign', ',core number=', 2)
('This document belongs to class:', 'Department_of_State', ',core number=', 2)
('This document belongs to class:', 'force', ',core number=', 2)
('This document belongs to class:', 'work_force', ',core number=', 2)
('This document belongs to class:', 'ball', ',core number=', 2)
('This document belongs to class:', 'basketball', ',core number=', 2)
('This document belongs to class:', 'inflated', ',core number=', 2)
('This document belongs to class:', 'department', ',core number=', 2)
('This document belongs to class:', 'Games', ',core number=', 2)
('This document belongs to class:', 'Olympic', ',core number=', 2)
('This document belongs to class:', 'playing', ',core number=', 2)
('This document belongs to class:', 'United', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Department_of_State', 0.07407407407407407), ('unite', 0.026455026455026454), ('basketball', 0.015873015873015872), ('work_force', 0.007936507936507936), ('Olympic', 0.0026455026455026454), ('common', 0.0), ('form', 0.0), ('team', 0.0), ('foreign', 0.0), ('force', 0.0), ('ball', 0.0), ('inflated', 0.0), ('department', 0.0), ('Games', 0.0), ('playing', 0.0), ('United', 0.0), ('sets', 0.0), ('workers', 0.0), ('belief', 0.0), ('purpose', 0.0), ('act', 0.0), ('maintains', 0.0), ('available', 0.0), ('policies', 0.0), ('federal', 0.0), ('used', 0.0), ('concert', 0.0), ('relating', 0.0), ('States', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Department_of_State', 0.2857142857142857), ('unite', 0.17857142857142858), ('foreign', 0.15238095238095237), ('department', 0.15238095238095237), ('United', 0.15238095238095237), ('sets', 0.15238095238095237), ('maintains', 0.15238095238095237), ('policies', 0.15238095238095237), ('federal', 0.15238095238095237), ('States', 0.15238095238095237), ('basketball', 0.14285714285714285), ('work_force', 0.10714285714285714), ('common', 0.09920634920634921), ('belief', 0.09920634920634921), ('purpose', 0.09920634920634921), ('act', 0.09920634920634921), ('concert', 0.09920634920634921), ('ball', 0.08163265306122448), ('inflated', 0.08163265306122448), ('playing', 0.08163265306122448), ('used', 0.08163265306122448), ('Olympic', 0.07142857142857142), ('force', 0.06428571428571428), ('workers', 0.06428571428571428), ('available', 0.06428571428571428), ('Games', 0.047619047619047616), ('relating', 0.047619047619047616), ('form', 0.03571428571428571), ('team', 0.03571428571428571)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Department_of_State', 0.5714285714285714), ('unite', 0.3571428571428571), ('basketball', 0.2857142857142857), ('work_force', 0.21428571428571427), ('Olympic', 0.14285714285714285), ('common', 0.07142857142857142), ('form', 0.07142857142857142), ('team', 0.07142857142857142), ('foreign', 0.07142857142857142), ('force', 0.07142857142857142), ('ball', 0.07142857142857142), ('inflated', 0.07142857142857142), ('department', 0.07142857142857142), ('Games', 0.07142857142857142), ('playing', 0.07142857142857142), ('United', 0.07142857142857142), ('sets', 0.07142857142857142), ('workers', 0.07142857142857142), ('belief', 0.07142857142857142), ('purpose', 0.07142857142857142), ('act', 0.07142857142857142), ('maintains', 0.07142857142857142), ('available', 0.07142857142857142), ('policies', 0.07142857142857142), ('federal', 0.07142857142857142), ('used', 0.07142857142857142), ('concert', 0.07142857142857142), ('relating', 0.07142857142857142), ('States', 0.07142857142857142)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('Department_of_State', 0.14538433053042074), ('unite', 0.09785508542625027), ('basketball', 0.0820120037248601), ('work_force', 0.06616892202346995), ('Olympic', 0.05032584032207979), ('form', 0.034482758620689655), ('team', 0.034482758620689655), ('Games', 0.026561217769994573), ('relating', 0.026561217769994573), ('force', 0.023920704153096214), ('workers', 0.023920704153096214), ('available', 0.023920704153096214), ('ball', 0.022600447344647036), ('inflated', 0.022600447344647036), ('playing', 0.022600447344647036), ('used', 0.022600447344647036), ('common', 0.021808293259577533), ('belief', 0.021808293259577533), ('purpose', 0.021808293259577533), ('act', 0.021808293259577533), ('concert', 0.021808293259577533), ('foreign', 0.02062006213197327), ('department', 0.02062006213197327), ('United', 0.02062006213197327), ('sets', 0.02062006213197327), ('maintains', 0.02062006213197327), ('policies', 0.02062006213197327), ('federal', 0.02062006213197327), ('States', 0.02062006213197327)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('common', 'unite'), ('unite', 'common'), ('unite', 'belief'), ('unite', 'purpose'), ('unite', 'act'), ('unite', 'unite'), ('unite', 'concert'), ('form', 'team'), ('team', 'form'), ('team', 'team'), ('foreign', 'Department_of_State'), ('Department_of_State', 'foreign'), ('Department_of_State', 'department'), ('Department_of_State', 'United'), ('Department_of_State', 'sets'), ('Department_of_State', 'maintains'), ('Department_of_State', 'policies'), ('Department_of_State', 'federal'), ('Department_of_State', 'States'), ('force', 'work_force'), ('work_force', 'force'), ('work_force', 'workers'), ('work_force', 'available'), ('ball', 'basketball'), ('basketball', 'ball'), ('basketball', 'inflated'), ('basketball', 'basketball'), ('basketball', 'playing'), ('basketball', 'used'), ('inflated', 'basketball'), ('department', 'Department_of_State'), ('Games', 'Olympic'), ('Olympic', 'Games'), ('Olympic', 'Olympic'), ('Olympic', 'relating'), ('playing', 'basketball'), ('United', 'Department_of_State'), ('sets', 'Department_of_State'), ('workers', 'work_force'), ('belief', 'unite'), ('purpose', 'unite'), ('act', 'unite'), ('maintains', 'Department_of_State'), ('available', 'work_force'), ('policies', 'Department_of_State'), ('federal', 'Department_of_State'), ('used', 'basketball'), ('concert', 'unite'), ('relating', 'Olympic'), ('States', 'Department_of_State')]
Answer Textgraph  4 : ([('common', 2), ('unite', 2), ('form', 2), ('team', 2), ('foreign', 2), ('Department_of_State', 2), ('force', 2), ('work_force', 2), ('ball', 2), ('basketball', 2), ('inflated', 2), ('department', 2), ('Games', 2), ('Olympic', 2), ('playing', 2), ('United', 2), ('sets', 2), ('workers', 2), ('belief', 2), ('purpose', 2), ('act', 2), ('maintains', 2), ('available', 2), ('policies', 2), ('federal', 2), ('used', 2), ('concert', 2), ('relating', 2), ('States', 2)], [('Department_of_State', 0.14538433053042074), ('unite', 0.09785508542625027), ('basketball', 0.0820120037248601), ('work_force', 0.06616892202346995), ('Olympic', 0.05032584032207979), ('form', 0.034482758620689655), ('team', 0.034482758620689655), ('Games', 0.026561217769994573), ('relating', 0.026561217769994573), ('force', 0.023920704153096214), ('workers', 0.023920704153096214), ('available', 0.023920704153096214), ('ball', 0.022600447344647036), ('inflated', 0.022600447344647036), ('playing', 0.022600447344647036), ('used', 0.022600447344647036), ('common', 0.021808293259577533), ('belief', 0.021808293259577533), ('purpose', 0.021808293259577533), ('act', 0.021808293259577533), ('concert', 0.021808293259577533), ('foreign', 0.02062006213197327), ('department', 0.02062006213197327), ('United', 0.02062006213197327), ('sets', 0.02062006213197327), ('maintains', 0.02062006213197327), ('policies', 0.02062006213197327), ('federal', 0.02062006213197327), ('States', 0.02062006213197327)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11513333333333334
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31618
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights: [0.11513333333333334, 0.31618, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.08333333333333333, 0.08333333333333333, 0.08333333333333333]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51637
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15133333333333335, 0.1618, 0.1637]
weights updated after Gradient :  [0.11513333333333334, 0.31618, 0.51637]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11513333333333334, 0.31618, 0.51637], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( common , common ): 1.012
Key weight for textgraph edge ( common , common ): 4.024
Value weight for textgraph edge ( common , common ): 7.036
Query weight for textgraph edge ( common , unite ): 2.0132
Key weight for textgraph edge ( common , unite ): 5.0504
Value weight for textgraph edge ( common , unite ): 8.0876
Query weight for textgraph edge ( common , form ): 3.0338
Key weight for textgraph edge ( common , form ): 6.2636
Value weight for textgraph edge ( common , form ): 9.4934
Query weight for textgraph edge ( unite , common ): 0.11513333333333334
Key weight for textgraph edge ( unite , common ): 0.11513333333333334
Value weight for textgraph edge ( unite , common ): 0.11513333333333334
Query weight for textgraph edge ( unite , unite ): 0.31618
Key weight for textgraph edge ( unite , unite ): 0.31618
Value weight for textgraph edge ( unite , unite ): 0.31618
Query weight for textgraph edge ( unite , form ): 0.51637
Key weight for textgraph edge ( unite , form ): 0.51637
Value weight for textgraph edge ( unite , form ): 0.51637
Query weight for textgraph edge ( form , common ): 3.02
Key weight for textgraph edge ( form , common ): 3.02
Value weight for textgraph edge ( form , common ): 3.02
Query weight for textgraph edge ( form , unite ): 4.038
Key weight for textgraph edge ( form , unite ): 4.038
Value weight for textgraph edge ( form , unite ): 4.038
Query weight for textgraph edge ( form , form ): 5.187
Key weight for textgraph edge ( form , form ): 5.187
Value weight for textgraph edge ( form , form ): 5.187
wikipedia search result: Olympic Games
wikipedia search result summary: The modern Olympic Games or Olympics (French: Jeux olympiques) are the leading international sporting events featuring summer and winter sports competitions in which thousands of athletes from around the world participate in a variety of competitions. The Olympic Games are considered the world's foremost sports competition with more than 200 nations participating. The Olympic Games are normally held every four years, and since 1994, has alternated between the Summer and Winter Olympics every two years during the four-year period.
Their creation was inspired by the ancient Olympic Games (Ancient Greek: Ὀλυμπιακοί Ἀγῶνες), held in Olympia, Greece from the 8th century BC to the 4th century AD. Baron Pierre de Coubertin founded the International Olympic Committee (IOC) in 1894, leading to the first modern Games in Athens in 1896. The IOC is the governing body of the Olympic Movement, with the Olympic Charter defining its structure and authority.
The evolution of the Olympic Movement during the 20th and 21st centuries has resulted in several changes to the Olympic Games. Some of these adjustments include the creation of the Winter Olympic Games for snow and ice sports, the Paralympic Games for athletes with disabilities, the Youth Olympic Games for athletes aged 14 to 18, the five Continental games (Pan American, African, Asian, European, and Pacific), and the World Games for sports that are not contested in the Olympic Games. The IOC also endorses the Deaflympics and the Special Olympics. The IOC has needed to adapt to a variety of economic, political, and technological advancements. The abuse of amateur rules by the Eastern Bloc nations prompted the IOC to shift away from pure amateurism, as envisioned by Coubertin, to the acceptance of professional athletes participating at the Games. The growing importance of mass media has created the issue of corporate sponsorship and general commercialisation of the Games. World wars led to the cancellation of the 1916, 1940, and 1944 Olympics; large-scale boycotts during the Cold War limited participation in the 1980 and 1984 Olympics; and the 2020 Olympics were postponed until 2021 as a result of the COVID-19 pandemic.
The Olympic Movement consists of international sports federations (IFs), National Olympic Committees (NOCs), and organising committees for each specific Olympic Games. As the decision-making body, the IOC is responsible for choosing the host city for each Games, and organises and funds the Games according to the Olympic Charter. The IOC also determines the Olympic programme, consisting of the sports to be contested at the Games. There are several Olympic rituals and symbols, such as the Olympic flag and torch, as well as the opening and closing ceremonies. Over 14,000 athletes competed at the 2016 Summer Olympics and 2018 Winter Olympics combined, in 35 different sports and over 400 events. The first, second, and third-place finishers in each event receive Olympic medals: gold, silver, and bronze, respectively.
The Games have grown so much that nearly every nation is now represented; colonies and overseas territories are allowed to field their own teams. This growth has created numerous challenges and controversies, including boycotts, doping, bribery, and terrorism. Every two years the Olympics and its media exposure provide athletes with the chance to attain national and sometimes international fame. The Games also provide an opportunity for the host city and country to showcase themselves to the world.
2
defaultdict(<class 'list'>, {'Games': ['Olympic'], 'contest': ['game'], 'relating': ['Olympic'], 'Olympic': ['Olympic'], 'determine': ['game'], 'winner': ['game'], 'rules': ['game']})
('definitiongraph networkx edges:', OutEdgeView([('Games', 'Olympic'), ('Olympic', 'Games'), ('Olympic', 'relating'), ('Olympic', 'Olympic'), ('contest', 'game'), ('game', 'contest'), ('game', 'determine'), ('game', 'winner'), ('game', 'rules'), ('relating', 'Olympic'), ('determine', 'game'), ('winner', 'game'), ('rules', 'game')]))
('Core number (sorted) :', [('Games', 2), ('Olympic', 2), ('contest', 2), ('game', 2), ('relating', 2), ('determine', 2), ('winner', 2), ('rules', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'Games', ',core number=', 2)
('This document belongs to class:', 'Olympic', ',core number=', 2)
('This document belongs to class:', 'contest', ',core number=', 2)
('This document belongs to class:', 'game', ',core number=', 2)
('This document belongs to class:', 'relating', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('game', 0.2857142857142857), ('Olympic', 0.047619047619047616), ('Games', 0.0), ('contest', 0.0), ('relating', 0.0), ('determine', 0.0), ('winner', 0.0), ('rules', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('game', 0.5714285714285714), ('contest', 0.32653061224489793), ('determine', 0.32653061224489793), ('winner', 0.32653061224489793), ('rules', 0.32653061224489793), ('Olympic', 0.2857142857142857), ('Games', 0.19047619047619047), ('relating', 0.19047619047619047)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('game', 1.1428571428571428), ('Olympic', 0.5714285714285714), ('Games', 0.2857142857142857), ('contest', 0.2857142857142857), ('relating', 0.2857142857142857), ('determine', 0.2857142857142857), ('winner', 0.2857142857142857), ('rules', 0.2857142857142857)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('game', 0.29729851029517823), ('Olympic', 0.18243283676505945), ('Games', 0.09628358161747029), ('relating', 0.09628358161747029), ('contest', 0.08192537242620543), ('determine', 0.08192537242620543), ('winner', 0.08192537242620543), ('rules', 0.08192537242620543)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('Games', 'Olympic'), ('Olympic', 'Games'), ('Olympic', 'relating'), ('Olympic', 'Olympic'), ('contest', 'game'), ('game', 'contest'), ('game', 'determine'), ('game', 'winner'), ('game', 'rules'), ('relating', 'Olympic'), ('determine', 'game'), ('winner', 'game'), ('rules', 'game')]
Answer Textgraph  5 : ([('Games', 2), ('Olympic', 2), ('contest', 2), ('game', 2), ('relating', 2), ('determine', 2), ('winner', 2), ('rules', 2)], [('game', 0.29729851029517823), ('Olympic', 0.18243283676505945), ('Games', 0.09628358161747029), ('relating', 0.09628358161747029), ('contest', 0.08192537242620543), ('determine', 0.08192537242620543), ('winner', 0.08192537242620543), ('rules', 0.08192537242620543)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.16666666666666666, 0.16666666666666666, 0.16666666666666666], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11346666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31268
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.31268, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.50362
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights updated after Gradient :  [0.11346666666666667, 0.31268, 0.50362]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11346666666666667, 0.31268, 0.50362], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11346666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31268
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.31268, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.50362
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights updated after Gradient :  [0.11346666666666667, 0.31268, 0.50362]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11346666666666667, 0.31268, 0.50362], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11346666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31268
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.31268, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.50362
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights updated after Gradient :  [0.11346666666666667, 0.31268, 0.50362]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11346666666666667, 0.31268, 0.50362], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( Games , Games ): 1.012
Key weight for textgraph edge ( Games , Games ): 4.024
Value weight for textgraph edge ( Games , Games ): 7.036
Query weight for textgraph edge ( Games , Olympic ): 2.0132
Key weight for textgraph edge ( Games , Olympic ): 5.0504
Value weight for textgraph edge ( Games , Olympic ): 8.0876
Query weight for textgraph edge ( Games , contest ): 3.0338
Key weight for textgraph edge ( Games , contest ): 6.2636
Value weight for textgraph edge ( Games , contest ): 9.4934
Query weight for textgraph edge ( Olympic , Games ): 0.11346666666666667
Key weight for textgraph edge ( Olympic , Games ): 0.11346666666666667
Value weight for textgraph edge ( Olympic , Games ): 0.11346666666666667
Query weight for textgraph edge ( Olympic , Olympic ): 0.31268
Key weight for textgraph edge ( Olympic , Olympic ): 0.31268
Value weight for textgraph edge ( Olympic , Olympic ): 0.31268
Query weight for textgraph edge ( Olympic , contest ): 0.50362
Key weight for textgraph edge ( Olympic , contest ): 0.50362
Value weight for textgraph edge ( Olympic , contest ): 0.50362
Query weight for textgraph edge ( contest , Games ): 3.02
Key weight for textgraph edge ( contest , Games ): 3.02
Value weight for textgraph edge ( contest , Games ): 3.02
Query weight for textgraph edge ( contest , Olympic ): 4.038
Key weight for textgraph edge ( contest , Olympic ): 4.038
Value weight for textgraph edge ( contest , Olympic ): 4.038
Query weight for textgraph edge ( contest , contest ): 5.187
Key weight for textgraph edge ( contest , contest ): 5.187
Value weight for textgraph edge ( contest , contest ): 5.187
wikipedia search result: Winter Olympic Games
wikipedia search result summary: The Winter Olympic Games (French: Jeux olympiques d'hiver) is a major international multi-sport event held once every four years for sports practiced on snow and ice. The first Winter Olympic Games, the 1924 Winter Olympics, were held in Chamonix, France. The modern Olympic Games were inspired by the ancient Olympic Games, which were held in Olympia, Greece, from the 8th century BC to the 4th century AD. Baron Pierre de Coubertin founded the International Olympic Committee (IOC) in 1894, leading to the first modern Summer Olympic Games in Athens, Greece in 1896. The IOC is the governing body of the Olympic Movement, with the Olympic Charter defining its structure and authority.
The original five Winter Olympic Sports (consisting of nine disciplines) were bobsleigh, curling, ice hockey, Nordic skiing (consisting of the disciplines military patrol, cross-country skiing, Nordic combined, and ski jumping), and skating (consisting of the disciplines figure skating and speed skating). The Games were held every four years from 1924 to 1936, interrupted in 1940 and 1944 by World War II, and resumed in 1948. Until 1992, the Summer Olympic Games and the Winter Olympic Games were held in the same year, and in accordance with the 1986 decision by the IOC to place the Summer Olympic Games and the Winter Olympic Games on separate four-year cycles in alternating even-numbered years, the next Winter Olympic Games after 1992 were held in 1994.
The Winter Olympic Games have evolved since their inception. Sports and disciplines have been added and some of them, such as alpine skiing, luge, short track speed skating, freestyle skiing, skeleton, and snowboarding, have earned a permanent spot on the Olympic program. Some others, including curling and bobsleigh, have been discontinued and later reintroduced; others have been permanently discontinued, such as military patrol, though the modern Winter Olympic sport of biathlon is descended from it. Still others, such as speed skiing, bandy and skijoring, were demonstration sports but never incorporated as Olympic sports. The rise of television as a global medium for communication enhanced the profile of the Games. It generated income via the sale of broadcast rights and advertising, which has become lucrative for the IOC. This allowed outside interests, such as television companies and corporate sponsors, to exert influence. The IOC has had to address numerous criticisms over the decades like internal scandals, the use of performance-enhancing drugs by Winter Olympians, as well as a political boycott of the Winter Olympic Games. Countries have used the Winter Olympic Games as well as the Summer Olympic Games to proclaim the superiority of their political systems.
The Winter Olympic Games have been hosted on three continents by thirteen countries. They have been held four times in the United States (1932, 1960, 1980, and 2002), three times in France (1924, 1968, and 1992) and twice each in Austria (1964 and 1976), Canada (1988 and 2010), Japan (1972 and 1998), Italy (1956 and 2006), Norway (1952 and 1994) and Switzerland (1928 and 1948). Also, the Winter Olympic Games have been held just once each in Germany (1936), Yugoslavia (1984), Russia (2014), South Korea (2018), and China (2022). The IOC has selected Italian cities of Milan and Cortina d'Ampezzo to host the 2026 Winter Olympics. As of 2018, no city in the Southern Hemisphere has applied to host the cold-weather-dependent Winter Olympic Games, which are held in February.
As of 2022, twelve countries have participated in every Winter Olympic Games – Austria, Canada, Finland, France, Great Britain, Hungary, Italy, Norway, Poland, Sweden, Switzerland and the United States. Also, Czechoslovakia participated in all Winter Olympic Games before its dissolution and its successors, Czech Republic and Slovakia have participated in all Winter Games thereafter. Six of these countries have won medals at every Winter Olympic Games – Austria, Canada, Finland, Norway, Sweden, and the United States. The only country to have won a gold medal at every Winter Olympic Games is the United States. Norway leads the all-time Olympic Games medal table for the Winter Olympic Games. When including defunct states, Germany (comprising the former countries of West Germany and East Germany) leads, followed by Norway, Russia (including the former Soviet Union), and the United States.
2
defaultdict(<class 'list'>, {'Games': ['Olympic'], 'winter': ['winter'], 'determine': ['game'], 'extends': ['winter'], 'rules': ['game'], 'winner': ['game'], 'coldest': ['winter'], 'Olympic': ['Olympic'], 'equinox': ['winter'], 'vernal': ['winter'], 'hemisphere': ['winter'], 'solstice': ['winter'], 'northern': ['winter'], 'year': ['winter'], 'contest': ['game'], 'relating': ['Olympic'], 'season': ['winter']})
('definitiongraph networkx edges:', OutEdgeView([('Games', 'Olympic'), ('Olympic', 'Games'), ('Olympic', 'Olympic'), ('Olympic', 'relating'), ('winter', 'winter'), ('winter', 'extends'), ('winter', 'coldest'), ('winter', 'equinox'), ('winter', 'vernal'), ('winter', 'hemisphere'), ('winter', 'solstice'), ('winter', 'northern'), ('winter', 'year'), ('winter', 'season'), ('determine', 'game'), ('game', 'determine'), ('game', 'rules'), ('game', 'winner'), ('game', 'contest'), ('extends', 'winter'), ('rules', 'game'), ('winner', 'game'), ('coldest', 'winter'), ('equinox', 'winter'), ('vernal', 'winter'), ('hemisphere', 'winter'), ('solstice', 'winter'), ('northern', 'winter'), ('year', 'winter'), ('contest', 'game'), ('relating', 'Olympic'), ('season', 'winter')]))
('Core number (sorted) :', [('Games', 2), ('Olympic', 2), ('winter', 2), ('determine', 2), ('game', 2), ('extends', 2), ('rules', 2), ('winner', 2), ('coldest', 2), ('equinox', 2), ('vernal', 2), ('hemisphere', 2), ('solstice', 2), ('northern', 2), ('year', 2), ('contest', 2), ('relating', 2), ('season', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'Games', ',core number=', 2)
('This document belongs to class:', 'Olympic', ',core number=', 2)
('This document belongs to class:', 'winter', ',core number=', 2)
('This document belongs to class:', 'determine', ',core number=', 2)
('This document belongs to class:', 'game', ',core number=', 2)
('This document belongs to class:', 'extends', ',core number=', 2)
('This document belongs to class:', 'rules', ',core number=', 2)
('This document belongs to class:', 'winner', ',core number=', 2)
('This document belongs to class:', 'coldest', ',core number=', 2)
('This document belongs to class:', 'equinox', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('winter', 0.2647058823529412), ('game', 0.044117647058823525), ('Olympic', 0.007352941176470588), ('Games', 0.0), ('determine', 0.0), ('extends', 0.0), ('rules', 0.0), ('winner', 0.0), ('coldest', 0.0), ('equinox', 0.0), ('vernal', 0.0), ('hemisphere', 0.0), ('solstice', 0.0), ('northern', 0.0), ('year', 0.0), ('contest', 0.0), ('relating', 0.0), ('season', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('winter', 0.5294117647058824), ('extends', 0.28027681660899656), ('coldest', 0.28027681660899656), ('equinox', 0.28027681660899656), ('vernal', 0.28027681660899656), ('hemisphere', 0.28027681660899656), ('solstice', 0.28027681660899656), ('northern', 0.28027681660899656), ('year', 0.28027681660899656), ('season', 0.28027681660899656), ('game', 0.23529411764705882), ('determine', 0.13445378151260504), ('rules', 0.13445378151260504), ('winner', 0.13445378151260504), ('contest', 0.13445378151260504), ('Olympic', 0.11764705882352941), ('Games', 0.0784313725490196), ('relating', 0.0784313725490196)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('winter', 1.0588235294117647), ('game', 0.47058823529411764), ('Olympic', 0.23529411764705882), ('Games', 0.11764705882352941), ('determine', 0.11764705882352941), ('extends', 0.11764705882352941), ('rules', 0.11764705882352941), ('winner', 0.11764705882352941), ('coldest', 0.11764705882352941), ('equinox', 0.11764705882352941), ('vernal', 0.11764705882352941), ('hemisphere', 0.11764705882352941), ('solstice', 0.11764705882352941), ('northern', 0.11764705882352941), ('year', 0.11764705882352941), ('contest', 0.11764705882352941), ('relating', 0.11764705882352941), ('season', 0.11764705882352941)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('winter', 0.25976251380172405), ('game', 0.1321331648978688), ('Olympic', 0.08108142533632665), ('Games', 0.04279262066517002), ('relating', 0.04279262066517002), ('determine', 0.036411153219977246), ('rules', 0.036411153219977246), ('winner', 0.036411153219977246), ('contest', 0.036411153219977246), ('extends', 0.03286589352820349), ('coldest', 0.03286589352820349), ('equinox', 0.03286589352820349), ('vernal', 0.03286589352820349), ('hemisphere', 0.03286589352820349), ('solstice', 0.03286589352820349), ('northern', 0.03286589352820349), ('year', 0.03286589352820349), ('season', 0.03286589352820349)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('Games', 'Olympic'), ('Olympic', 'Games'), ('Olympic', 'Olympic'), ('Olympic', 'relating'), ('winter', 'winter'), ('winter', 'extends'), ('winter', 'coldest'), ('winter', 'equinox'), ('winter', 'vernal'), ('winter', 'hemisphere'), ('winter', 'solstice'), ('winter', 'northern'), ('winter', 'year'), ('winter', 'season'), ('determine', 'game'), ('game', 'determine'), ('game', 'rules'), ('game', 'winner'), ('game', 'contest'), ('extends', 'winter'), ('rules', 'game'), ('winner', 'game'), ('coldest', 'winter'), ('equinox', 'winter'), ('vernal', 'winter'), ('hemisphere', 'winter'), ('solstice', 'winter'), ('northern', 'winter'), ('year', 'winter'), ('contest', 'game'), ('relating', 'Olympic'), ('season', 'winter')]
Answer Textgraph  6 : ([('Games', 2), ('Olympic', 2), ('winter', 2), ('determine', 2), ('game', 2), ('extends', 2), ('rules', 2), ('winner', 2), ('coldest', 2), ('equinox', 2), ('vernal', 2), ('hemisphere', 2), ('solstice', 2), ('northern', 2), ('year', 2), ('contest', 2), ('relating', 2), ('season', 2)], [('winter', 0.25976251380172405), ('game', 0.1321331648978688), ('Olympic', 0.08108142533632665), ('Games', 0.04279262066517002), ('relating', 0.04279262066517002), ('determine', 0.036411153219977246), ('rules', 0.036411153219977246), ('winner', 0.036411153219977246), ('contest', 0.036411153219977246), ('extends', 0.03286589352820349), ('coldest', 0.03286589352820349), ('equinox', 0.03286589352820349), ('vernal', 0.03286589352820349), ('hemisphere', 0.03286589352820349), ('solstice', 0.03286589352820349), ('northern', 0.03286589352820349), ('year', 0.03286589352820349), ('season', 0.03286589352820349)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.16666666666666666, 0.16666666666666666, 0.16666666666666666], [0.05, 0.05, 0.05]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11346666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31268
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.31268, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.50362
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights updated after Gradient :  [0.11346666666666667, 0.31268, 0.50362]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.029
LinearPerceptronGradient() weight update iteration: deltaw =  [0.29, 0.569, 2.5584999999999996]
weights: [3.029, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.0569
LinearPerceptronGradient() weight update iteration: deltaw =  [0.29, 0.569, 2.5584999999999996]
weights: [3.029, 4.0569, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.25585
LinearPerceptronGradient() weight update iteration: deltaw =  [0.29, 0.569, 2.5584999999999996]
weights updated after Gradient :  [3.029, 4.0569, 5.25585]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11346666666666667, 0.31268, 0.50362], [3.029, 4.0569, 5.25585]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11346666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31268
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.31268, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.50362
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights updated after Gradient :  [0.11346666666666667, 0.31268, 0.50362]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.029
LinearPerceptronGradient() weight update iteration: deltaw =  [0.29, 0.569, 2.5584999999999996]
weights: [3.029, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.0569
LinearPerceptronGradient() weight update iteration: deltaw =  [0.29, 0.569, 2.5584999999999996]
weights: [3.029, 4.0569, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.25585
LinearPerceptronGradient() weight update iteration: deltaw =  [0.29, 0.569, 2.5584999999999996]
weights updated after Gradient :  [3.029, 4.0569, 5.25585]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11346666666666667, 0.31268, 0.50362], [3.029, 4.0569, 5.25585]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11346666666666667
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31268
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights: [0.11346666666666667, 0.31268, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.50362
LinearPerceptronGradient() weight update iteration: deltaw =  [0.13466666666666668, 0.12680000000000002, 0.03620000000000004]
weights updated after Gradient :  [0.11346666666666667, 0.31268, 0.50362]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.029
LinearPerceptronGradient() weight update iteration: deltaw =  [0.29, 0.569, 2.5584999999999996]
weights: [3.029, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.0569
LinearPerceptronGradient() weight update iteration: deltaw =  [0.29, 0.569, 2.5584999999999996]
weights: [3.029, 4.0569, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.25585
LinearPerceptronGradient() weight update iteration: deltaw =  [0.29, 0.569, 2.5584999999999996]
weights updated after Gradient :  [3.029, 4.0569, 5.25585]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11346666666666667, 0.31268, 0.50362], [3.029, 4.0569, 5.25585]]
Query weight for textgraph edge ( Games , Games ): 1.012
Key weight for textgraph edge ( Games , Games ): 4.024
Value weight for textgraph edge ( Games , Games ): 7.036
Query weight for textgraph edge ( Games , Olympic ): 2.0132
Key weight for textgraph edge ( Games , Olympic ): 5.0504
Value weight for textgraph edge ( Games , Olympic ): 8.0876
Query weight for textgraph edge ( Games , winter ): 3.0338
Key weight for textgraph edge ( Games , winter ): 6.2636
Value weight for textgraph edge ( Games , winter ): 9.4934
Query weight for textgraph edge ( Olympic , Games ): 0.11346666666666667
Key weight for textgraph edge ( Olympic , Games ): 0.11346666666666667
Value weight for textgraph edge ( Olympic , Games ): 0.11346666666666667
Query weight for textgraph edge ( Olympic , Olympic ): 0.31268
Key weight for textgraph edge ( Olympic , Olympic ): 0.31268
Value weight for textgraph edge ( Olympic , Olympic ): 0.31268
Query weight for textgraph edge ( Olympic , winter ): 0.50362
Key weight for textgraph edge ( Olympic , winter ): 0.50362
Value weight for textgraph edge ( Olympic , winter ): 0.50362
Query weight for textgraph edge ( winter , Games ): 3.029
Key weight for textgraph edge ( winter , Games ): 3.029
Value weight for textgraph edge ( winter , Games ): 3.029
Query weight for textgraph edge ( winter , Olympic ): 4.0569
Key weight for textgraph edge ( winter , Olympic ): 4.0569
Value weight for textgraph edge ( winter , Olympic ): 4.0569
Query weight for textgraph edge ( winter , winter ): 5.25585
Key weight for textgraph edge ( winter , winter ): 5.25585
Value weight for textgraph edge ( winter , winter ): 5.25585
wikipedia search result: Tennis at the 1992 Summer Olympics – Men's singles
Exception
2
defaultdict(<class 'list'>, {'modern': ['Olympic_Games'], 'warmest': ['summer'], 'force': ['work_force'], 'ball': ['tennis'], 'badminton': ['singles'], 'hit': ['tennis'], 'summer': ['summer'], 'extends': ['summer'], 'games': ['Olympic_Games'], 'side': ['singles'], 'four': ['tennis'], 'available': ['work_force'], 'northern': ['summer'], 'years': ['Olympic_Games'], 'court': ['tennis'], 'season': ['summer'], 'selected': ['Olympic_Games'], 'autumnal': ['summer'], 'two': ['tennis'], 'net': ['tennis'], 'person': ['singles'], 'played': ['tennis', 'singles'], '4': ['Olympic_Games'], 'revival': ['Olympic_Games'], 'ancient': ['Olympic_Games'], 'held': ['Olympic_Games'], 'workers': ['work_force'], 'country': ['Olympic_Games'], 'equinox': ['summer'], 'forth': ['tennis'], 'divides': ['tennis'], 'hemisphere': ['summer'], 'solstice': ['summer'], 'every': ['Olympic_Games'], 'year': ['summer'], 'game': ['tennis'], 'players': ['tennis'], 'one': ['singles'], 'rackets': ['tennis'], 'back': ['tennis']})
('definitiongraph networkx edges:', OutEdgeView([('modern', 'Olympic_Games'), ('Olympic_Games', 'modern'), ('Olympic_Games', 'games'), ('Olympic_Games', 'years'), ('Olympic_Games', 'selected'), ('Olympic_Games', '4'), ('Olympic_Games', 'revival'), ('Olympic_Games', 'ancient'), ('Olympic_Games', 'held'), ('Olympic_Games', 'country'), ('Olympic_Games', 'every'), ('warmest', 'summer'), ('summer', 'warmest'), ('summer', 'summer'), ('summer', 'extends'), ('summer', 'northern'), ('summer', 'season'), ('summer', 'autumnal'), ('summer', 'equinox'), ('summer', 'hemisphere'), ('summer', 'solstice'), ('summer', 'year'), ('force', 'work_force'), ('work_force', 'force'), ('work_force', 'available'), ('work_force', 'workers'), ('ball', 'tennis'), ('tennis', 'ball'), ('tennis', 'hit'), ('tennis', 'four'), ('tennis', 'court'), ('tennis', 'two'), ('tennis', 'net'), ('tennis', 'played'), ('tennis', 'forth'), ('tennis', 'divides'), ('tennis', 'game'), ('tennis', 'players'), ('tennis', 'rackets'), ('tennis', 'back'), ('badminton', 'singles'), ('singles', 'badminton'), ('singles', 'side'), ('singles', 'person'), ('singles', 'played'), ('singles', 'one'), ('hit', 'tennis'), ('extends', 'summer'), ('games', 'Olympic_Games'), ('side', 'singles'), ('four', 'tennis'), ('available', 'work_force'), ('northern', 'summer'), ('years', 'Olympic_Games'), ('court', 'tennis'), ('season', 'summer'), ('selected', 'Olympic_Games'), ('autumnal', 'summer'), ('two', 'tennis'), ('net', 'tennis'), ('person', 'singles'), ('played', 'tennis'), ('played', 'singles'), ('4', 'Olympic_Games'), ('revival', 'Olympic_Games'), ('ancient', 'Olympic_Games'), ('held', 'Olympic_Games'), ('workers', 'work_force'), ('country', 'Olympic_Games'), ('equinox', 'summer'), ('forth', 'tennis'), ('divides', 'tennis'), ('hemisphere', 'summer'), ('solstice', 'summer'), ('every', 'Olympic_Games'), ('year', 'summer'), ('game', 'tennis'), ('players', 'tennis'), ('one', 'singles'), ('rackets', 'tennis'), ('back', 'tennis')]))
('Core number (sorted) :', [('modern', 2), ('Olympic_Games', 2), ('warmest', 2), ('summer', 2), ('force', 2), ('work_force', 2), ('ball', 2), ('tennis', 2), ('badminton', 2), ('singles', 2), ('hit', 2), ('extends', 2), ('games', 2), ('side', 2), ('four', 2), ('available', 2), ('northern', 2), ('years', 2), ('court', 2), ('season', 2), ('selected', 2), ('autumnal', 2), ('two', 2), ('net', 2), ('person', 2), ('played', 2), ('4', 2), ('revival', 2), ('ancient', 2), ('held', 2), ('workers', 2), ('country', 2), ('equinox', 2), ('forth', 2), ('divides', 2), ('hemisphere', 2), ('solstice', 2), ('every', 2), ('year', 2), ('game', 2), ('players', 2), ('one', 2), ('rackets', 2), ('back', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'modern', ',core number=', 2)
('This document belongs to class:', 'Olympic_Games', ',core number=', 2)
('This document belongs to class:', 'warmest', ',core number=', 2)
('This document belongs to class:', 'summer', ',core number=', 2)
('This document belongs to class:', 'force', ',core number=', 2)
('This document belongs to class:', 'work_force', ',core number=', 2)
('This document belongs to class:', 'ball', ',core number=', 2)
('This document belongs to class:', 'tennis', ',core number=', 2)
('This document belongs to class:', 'badminton', ',core number=', 2)
('This document belongs to class:', 'singles', ',core number=', 2)
('This document belongs to class:', 'hit', ',core number=', 2)
('This document belongs to class:', 'extends', ',core number=', 2)
('This document belongs to class:', 'games', ',core number=', 2)
('This document belongs to class:', 'side', ',core number=', 2)
('This document belongs to class:', 'four', ',core number=', 2)
('This document belongs to class:', 'available', ',core number=', 2)
('This document belongs to class:', 'northern', ',core number=', 2)
('This document belongs to class:', 'years', ',core number=', 2)
('This document belongs to class:', 'court', ',core number=', 2)
('This document belongs to class:', 'season', ',core number=', 2)
('This document belongs to class:', 'selected', ',core number=', 2)
('This document belongs to class:', 'autumnal', ',core number=', 2)
('This document belongs to class:', 'two', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('tennis', 0.15282392026578073), ('played', 0.07198228128460686), ('singles', 0.06866002214839424), ('Olympic_Games', 0.04983388704318937), ('summer', 0.03986710963455149), ('work_force', 0.0033222591362126247), ('modern', 0.0), ('warmest', 0.0), ('force', 0.0), ('ball', 0.0), ('badminton', 0.0), ('hit', 0.0), ('extends', 0.0), ('games', 0.0), ('side', 0.0), ('four', 0.0), ('available', 0.0), ('northern', 0.0), ('years', 0.0), ('court', 0.0), ('season', 0.0), ('selected', 0.0), ('autumnal', 0.0), ('two', 0.0), ('net', 0.0), ('person', 0.0), ('4', 0.0), ('revival', 0.0), ('ancient', 0.0), ('held', 0.0), ('workers', 0.0), ('country', 0.0), ('equinox', 0.0), ('forth', 0.0), ('divides', 0.0), ('hemisphere', 0.0), ('solstice', 0.0), ('every', 0.0), ('year', 0.0), ('game', 0.0), ('players', 0.0), ('one', 0.0), ('rackets', 0.0), ('back', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('tennis', 0.27906976744186046), ('Olympic_Games', 0.23255813953488372), ('played', 0.22161422708618334), ('summer', 0.20930232558139536), ('singles', 0.1752298539751217), ('ball', 0.17124735729386895), ('hit', 0.17124735729386895), ('four', 0.17124735729386895), ('court', 0.17124735729386895), ('two', 0.17124735729386895), ('net', 0.17124735729386895), ('forth', 0.17124735729386895), ('divides', 0.17124735729386895), ('game', 0.17124735729386895), ('players', 0.17124735729386895), ('rackets', 0.17124735729386895), ('back', 0.17124735729386895), ('badminton', 0.12558139534883722), ('side', 0.12558139534883722), ('person', 0.12558139534883722), ('one', 0.12558139534883722), ('modern', 0.12239902080783353), ('games', 0.12239902080783353), ('years', 0.12239902080783353), ('selected', 0.12239902080783353), ('4', 0.12239902080783353), ('revival', 0.12239902080783353), ('ancient', 0.12239902080783353), ('held', 0.12239902080783353), ('country', 0.12239902080783353), ('every', 0.12239902080783353), ('warmest', 0.11080711354309167), ('extends', 0.11080711354309167), ('northern', 0.11080711354309167), ('season', 0.11080711354309167), ('autumnal', 0.11080711354309167), ('equinox', 0.11080711354309167), ('hemisphere', 0.11080711354309167), ('solstice', 0.11080711354309167), ('year', 0.11080711354309167), ('work_force', 0.06976744186046512), ('force', 0.04186046511627907), ('available', 0.04186046511627907), ('workers', 0.04186046511627907)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('tennis', 0.6046511627906976), ('Olympic_Games', 0.46511627906976744), ('summer', 0.41860465116279066), ('singles', 0.23255813953488372), ('work_force', 0.13953488372093023), ('played', 0.09302325581395349), ('modern', 0.046511627906976744), ('warmest', 0.046511627906976744), ('force', 0.046511627906976744), ('ball', 0.046511627906976744), ('badminton', 0.046511627906976744), ('hit', 0.046511627906976744), ('extends', 0.046511627906976744), ('games', 0.046511627906976744), ('side', 0.046511627906976744), ('four', 0.046511627906976744), ('available', 0.046511627906976744), ('northern', 0.046511627906976744), ('years', 0.046511627906976744), ('court', 0.046511627906976744), ('season', 0.046511627906976744), ('selected', 0.046511627906976744), ('autumnal', 0.046511627906976744), ('two', 0.046511627906976744), ('net', 0.046511627906976744), ('person', 0.046511627906976744), ('4', 0.046511627906976744), ('revival', 0.046511627906976744), ('ancient', 0.046511627906976744), ('held', 0.046511627906976744), ('workers', 0.046511627906976744), ('country', 0.046511627906976744), ('equinox', 0.046511627906976744), ('forth', 0.046511627906976744), ('divides', 0.046511627906976744), ('hemisphere', 0.046511627906976744), ('solstice', 0.046511627906976744), ('every', 0.046511627906976744), ('year', 0.046511627906976744), ('game', 0.046511627906976744), ('players', 0.046511627906976744), ('one', 0.046511627906976744), ('rackets', 0.046511627906976744), ('back', 0.046511627906976744)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('tennis', 0.14364808341396243), ('Olympic_Games', 0.1167100448111543), ('summer', 0.10626751457961187), ('singles', 0.058444415513719025), ('work_force', 0.0436123331903575), ('played', 0.02273618472848938), ('force', 0.01576558590624446), ('available', 0.01576558590624446), ('workers', 0.01576558590624446), ('warmest', 0.013445023632568378), ('extends', 0.013445023632568378), ('northern', 0.013445023632568378), ('season', 0.013445023632568378), ('autumnal', 0.013445023632568378), ('equinox', 0.013445023632568378), ('hemisphere', 0.013445023632568378), ('solstice', 0.013445023632568378), ('year', 0.013445023632568378), ('badminton', 0.01334422618611905), ('side', 0.01334422618611905), ('person', 0.01334422618611905), ('one', 0.01334422618611905), ('modern', 0.013328995518884581), ('games', 0.013328995518884581), ('years', 0.013328995518884581), ('selected', 0.013328995518884581), ('4', 0.013328995518884581), ('revival', 0.013328995518884581), ('ancient', 0.013328995518884581), ('held', 0.013328995518884581), ('country', 0.013328995518884581), ('every', 0.013328995518884581), ('ball', 0.012801049451461242), ('hit', 0.012801049451461242), ('four', 0.012801049451461242), ('court', 0.012801049451461242), ('two', 0.012801049451461242), ('net', 0.012801049451461242), ('forth', 0.012801049451461242), ('divides', 0.012801049451461242), ('game', 0.012801049451461242), ('players', 0.012801049451461242), ('rackets', 0.012801049451461242), ('back', 0.012801049451461242)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('modern', 'Olympic_Games'), ('Olympic_Games', 'modern'), ('Olympic_Games', 'games'), ('Olympic_Games', 'years'), ('Olympic_Games', 'selected'), ('Olympic_Games', '4'), ('Olympic_Games', 'revival'), ('Olympic_Games', 'ancient'), ('Olympic_Games', 'held'), ('Olympic_Games', 'country'), ('Olympic_Games', 'every'), ('warmest', 'summer'), ('summer', 'warmest'), ('summer', 'summer'), ('summer', 'extends'), ('summer', 'northern'), ('summer', 'season'), ('summer', 'autumnal'), ('summer', 'equinox'), ('summer', 'hemisphere'), ('summer', 'solstice'), ('summer', 'year'), ('force', 'work_force'), ('work_force', 'force'), ('work_force', 'available'), ('work_force', 'workers'), ('ball', 'tennis'), ('tennis', 'ball'), ('tennis', 'hit'), ('tennis', 'four'), ('tennis', 'court'), ('tennis', 'two'), ('tennis', 'net'), ('tennis', 'played'), ('tennis', 'forth'), ('tennis', 'divides'), ('tennis', 'game'), ('tennis', 'players'), ('tennis', 'rackets'), ('tennis', 'back'), ('badminton', 'singles'), ('singles', 'badminton'), ('singles', 'side'), ('singles', 'person'), ('singles', 'played'), ('singles', 'one'), ('hit', 'tennis'), ('extends', 'summer'), ('games', 'Olympic_Games'), ('side', 'singles'), ('four', 'tennis'), ('available', 'work_force'), ('northern', 'summer'), ('years', 'Olympic_Games'), ('court', 'tennis'), ('season', 'summer'), ('selected', 'Olympic_Games'), ('autumnal', 'summer'), ('two', 'tennis'), ('net', 'tennis'), ('person', 'singles'), ('played', 'tennis'), ('played', 'singles'), ('4', 'Olympic_Games'), ('revival', 'Olympic_Games'), ('ancient', 'Olympic_Games'), ('held', 'Olympic_Games'), ('workers', 'work_force'), ('country', 'Olympic_Games'), ('equinox', 'summer'), ('forth', 'tennis'), ('divides', 'tennis'), ('hemisphere', 'summer'), ('solstice', 'summer'), ('every', 'Olympic_Games'), ('year', 'summer'), ('game', 'tennis'), ('players', 'tennis'), ('one', 'singles'), ('rackets', 'tennis'), ('back', 'tennis')]
Answer Textgraph  7 : ([('modern', 2), ('Olympic_Games', 2), ('warmest', 2), ('summer', 2), ('force', 2), ('work_force', 2), ('ball', 2), ('tennis', 2), ('badminton', 2), ('singles', 2), ('hit', 2), ('extends', 2), ('games', 2), ('side', 2), ('four', 2), ('available', 2), ('northern', 2), ('years', 2), ('court', 2), ('season', 2), ('selected', 2), ('autumnal', 2), ('two', 2), ('net', 2), ('person', 2), ('played', 2), ('4', 2), ('revival', 2), ('ancient', 2), ('held', 2), ('workers', 2), ('country', 2), ('equinox', 2), ('forth', 2), ('divides', 2), ('hemisphere', 2), ('solstice', 2), ('every', 2), ('year', 2), ('game', 2), ('players', 2), ('one', 2), ('rackets', 2), ('back', 2)], [('tennis', 0.14364808341396243), ('Olympic_Games', 0.1167100448111543), ('summer', 0.10626751457961187), ('singles', 0.058444415513719025), ('work_force', 0.0436123331903575), ('played', 0.02273618472848938), ('force', 0.01576558590624446), ('available', 0.01576558590624446), ('workers', 0.01576558590624446), ('warmest', 0.013445023632568378), ('extends', 0.013445023632568378), ('northern', 0.013445023632568378), ('season', 0.013445023632568378), ('autumnal', 0.013445023632568378), ('equinox', 0.013445023632568378), ('hemisphere', 0.013445023632568378), ('solstice', 0.013445023632568378), ('year', 0.013445023632568378), ('badminton', 0.01334422618611905), ('side', 0.01334422618611905), ('person', 0.01334422618611905), ('one', 0.01334422618611905), ('modern', 0.013328995518884581), ('games', 0.013328995518884581), ('years', 0.013328995518884581), ('selected', 0.013328995518884581), ('4', 0.013328995518884581), ('revival', 0.013328995518884581), ('ancient', 0.013328995518884581), ('held', 0.013328995518884581), ('country', 0.013328995518884581), ('every', 0.013328995518884581), ('ball', 0.012801049451461242), ('hit', 0.012801049451461242), ('four', 0.012801049451461242), ('court', 0.012801049451461242), ('two', 0.012801049451461242), ('net', 0.012801049451461242), ('forth', 0.012801049451461242), ('divides', 0.012801049451461242), ('game', 0.012801049451461242), ('players', 0.012801049451461242), ('rackets', 0.012801049451461242), ('back', 0.012801049451461242)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464, 0.038461538461538464], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.05, 0.05, 0.05], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( modern , modern ): 1.012
Key weight for textgraph edge ( modern , modern ): 4.024
Value weight for textgraph edge ( modern , modern ): 7.036
Query weight for textgraph edge ( modern , Olympic_Games ): 2.0132
Key weight for textgraph edge ( modern , Olympic_Games ): 5.0504
Value weight for textgraph edge ( modern , Olympic_Games ): 8.0876
Query weight for textgraph edge ( modern , warmest ): 3.0338
Key weight for textgraph edge ( modern , warmest ): 6.2636
Value weight for textgraph edge ( modern , warmest ): 9.4934
Query weight for textgraph edge ( Olympic_Games , modern ): 0.11580000000000001
Key weight for textgraph edge ( Olympic_Games , modern ): 0.11580000000000001
Value weight for textgraph edge ( Olympic_Games , modern ): 0.11580000000000001
Query weight for textgraph edge ( Olympic_Games , Olympic_Games ): 0.31758
Key weight for textgraph edge ( Olympic_Games , Olympic_Games ): 0.31758
Value weight for textgraph edge ( Olympic_Games , Olympic_Games ): 0.31758
Query weight for textgraph edge ( Olympic_Games , warmest ): 0.52147
Key weight for textgraph edge ( Olympic_Games , warmest ): 0.52147
Value weight for textgraph edge ( Olympic_Games , warmest ): 0.52147
Query weight for textgraph edge ( warmest , modern ): 3.02
Key weight for textgraph edge ( warmest , modern ): 3.02
Value weight for textgraph edge ( warmest , modern ): 3.02
Query weight for textgraph edge ( warmest , Olympic_Games ): 4.038
Key weight for textgraph edge ( warmest , Olympic_Games ): 4.038
Value weight for textgraph edge ( warmest , Olympic_Games ): 4.038
Query weight for textgraph edge ( warmest , warmest ): 5.187
Key weight for textgraph edge ( warmest , warmest ): 5.187
Value weight for textgraph edge ( warmest , warmest ): 5.187
wikipedia search result: Summer Olympic Games
wikipedia search result summary: The Summer Olympic Games (French: Jeux olympiques d'été), also known as the Games of the Olympiad, are a major international multi-sport event normally held once every four years. The inaugural Games took place in 1896 in Athens, Greece, and most recently in 2021 in Tokyo, Japan. The International Olympic Committee (IOC) organises the Games and oversees the host city's preparations. In each Olympic event, gold medals are awarded for first place, silver medals are awarded for second place, and bronze medals are awarded for third place; this tradition began in 1904. The Winter Olympic Games were created out of the success of the Summer Olympics. It is regarded as the largest and most prestigious multi-sport international event in the world.
The Olympics have increased in scope from a 42-event competition programme with fewer than 250 male competitors from 14 nations in 1896 to 306 events with 11,238 competitors (6,179 men, 5,059 women) from 206 nations in 2016. The Summer Olympics have been hosted on five continents by a total of nineteen countries. The Games have been held four times in the United States (1904, 1932, 1984, and 1996), three times in Great Britain (1908, 1948, and 2012), twice each in Greece (1896 and 2004), France (1900 and 1924), Germany (1936 and 1972), Australia (1956 and 2000) and Japan (1964 and 2020), and once each in Sweden (1912), Belgium (1920), the Netherlands (1928), Finland (1952), Italy (1960), Mexico (1968), Canada (1976), the Soviet Union (1980), South Korea (1988), Spain (1992), China (2008) and Brazil (2016).
London was the first city to host the Summer Olympic Games three times, followed by Paris, Los Angeles, Athens and Tokyo, where the Games have each been held twice. Paris will join London by hosting the Olympics for the third time in 2024, followed by Los Angeles which will hold the 2028 Games.Only five countries have participated in every Summer Olympic Games: Australia, France, Great Britain, Greece, and Switzerland. Great Britain is the only country to have won a gold medal at each edition of the Games. The United States leads the all-time medal count at the Summer Olympics, and has topped the medal table on 18 separate occasions — followed by the USSR (six times), and France, Great Britain, Germany, China, and the ex-Soviet 'Unified Team' (once each).
2
defaultdict(<class 'list'>, {'autumnal': ['summer'], 'warmest': ['summer'], 'Games': ['Olympic'], 'summer': ['summer'], 'determine': ['game'], 'winner': ['game'], 'rules': ['game'], 'extends': ['summer'], 'Olympic': ['Olympic'], 'equinox': ['summer'], 'hemisphere': ['summer'], 'solstice': ['summer'], 'northern': ['summer'], 'year': ['summer'], 'contest': ['game'], 'relating': ['Olympic'], 'season': ['summer']})
('definitiongraph networkx edges:', OutEdgeView([('autumnal', 'summer'), ('summer', 'autumnal'), ('summer', 'warmest'), ('summer', 'summer'), ('summer', 'extends'), ('summer', 'equinox'), ('summer', 'hemisphere'), ('summer', 'solstice'), ('summer', 'northern'), ('summer', 'year'), ('summer', 'season'), ('warmest', 'summer'), ('Games', 'Olympic'), ('Olympic', 'Games'), ('Olympic', 'Olympic'), ('Olympic', 'relating'), ('determine', 'game'), ('game', 'determine'), ('game', 'winner'), ('game', 'rules'), ('game', 'contest'), ('winner', 'game'), ('rules', 'game'), ('extends', 'summer'), ('equinox', 'summer'), ('hemisphere', 'summer'), ('solstice', 'summer'), ('northern', 'summer'), ('year', 'summer'), ('contest', 'game'), ('relating', 'Olympic'), ('season', 'summer')]))
('Core number (sorted) :', [('autumnal', 2), ('summer', 2), ('warmest', 2), ('Games', 2), ('Olympic', 2), ('determine', 2), ('game', 2), ('winner', 2), ('rules', 2), ('extends', 2), ('equinox', 2), ('hemisphere', 2), ('solstice', 2), ('northern', 2), ('year', 2), ('contest', 2), ('relating', 2), ('season', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'autumnal', ',core number=', 2)
('This document belongs to class:', 'summer', ',core number=', 2)
('This document belongs to class:', 'warmest', ',core number=', 2)
('This document belongs to class:', 'Games', ',core number=', 2)
('This document belongs to class:', 'Olympic', ',core number=', 2)
('This document belongs to class:', 'determine', ',core number=', 2)
('This document belongs to class:', 'game', ',core number=', 2)
('This document belongs to class:', 'winner', ',core number=', 2)
('This document belongs to class:', 'rules', ',core number=', 2)
('This document belongs to class:', 'extends', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('summer', 0.2647058823529412), ('game', 0.044117647058823525), ('Olympic', 0.007352941176470588), ('autumnal', 0.0), ('warmest', 0.0), ('Games', 0.0), ('determine', 0.0), ('winner', 0.0), ('rules', 0.0), ('extends', 0.0), ('equinox', 0.0), ('hemisphere', 0.0), ('solstice', 0.0), ('northern', 0.0), ('year', 0.0), ('contest', 0.0), ('relating', 0.0), ('season', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('summer', 0.5294117647058824), ('autumnal', 0.28027681660899656), ('warmest', 0.28027681660899656), ('extends', 0.28027681660899656), ('equinox', 0.28027681660899656), ('hemisphere', 0.28027681660899656), ('solstice', 0.28027681660899656), ('northern', 0.28027681660899656), ('year', 0.28027681660899656), ('season', 0.28027681660899656), ('game', 0.23529411764705882), ('determine', 0.13445378151260504), ('winner', 0.13445378151260504), ('rules', 0.13445378151260504), ('contest', 0.13445378151260504), ('Olympic', 0.11764705882352941), ('Games', 0.0784313725490196), ('relating', 0.0784313725490196)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('summer', 1.0588235294117647), ('game', 0.47058823529411764), ('Olympic', 0.23529411764705882), ('autumnal', 0.11764705882352941), ('warmest', 0.11764705882352941), ('Games', 0.11764705882352941), ('determine', 0.11764705882352941), ('winner', 0.11764705882352941), ('rules', 0.11764705882352941), ('extends', 0.11764705882352941), ('equinox', 0.11764705882352941), ('hemisphere', 0.11764705882352941), ('solstice', 0.11764705882352941), ('northern', 0.11764705882352941), ('year', 0.11764705882352941), ('contest', 0.11764705882352941), ('relating', 0.11764705882352941), ('season', 0.11764705882352941)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('summer', 0.25976251380172405), ('game', 0.1321331648978688), ('Olympic', 0.08108142533632665), ('Games', 0.04279262066517002), ('relating', 0.04279262066517002), ('determine', 0.036411153219977246), ('winner', 0.036411153219977246), ('rules', 0.036411153219977246), ('contest', 0.036411153219977246), ('autumnal', 0.03286589352820349), ('warmest', 0.03286589352820349), ('extends', 0.03286589352820349), ('equinox', 0.03286589352820349), ('hemisphere', 0.03286589352820349), ('solstice', 0.03286589352820349), ('northern', 0.03286589352820349), ('year', 0.03286589352820349), ('season', 0.03286589352820349)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('autumnal', 'summer'), ('summer', 'autumnal'), ('summer', 'warmest'), ('summer', 'summer'), ('summer', 'extends'), ('summer', 'equinox'), ('summer', 'hemisphere'), ('summer', 'solstice'), ('summer', 'northern'), ('summer', 'year'), ('summer', 'season'), ('warmest', 'summer'), ('Games', 'Olympic'), ('Olympic', 'Games'), ('Olympic', 'Olympic'), ('Olympic', 'relating'), ('determine', 'game'), ('game', 'determine'), ('game', 'winner'), ('game', 'rules'), ('game', 'contest'), ('winner', 'game'), ('rules', 'game'), ('extends', 'summer'), ('equinox', 'summer'), ('hemisphere', 'summer'), ('solstice', 'summer'), ('northern', 'summer'), ('year', 'summer'), ('contest', 'game'), ('relating', 'Olympic'), ('season', 'summer')]
Answer Textgraph  8 : ([('autumnal', 2), ('summer', 2), ('warmest', 2), ('Games', 2), ('Olympic', 2), ('determine', 2), ('game', 2), ('winner', 2), ('rules', 2), ('extends', 2), ('equinox', 2), ('hemisphere', 2), ('solstice', 2), ('northern', 2), ('year', 2), ('contest', 2), ('relating', 2), ('season', 2)], [('summer', 0.25976251380172405), ('game', 0.1321331648978688), ('Olympic', 0.08108142533632665), ('Games', 0.04279262066517002), ('relating', 0.04279262066517002), ('determine', 0.036411153219977246), ('winner', 0.036411153219977246), ('rules', 0.036411153219977246), ('contest', 0.036411153219977246), ('autumnal', 0.03286589352820349), ('warmest', 0.03286589352820349), ('extends', 0.03286589352820349), ('equinox', 0.03286589352820349), ('hemisphere', 0.03286589352820349), ('solstice', 0.03286589352820349), ('northern', 0.03286589352820349), ('year', 0.03286589352820349), ('season', 0.03286589352820349)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.05, 0.05, 0.05], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( autumnal , autumnal ): 1.012
Key weight for textgraph edge ( autumnal , autumnal ): 4.024
Value weight for textgraph edge ( autumnal , autumnal ): 7.036
Query weight for textgraph edge ( autumnal , summer ): 2.0132
Key weight for textgraph edge ( autumnal , summer ): 5.0504
Value weight for textgraph edge ( autumnal , summer ): 8.0876
Query weight for textgraph edge ( autumnal , warmest ): 3.0338
Key weight for textgraph edge ( autumnal , warmest ): 6.2636
Value weight for textgraph edge ( autumnal , warmest ): 9.4934
Query weight for textgraph edge ( summer , autumnal ): 0.11580000000000001
Key weight for textgraph edge ( summer , autumnal ): 0.11580000000000001
Value weight for textgraph edge ( summer , autumnal ): 0.11580000000000001
Query weight for textgraph edge ( summer , summer ): 0.31758
Key weight for textgraph edge ( summer , summer ): 0.31758
Value weight for textgraph edge ( summer , summer ): 0.31758
Query weight for textgraph edge ( summer , warmest ): 0.52147
Key weight for textgraph edge ( summer , warmest ): 0.52147
Value weight for textgraph edge ( summer , warmest ): 0.52147
Query weight for textgraph edge ( warmest , autumnal ): 3.02
Key weight for textgraph edge ( warmest , autumnal ): 3.02
Value weight for textgraph edge ( warmest , autumnal ): 3.02
Query weight for textgraph edge ( warmest , summer ): 4.038
Key weight for textgraph edge ( warmest , summer ): 4.038
Value weight for textgraph edge ( warmest , summer ): 4.038
Query weight for textgraph edge ( warmest , warmest ): 5.187
Key weight for textgraph edge ( warmest , warmest ): 5.187
Value weight for textgraph edge ( warmest , warmest ): 5.187
wikipedia search result: 1992 Summer Olympics medal table
wikipedia search result summary: The 1992 Summer Olympics medal table is a list of National Olympic Committees and two non-NOC teams ranked by the number of medals won during the 1992 Summer Olympics, held in Barcelona, Catalonia, Spain, from July 25 to August 9, 1992. A total of 9,356 athletes from 169 countries participated in these games, competing in 257 events in 28 sports.Athletes from 64 countries won at least one medal, leaving 105 countries without a medal. The Unified Team (ex-USSR countries that competed together because the Soviet Union broke up several months before the start of the Games) won the most medals overall, 112, as well as the most gold medals, 45, edging the United States team that won 108 total and 37 gold medals respectively. As of 2021, these are the last Summer Olympics where the United States did not win the most medals overall, and the only one since 1936 where the most gold medals were not won by either the USA, the USSR, or China. Host nation Spain finished the games with 22 medals overall (thirteen gold, seven silver, and two bronze). South Africa competed in the Olympics for the first time since 1960 due to the fall of apartheid. Latvia and Estonia competed as independent countries for the first time since 1936, and Lithuania competed independently for the first time since 1928. During the Cold War they were occupied by the Soviet Union. Croatia, Bosnia-Herzegovina, and Slovenia competed independently (as opposed to as a part of Yugoslavia) for the first time.
2
defaultdict(<class 'list'>, {'commemorating': ['decoration'], 'selected': ['Olympic_Games'], 'autumnal': ['summer'], 'modern': ['Olympic_Games'], 'meal': ['table'], 'warmest': ['summer'], '4': ['Olympic_Games'], 'revival': ['Olympic_Games'], 'assembled': ['table'], 'ancient': ['Olympic_Games'], 'summer': ['summer'], 'held': ['Olympic_Games'], 'winning': ['decoration'], 'championship': ['decoration'], 'people': ['table'], 'extends': ['summer'], 'table': ['table'], 'games': ['Olympic_Games'], 'company': ['table'], 'country': ['Olympic_Games'], 'equinox': ['summer'], 'event': ['decoration'], 'hemisphere': ['summer'], 'solstice': ['summer'], 'northern': ['summer'], 'every': ['Olympic_Games'], 'year': ['summer'], 'years': ['Olympic_Games'], 'game': ['table'], 'award': ['decoration'], 'season': ['summer']})
('definitiongraph networkx edges:', OutEdgeView([('commemorating', 'decoration'), ('decoration', 'commemorating'), ('decoration', 'winning'), ('decoration', 'championship'), ('decoration', 'event'), ('decoration', 'award'), ('selected', 'Olympic_Games'), ('Olympic_Games', 'selected'), ('Olympic_Games', 'modern'), ('Olympic_Games', '4'), ('Olympic_Games', 'revival'), ('Olympic_Games', 'ancient'), ('Olympic_Games', 'held'), ('Olympic_Games', 'games'), ('Olympic_Games', 'country'), ('Olympic_Games', 'every'), ('Olympic_Games', 'years'), ('autumnal', 'summer'), ('summer', 'autumnal'), ('summer', 'warmest'), ('summer', 'summer'), ('summer', 'extends'), ('summer', 'equinox'), ('summer', 'hemisphere'), ('summer', 'solstice'), ('summer', 'northern'), ('summer', 'year'), ('summer', 'season'), ('modern', 'Olympic_Games'), ('meal', 'table'), ('table', 'meal'), ('table', 'assembled'), ('table', 'people'), ('table', 'table'), ('table', 'company'), ('table', 'game'), ('warmest', 'summer'), ('4', 'Olympic_Games'), ('revival', 'Olympic_Games'), ('assembled', 'table'), ('ancient', 'Olympic_Games'), ('held', 'Olympic_Games'), ('winning', 'decoration'), ('championship', 'decoration'), ('people', 'table'), ('extends', 'summer'), ('games', 'Olympic_Games'), ('company', 'table'), ('country', 'Olympic_Games'), ('equinox', 'summer'), ('event', 'decoration'), ('hemisphere', 'summer'), ('solstice', 'summer'), ('northern', 'summer'), ('every', 'Olympic_Games'), ('year', 'summer'), ('years', 'Olympic_Games'), ('game', 'table'), ('award', 'decoration'), ('season', 'summer')]))
('Core number (sorted) :', [('commemorating', 2), ('decoration', 2), ('selected', 2), ('Olympic_Games', 2), ('autumnal', 2), ('summer', 2), ('modern', 2), ('meal', 2), ('table', 2), ('warmest', 2), ('4', 2), ('revival', 2), ('assembled', 2), ('ancient', 2), ('held', 2), ('winning', 2), ('championship', 2), ('people', 2), ('extends', 2), ('games', 2), ('company', 2), ('country', 2), ('equinox', 2), ('event', 2), ('hemisphere', 2), ('solstice', 2), ('northern', 2), ('every', 2), ('year', 2), ('years', 2), ('game', 2), ('award', 2), ('season', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'commemorating', ',core number=', 2)
('This document belongs to class:', 'decoration', ',core number=', 2)
('This document belongs to class:', 'selected', ',core number=', 2)
('This document belongs to class:', 'Olympic_Games', ',core number=', 2)
('This document belongs to class:', 'autumnal', ',core number=', 2)
('This document belongs to class:', 'summer', ',core number=', 2)
('This document belongs to class:', 'modern', ',core number=', 2)
('This document belongs to class:', 'meal', ',core number=', 2)
('This document belongs to class:', 'table', ',core number=', 2)
('This document belongs to class:', 'warmest', ',core number=', 2)
('This document belongs to class:', '4', ',core number=', 2)
('This document belongs to class:', 'revival', ',core number=', 2)
('This document belongs to class:', 'assembled', ',core number=', 2)
('This document belongs to class:', 'ancient', ',core number=', 2)
('This document belongs to class:', 'held', ',core number=', 2)
('This document belongs to class:', 'winning', ',core number=', 2)
('This document belongs to class:', 'championship', ',core number=', 2)
('This document belongs to class:', 'people', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Olympic_Games', 0.0907258064516129), ('summer', 0.07258064516129031), ('decoration', 0.020161290322580645), ('table', 0.020161290322580645), ('commemorating', 0.0), ('selected', 0.0), ('autumnal', 0.0), ('modern', 0.0), ('meal', 0.0), ('warmest', 0.0), ('4', 0.0), ('revival', 0.0), ('assembled', 0.0), ('ancient', 0.0), ('held', 0.0), ('winning', 0.0), ('championship', 0.0), ('people', 0.0), ('extends', 0.0), ('games', 0.0), ('company', 0.0), ('country', 0.0), ('equinox', 0.0), ('event', 0.0), ('hemisphere', 0.0), ('solstice', 0.0), ('northern', 0.0), ('every', 0.0), ('year', 0.0), ('years', 0.0), ('game', 0.0), ('award', 0.0), ('season', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Olympic_Games', 0.3125), ('summer', 0.28125), ('selected', 0.1644736842105263), ('modern', 0.1644736842105263), ('4', 0.1644736842105263), ('revival', 0.1644736842105263), ('ancient', 0.1644736842105263), ('held', 0.1644736842105263), ('games', 0.1644736842105263), ('country', 0.1644736842105263), ('every', 0.1644736842105263), ('years', 0.1644736842105263), ('decoration', 0.15625), ('table', 0.15625), ('autumnal', 0.1488970588235294), ('warmest', 0.1488970588235294), ('extends', 0.1488970588235294), ('equinox', 0.1488970588235294), ('hemisphere', 0.1488970588235294), ('solstice', 0.1488970588235294), ('northern', 0.1488970588235294), ('year', 0.1488970588235294), ('season', 0.1488970588235294), ('commemorating', 0.08680555555555555), ('meal', 0.08680555555555555), ('assembled', 0.08680555555555555), ('winning', 0.08680555555555555), ('championship', 0.08680555555555555), ('people', 0.08680555555555555), ('company', 0.08680555555555555), ('event', 0.08680555555555555), ('game', 0.08680555555555555), ('award', 0.08680555555555555)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Olympic_Games', 0.625), ('summer', 0.5625), ('decoration', 0.3125), ('table', 0.3125), ('commemorating', 0.0625), ('selected', 0.0625), ('autumnal', 0.0625), ('modern', 0.0625), ('meal', 0.0625), ('warmest', 0.0625), ('4', 0.0625), ('revival', 0.0625), ('assembled', 0.0625), ('ancient', 0.0625), ('held', 0.0625), ('winning', 0.0625), ('championship', 0.0625), ('people', 0.0625), ('extends', 0.0625), ('games', 0.0625), ('company', 0.0625), ('country', 0.0625), ('equinox', 0.0625), ('event', 0.0625), ('hemisphere', 0.0625), ('solstice', 0.0625), ('northern', 0.0625), ('every', 0.0625), ('year', 0.0625), ('years', 0.0625), ('game', 0.0625), ('award', 0.0625), ('season', 0.0625)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('Olympic_Games', 0.15561249468323016), ('summer', 0.1416892208632079), ('decoration', 0.08599612558311913), ('table', 0.08599612558311913), ('commemorating', 0.01916441124701254), ('meal', 0.01916441124701254), ('assembled', 0.01916441124701254), ('winning', 0.01916441124701254), ('championship', 0.01916441124701254), ('people', 0.01916441124701254), ('company', 0.01916441124701254), ('event', 0.01916441124701254), ('game', 0.01916441124701254), ('award', 0.01916441124701254), ('autumnal', 0.01792678690745501), ('warmest', 0.01792678690745501), ('extends', 0.01792678690745501), ('equinox', 0.01792678690745501), ('hemisphere', 0.01792678690745501), ('solstice', 0.01792678690745501), ('northern', 0.01792678690745501), ('year', 0.01792678690745501), ('season', 0.01792678690745501), ('selected', 0.017772083865010325), ('modern', 0.017772083865010325), ('4', 0.017772083865010325), ('revival', 0.017772083865010325), ('ancient', 0.017772083865010325), ('held', 0.017772083865010325), ('games', 0.017772083865010325), ('country', 0.017772083865010325), ('every', 0.017772083865010325), ('years', 0.017772083865010325)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('commemorating', 'decoration'), ('decoration', 'commemorating'), ('decoration', 'winning'), ('decoration', 'championship'), ('decoration', 'event'), ('decoration', 'award'), ('selected', 'Olympic_Games'), ('Olympic_Games', 'selected'), ('Olympic_Games', 'modern'), ('Olympic_Games', '4'), ('Olympic_Games', 'revival'), ('Olympic_Games', 'ancient'), ('Olympic_Games', 'held'), ('Olympic_Games', 'games'), ('Olympic_Games', 'country'), ('Olympic_Games', 'every'), ('Olympic_Games', 'years'), ('autumnal', 'summer'), ('summer', 'autumnal'), ('summer', 'warmest'), ('summer', 'summer'), ('summer', 'extends'), ('summer', 'equinox'), ('summer', 'hemisphere'), ('summer', 'solstice'), ('summer', 'northern'), ('summer', 'year'), ('summer', 'season'), ('modern', 'Olympic_Games'), ('meal', 'table'), ('table', 'meal'), ('table', 'assembled'), ('table', 'people'), ('table', 'table'), ('table', 'company'), ('table', 'game'), ('warmest', 'summer'), ('4', 'Olympic_Games'), ('revival', 'Olympic_Games'), ('assembled', 'table'), ('ancient', 'Olympic_Games'), ('held', 'Olympic_Games'), ('winning', 'decoration'), ('championship', 'decoration'), ('people', 'table'), ('extends', 'summer'), ('games', 'Olympic_Games'), ('company', 'table'), ('country', 'Olympic_Games'), ('equinox', 'summer'), ('event', 'decoration'), ('hemisphere', 'summer'), ('solstice', 'summer'), ('northern', 'summer'), ('every', 'Olympic_Games'), ('year', 'summer'), ('years', 'Olympic_Games'), ('game', 'table'), ('award', 'decoration'), ('season', 'summer')]
Answer Textgraph  9 : ([('commemorating', 2), ('decoration', 2), ('selected', 2), ('Olympic_Games', 2), ('autumnal', 2), ('summer', 2), ('modern', 2), ('meal', 2), ('table', 2), ('warmest', 2), ('4', 2), ('revival', 2), ('assembled', 2), ('ancient', 2), ('held', 2), ('winning', 2), ('championship', 2), ('people', 2), ('extends', 2), ('games', 2), ('company', 2), ('country', 2), ('equinox', 2), ('event', 2), ('hemisphere', 2), ('solstice', 2), ('northern', 2), ('every', 2), ('year', 2), ('years', 2), ('game', 2), ('award', 2), ('season', 2)], [('Olympic_Games', 0.15561249468323016), ('summer', 0.1416892208632079), ('decoration', 0.08599612558311913), ('table', 0.08599612558311913), ('commemorating', 0.01916441124701254), ('meal', 0.01916441124701254), ('assembled', 0.01916441124701254), ('winning', 0.01916441124701254), ('championship', 0.01916441124701254), ('people', 0.01916441124701254), ('company', 0.01916441124701254), ('event', 0.01916441124701254), ('game', 0.01916441124701254), ('award', 0.01916441124701254), ('autumnal', 0.01792678690745501), ('warmest', 0.01792678690745501), ('extends', 0.01792678690745501), ('equinox', 0.01792678690745501), ('hemisphere', 0.01792678690745501), ('solstice', 0.01792678690745501), ('northern', 0.01792678690745501), ('year', 0.01792678690745501), ('season', 0.01792678690745501), ('selected', 0.017772083865010325), ('modern', 0.017772083865010325), ('4', 0.017772083865010325), ('revival', 0.017772083865010325), ('ancient', 0.017772083865010325), ('held', 0.017772083865010325), ('games', 0.017772083865010325), ('country', 0.017772083865010325), ('every', 0.017772083865010325), ('years', 0.017772083865010325)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.1, 0.1, 0.1], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11480000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31548
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.31548, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51382
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights updated after Gradient :  [0.11480000000000001, 0.31548, 0.51382]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11480000000000001, 0.31548, 0.51382], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11480000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31548
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.31548, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51382
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights updated after Gradient :  [0.11480000000000001, 0.31548, 0.51382]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11480000000000001, 0.31548, 0.51382], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11480000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31548
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights: [0.11480000000000001, 0.31548, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.1, 0.1, 0.1]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.51382
LinearPerceptronGradient() weight update iteration: deltaw =  [0.14800000000000002, 0.15480000000000002, 0.13820000000000002]
weights updated after Gradient :  [0.11480000000000001, 0.31548, 0.51382]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11480000000000001, 0.31548, 0.51382], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( commemorating , commemorating ): 1.012
Key weight for textgraph edge ( commemorating , commemorating ): 4.024
Value weight for textgraph edge ( commemorating , commemorating ): 7.036
Query weight for textgraph edge ( commemorating , decoration ): 2.0132
Key weight for textgraph edge ( commemorating , decoration ): 5.0504
Value weight for textgraph edge ( commemorating , decoration ): 8.0876
Query weight for textgraph edge ( commemorating , selected ): 3.0338
Key weight for textgraph edge ( commemorating , selected ): 6.2636
Value weight for textgraph edge ( commemorating , selected ): 9.4934
Query weight for textgraph edge ( decoration , commemorating ): 0.11480000000000001
Key weight for textgraph edge ( decoration , commemorating ): 0.11480000000000001
Value weight for textgraph edge ( decoration , commemorating ): 0.11480000000000001
Query weight for textgraph edge ( decoration , decoration ): 0.31548
Key weight for textgraph edge ( decoration , decoration ): 0.31548
Value weight for textgraph edge ( decoration , decoration ): 0.31548
Query weight for textgraph edge ( decoration , selected ): 0.51382
Key weight for textgraph edge ( decoration , selected ): 0.51382
Value weight for textgraph edge ( decoration , selected ): 0.51382
Query weight for textgraph edge ( selected , commemorating ): 3.02
Key weight for textgraph edge ( selected , commemorating ): 3.02
Value weight for textgraph edge ( selected , commemorating ): 3.02
Query weight for textgraph edge ( selected , decoration ): 4.038
Key weight for textgraph edge ( selected , decoration ): 4.038
Value weight for textgraph edge ( selected , decoration ): 4.038
Query weight for textgraph edge ( selected , selected ): 5.187
Key weight for textgraph edge ( selected , selected ): 5.187
Value weight for textgraph edge ( selected , selected ): 5.187
wikipedia search result: Volleyball at the 1992 Summer Olympics – Women's tournament
wikipedia search result summary: The 1992 women's Olympic volleyball tournament was the eighth edition of the event, organised by the world's governing body, the FIVB in conjunction with the International Olympic Committee. The competition in Barcelona, Spain was held from 29 July to 8 August 1992 in three venues in the city: the Palau d'Esports, the Pavelló de la Vall d'Hebron and the Palau Sant Jordi, where the semi-finals and finals were played.
2
defaultdict(<class 'list'>, {'modern': ['Olympic_Games'], 'warmest': ['summer'], 'ball': ['volleyball'], 'competition': ['tournament'], 'teams': ['volleyball'], 'hit': ['volleyball'], 'summer': ['summer'], 'extends': ['summer'], 'games': ['Olympic_Games', 'tournament'], 'opposed': ['woman'], 'series': ['tournament'], 'hands': ['volleyball'], 'northern': ['summer'], 'years': ['Olympic_Games'], 'season': ['summer'], 'sporting': ['tournament'], 'selected': ['Olympic_Games'], 'autumnal': ['summer'], 'two': ['volleyball'], 'net': ['volleyball'], 'person': ['woman'], 'inflated': ['volleyball'], '4': ['Olympic_Games'], 'revival': ['Olympic_Games'], 'ancient': ['Olympic_Games'], 'held': ['Olympic_Games'], 'winner': ['tournament'], 'using': ['volleyball'], 'contestants': ['tournament'], 'country': ['Olympic_Games'], 'decide': ['tournament'], 'equinox': ['summer'], 'female': ['woman'], 'man': ['woman'], 'play': ['tournament'], 'hemisphere': ['summer'], 'solstice': ['summer'], 'every': ['Olympic_Games'], 'year': ['summer'], 'game': ['volleyball'], 'high': ['volleyball'], 'adult': ['woman']})
('definitiongraph networkx edges:', OutEdgeView([('modern', 'Olympic_Games'), ('Olympic_Games', 'modern'), ('Olympic_Games', 'games'), ('Olympic_Games', 'years'), ('Olympic_Games', 'selected'), ('Olympic_Games', '4'), ('Olympic_Games', 'revival'), ('Olympic_Games', 'ancient'), ('Olympic_Games', 'held'), ('Olympic_Games', 'country'), ('Olympic_Games', 'every'), ('warmest', 'summer'), ('summer', 'warmest'), ('summer', 'summer'), ('summer', 'extends'), ('summer', 'northern'), ('summer', 'season'), ('summer', 'autumnal'), ('summer', 'equinox'), ('summer', 'hemisphere'), ('summer', 'solstice'), ('summer', 'year'), ('ball', 'volleyball'), ('volleyball', 'ball'), ('volleyball', 'teams'), ('volleyball', 'hit'), ('volleyball', 'hands'), ('volleyball', 'two'), ('volleyball', 'net'), ('volleyball', 'inflated'), ('volleyball', 'using'), ('volleyball', 'game'), ('volleyball', 'high'), ('competition', 'tournament'), ('tournament', 'competition'), ('tournament', 'games'), ('tournament', 'series'), ('tournament', 'sporting'), ('tournament', 'winner'), ('tournament', 'contestants'), ('tournament', 'decide'), ('tournament', 'play'), ('teams', 'volleyball'), ('hit', 'volleyball'), ('extends', 'summer'), ('games', 'Olympic_Games'), ('games', 'tournament'), ('opposed', 'woman'), ('woman', 'opposed'), ('woman', 'person'), ('woman', 'female'), ('woman', 'man'), ('woman', 'adult'), ('series', 'tournament'), ('hands', 'volleyball'), ('northern', 'summer'), ('years', 'Olympic_Games'), ('season', 'summer'), ('sporting', 'tournament'), ('selected', 'Olympic_Games'), ('autumnal', 'summer'), ('two', 'volleyball'), ('net', 'volleyball'), ('person', 'woman'), ('inflated', 'volleyball'), ('4', 'Olympic_Games'), ('revival', 'Olympic_Games'), ('ancient', 'Olympic_Games'), ('held', 'Olympic_Games'), ('winner', 'tournament'), ('using', 'volleyball'), ('contestants', 'tournament'), ('country', 'Olympic_Games'), ('decide', 'tournament'), ('equinox', 'summer'), ('female', 'woman'), ('man', 'woman'), ('play', 'tournament'), ('hemisphere', 'summer'), ('solstice', 'summer'), ('every', 'Olympic_Games'), ('year', 'summer'), ('game', 'volleyball'), ('high', 'volleyball'), ('adult', 'woman')]))
('Core number (sorted) :', [('modern', 2), ('Olympic_Games', 2), ('warmest', 2), ('summer', 2), ('ball', 2), ('volleyball', 2), ('competition', 2), ('tournament', 2), ('teams', 2), ('hit', 2), ('extends', 2), ('games', 2), ('opposed', 2), ('woman', 2), ('series', 2), ('hands', 2), ('northern', 2), ('years', 2), ('season', 2), ('sporting', 2), ('selected', 2), ('autumnal', 2), ('two', 2), ('net', 2), ('person', 2), ('inflated', 2), ('4', 2), ('revival', 2), ('ancient', 2), ('held', 2), ('winner', 2), ('using', 2), ('contestants', 2), ('country', 2), ('decide', 2), ('equinox', 2), ('female', 2), ('man', 2), ('play', 2), ('hemisphere', 2), ('solstice', 2), ('every', 2), ('year', 2), ('game', 2), ('high', 2), ('adult', 2)])
=============================================================================================================
Unsupervised Classification based on top percentile Core numbers of the definition graph(subgraph of WordNet)
=============================================================================================================
('This document belongs to class:', 'modern', ',core number=', 2)
('This document belongs to class:', 'Olympic_Games', ',core number=', 2)
('This document belongs to class:', 'warmest', ',core number=', 2)
('This document belongs to class:', 'summer', ',core number=', 2)
('This document belongs to class:', 'ball', ',core number=', 2)
('This document belongs to class:', 'volleyball', ',core number=', 2)
('This document belongs to class:', 'competition', ',core number=', 2)
('This document belongs to class:', 'tournament', ',core number=', 2)
('This document belongs to class:', 'teams', ',core number=', 2)
('This document belongs to class:', 'hit', ',core number=', 2)
('This document belongs to class:', 'extends', ',core number=', 2)
('This document belongs to class:', 'games', ',core number=', 2)
('This document belongs to class:', 'opposed', ',core number=', 2)
('This document belongs to class:', 'woman', ',core number=', 2)
('This document belongs to class:', 'series', ',core number=', 2)
('This document belongs to class:', 'hands', ',core number=', 2)
('This document belongs to class:', 'northern', ',core number=', 2)
('This document belongs to class:', 'years', ',core number=', 2)
('This document belongs to class:', 'season', ',core number=', 2)
('This document belongs to class:', 'sporting', ',core number=', 2)
('This document belongs to class:', 'selected', ',core number=', 2)
('This document belongs to class:', 'autumnal', ',core number=', 2)
('This document belongs to class:', 'two', ',core number=', 2)
('This document belongs to class:', 'net', ',core number=', 2)
('\tmax_core_number', 2)
===================================================================
Betweenness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Olympic_Games', 0.11818181818181818), ('tournament', 0.09898989898989899), ('games', 0.0808080808080808), ('volleyball', 0.045454545454545456), ('summer', 0.03636363636363636), ('woman', 0.0101010101010101), ('modern', 0.0), ('warmest', 0.0), ('ball', 0.0), ('competition', 0.0), ('teams', 0.0), ('hit', 0.0), ('extends', 0.0), ('opposed', 0.0), ('series', 0.0), ('hands', 0.0), ('northern', 0.0), ('years', 0.0), ('season', 0.0), ('sporting', 0.0), ('selected', 0.0), ('autumnal', 0.0), ('two', 0.0), ('net', 0.0), ('person', 0.0), ('inflated', 0.0), ('4', 0.0), ('revival', 0.0), ('ancient', 0.0), ('held', 0.0), ('winner', 0.0), ('using', 0.0), ('contestants', 0.0), ('country', 0.0), ('decide', 0.0), ('equinox', 0.0), ('female', 0.0), ('man', 0.0), ('play', 0.0), ('hemisphere', 0.0), ('solstice', 0.0), ('every', 0.0), ('year', 0.0), ('game', 0.0), ('high', 0.0), ('adult', 0.0)]
===================================================================
Closeness Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('volleyball', 0.2222222222222222), ('Olympic_Games', 0.21818181818181817), ('games', 0.21176470588235297), ('summer', 0.2), ('tournament', 0.1945945945945946), ('modern', 0.144), ('years', 0.144), ('selected', 0.144), ('4', 0.144), ('revival', 0.144), ('ancient', 0.144), ('held', 0.144), ('country', 0.144), ('every', 0.144), ('competition', 0.13333333333333333), ('series', 0.13333333333333333), ('sporting', 0.13333333333333333), ('winner', 0.13333333333333333), ('contestants', 0.13333333333333333), ('decide', 0.13333333333333333), ('play', 0.13333333333333333), ('ball', 0.11695906432748537), ('teams', 0.11695906432748537), ('hit', 0.11695906432748537), ('hands', 0.11695906432748537), ('two', 0.11695906432748537), ('net', 0.11695906432748537), ('inflated', 0.11695906432748537), ('using', 0.11695906432748537), ('game', 0.11695906432748537), ('high', 0.11695906432748537), ('woman', 0.1111111111111111), ('warmest', 0.10588235294117648), ('extends', 0.10588235294117648), ('northern', 0.10588235294117648), ('season', 0.10588235294117648), ('autumnal', 0.10588235294117648), ('equinox', 0.10588235294117648), ('hemisphere', 0.10588235294117648), ('solstice', 0.10588235294117648), ('year', 0.10588235294117648), ('opposed', 0.06172839506172839), ('person', 0.06172839506172839), ('female', 0.06172839506172839), ('man', 0.06172839506172839), ('adult', 0.06172839506172839)]
===================================================================
Degree Centrality of Recursive Gloss Overlap graph vertices
===================================================================
[('Olympic_Games', 0.4444444444444445), ('volleyball', 0.4444444444444445), ('summer', 0.4), ('tournament', 0.35555555555555557), ('woman', 0.22222222222222224), ('games', 0.08888888888888889), ('modern', 0.044444444444444446), ('warmest', 0.044444444444444446), ('ball', 0.044444444444444446), ('competition', 0.044444444444444446), ('teams', 0.044444444444444446), ('hit', 0.044444444444444446), ('extends', 0.044444444444444446), ('opposed', 0.044444444444444446), ('series', 0.044444444444444446), ('hands', 0.044444444444444446), ('northern', 0.044444444444444446), ('years', 0.044444444444444446), ('season', 0.044444444444444446), ('sporting', 0.044444444444444446), ('selected', 0.044444444444444446), ('autumnal', 0.044444444444444446), ('two', 0.044444444444444446), ('net', 0.044444444444444446), ('person', 0.044444444444444446), ('inflated', 0.044444444444444446), ('4', 0.044444444444444446), ('revival', 0.044444444444444446), ('ancient', 0.044444444444444446), ('held', 0.044444444444444446), ('winner', 0.044444444444444446), ('using', 0.044444444444444446), ('contestants', 0.044444444444444446), ('country', 0.044444444444444446), ('decide', 0.044444444444444446), ('equinox', 0.044444444444444446), ('female', 0.044444444444444446), ('man', 0.044444444444444446), ('play', 0.044444444444444446), ('hemisphere', 0.044444444444444446), ('solstice', 0.044444444444444446), ('every', 0.044444444444444446), ('year', 0.044444444444444446), ('game', 0.044444444444444446), ('high', 0.044444444444444446), ('adult', 0.044444444444444446)]
===================================================================
Page Rank of the vertices of RGO Definition Graph (a form of Eigenvector Centrality)
===================================================================
[('volleyball', 0.11163569503675626), ('Olympic_Games', 0.10681148050717738), ('summer', 0.10164718785875916), ('tournament', 0.08649438803234395), ('woman', 0.06169315914677091), ('games', 0.021529078497540106), ('opposed', 0.013748324692384947), ('person', 0.013748324692384947), ('female', 0.013748324692384947), ('man', 0.013748324692384947), ('adult', 0.013748324692384947), ('warmest', 0.0128604573876741), ('extends', 0.0128604573876741), ('northern', 0.0128604573876741), ('season', 0.0128604573876741), ('autumnal', 0.0128604573876741), ('equinox', 0.0128604573876741), ('hemisphere', 0.0128604573876741), ('solstice', 0.0128604573876741), ('year', 0.0128604573876741), ('ball', 0.012749473974585245), ('teams', 0.012749473974585245), ('hit', 0.012749473974585245), ('hands', 0.012749473974585245), ('two', 0.012749473974585245), ('net', 0.012749473974585245), ('inflated', 0.012749473974585245), ('using', 0.012749473974585245), ('game', 0.012749473974585245), ('high', 0.012749473974585245), ('competition', 0.012450500670504686), ('series', 0.012450500670504686), ('sporting', 0.012450500670504686), ('winner', 0.012450500670504686), ('contestants', 0.012450500670504686), ('decide', 0.012450500670504686), ('play', 0.012450500670504686), ('modern', 0.012339447392252808), ('years', 0.012339447392252808), ('selected', 0.012339447392252808), ('4', 0.012339447392252808), ('revival', 0.012339447392252808), ('ancient', 0.012339447392252808), ('held', 0.012339447392252808), ('country', 0.012339447392252808), ('every', 0.012339447392252808)]
2
RecursiveGlossOverlapGraph(): textgraph =  [('modern', 'Olympic_Games'), ('Olympic_Games', 'modern'), ('Olympic_Games', 'games'), ('Olympic_Games', 'years'), ('Olympic_Games', 'selected'), ('Olympic_Games', '4'), ('Olympic_Games', 'revival'), ('Olympic_Games', 'ancient'), ('Olympic_Games', 'held'), ('Olympic_Games', 'country'), ('Olympic_Games', 'every'), ('warmest', 'summer'), ('summer', 'warmest'), ('summer', 'summer'), ('summer', 'extends'), ('summer', 'northern'), ('summer', 'season'), ('summer', 'autumnal'), ('summer', 'equinox'), ('summer', 'hemisphere'), ('summer', 'solstice'), ('summer', 'year'), ('ball', 'volleyball'), ('volleyball', 'ball'), ('volleyball', 'teams'), ('volleyball', 'hit'), ('volleyball', 'hands'), ('volleyball', 'two'), ('volleyball', 'net'), ('volleyball', 'inflated'), ('volleyball', 'using'), ('volleyball', 'game'), ('volleyball', 'high'), ('competition', 'tournament'), ('tournament', 'competition'), ('tournament', 'games'), ('tournament', 'series'), ('tournament', 'sporting'), ('tournament', 'winner'), ('tournament', 'contestants'), ('tournament', 'decide'), ('tournament', 'play'), ('teams', 'volleyball'), ('hit', 'volleyball'), ('extends', 'summer'), ('games', 'Olympic_Games'), ('games', 'tournament'), ('opposed', 'woman'), ('woman', 'opposed'), ('woman', 'person'), ('woman', 'female'), ('woman', 'man'), ('woman', 'adult'), ('series', 'tournament'), ('hands', 'volleyball'), ('northern', 'summer'), ('years', 'Olympic_Games'), ('season', 'summer'), ('sporting', 'tournament'), ('selected', 'Olympic_Games'), ('autumnal', 'summer'), ('two', 'volleyball'), ('net', 'volleyball'), ('person', 'woman'), ('inflated', 'volleyball'), ('4', 'Olympic_Games'), ('revival', 'Olympic_Games'), ('ancient', 'Olympic_Games'), ('held', 'Olympic_Games'), ('winner', 'tournament'), ('using', 'volleyball'), ('contestants', 'tournament'), ('country', 'Olympic_Games'), ('decide', 'tournament'), ('equinox', 'summer'), ('female', 'woman'), ('man', 'woman'), ('play', 'tournament'), ('hemisphere', 'summer'), ('solstice', 'summer'), ('every', 'Olympic_Games'), ('year', 'summer'), ('game', 'volleyball'), ('high', 'volleyball'), ('adult', 'woman')]
Answer Textgraph  10 : ([('modern', 2), ('Olympic_Games', 2), ('warmest', 2), ('summer', 2), ('ball', 2), ('volleyball', 2), ('competition', 2), ('tournament', 2), ('teams', 2), ('hit', 2), ('extends', 2), ('games', 2), ('opposed', 2), ('woman', 2), ('series', 2), ('hands', 2), ('northern', 2), ('years', 2), ('season', 2), ('sporting', 2), ('selected', 2), ('autumnal', 2), ('two', 2), ('net', 2), ('person', 2), ('inflated', 2), ('4', 2), ('revival', 2), ('ancient', 2), ('held', 2), ('winner', 2), ('using', 2), ('contestants', 2), ('country', 2), ('decide', 2), ('equinox', 2), ('female', 2), ('man', 2), ('play', 2), ('hemisphere', 2), ('solstice', 2), ('every', 2), ('year', 2), ('game', 2), ('high', 2), ('adult', 2)], [('volleyball', 0.11163569503675626), ('Olympic_Games', 0.10681148050717738), ('summer', 0.10164718785875916), ('tournament', 0.08649438803234395), ('woman', 0.06169315914677091), ('games', 0.021529078497540106), ('opposed', 0.013748324692384947), ('person', 0.013748324692384947), ('female', 0.013748324692384947), ('man', 0.013748324692384947), ('adult', 0.013748324692384947), ('warmest', 0.0128604573876741), ('extends', 0.0128604573876741), ('northern', 0.0128604573876741), ('season', 0.0128604573876741), ('autumnal', 0.0128604573876741), ('equinox', 0.0128604573876741), ('hemisphere', 0.0128604573876741), ('solstice', 0.0128604573876741), ('year', 0.0128604573876741), ('ball', 0.012749473974585245), ('teams', 0.012749473974585245), ('hit', 0.012749473974585245), ('hands', 0.012749473974585245), ('two', 0.012749473974585245), ('net', 0.012749473974585245), ('inflated', 0.012749473974585245), ('using', 0.012749473974585245), ('game', 0.012749473974585245), ('high', 0.012749473974585245), ('competition', 0.012450500670504686), ('series', 0.012450500670504686), ('sporting', 0.012450500670504686), ('winner', 0.012450500670504686), ('contestants', 0.012450500670504686), ('decide', 0.012450500670504686), ('play', 0.012450500670504686), ('modern', 0.012339447392252808), ('years', 0.012339447392252808), ('selected', 0.012339447392252808), ('4', 0.012339447392252808), ('revival', 0.012339447392252808), ('ancient', 0.012339447392252808), ('held', 0.012339447392252808), ('country', 0.012339447392252808), ('every', 0.012339447392252808)])
Attention from Definition Graph: [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]]
Attention slice from Definition Graph: [[0.5, 0.5, 0.5], [0.05, 0.05, 0.05], [0.5, 0.5, 0.5]]
weights: [1, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  1.012
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  2.0132
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights: [1.012, 2.0132, 3]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  3.0338
LinearPerceptronGradient() weight update iteration: deltaw =  [0.12000000000000002, 0.13200000000000003, 0.33799999999999997]
weights updated after Gradient :  [1.012, 2.0132, 3.0338]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Query Weights: [[1.012, 2.0132, 3.0338], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
weights: [4, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  4.024
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  5.0504
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights: [4.024, 5.0504, 6]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  6.2636
LinearPerceptronGradient() weight update iteration: deltaw =  [0.24000000000000005, 0.504, 2.636]
weights updated after Gradient :  [4.024, 5.0504, 6.2636]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Key Weights: [[4.024, 5.0504, 6.2636], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
weights: [7, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  7.036
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  8.0876
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights: [7.036, 8.0876, 9]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  9.4934
LinearPerceptronGradient() weight update iteration: deltaw =  [0.36, 0.876, 4.934]
weights updated after Gradient :  [7.036, 8.0876, 9.4934]
converged: True
weights: [0.1, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  0.11580000000000001
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.3, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  0.31758
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights: [0.11580000000000001, 0.31758, 0.5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.05, 0.05, 0.05]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  0.52147
LinearPerceptronGradient() weight update iteration: deltaw =  [0.15800000000000003, 0.17580000000000004, 0.21470000000000006]
weights updated after Gradient :  [0.11580000000000001, 0.31758, 0.52147]
converged: True
weights: [3, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 0 ] =  3.02
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 1 ] =  4.038
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights: [3.02, 4.038, 5]
variables: [[0.1, 0.3, 0.5], [0.1, 0.1, 0.1], [0.2, 0.3, 0.5]]
outputs: [0.5, 0.5, 0.5]
LinearPerceptronGradient() weight update iteration: Ascending
LinearPerceptronGradient() weight update iteration: weights[ 2 ] =  5.187
LinearPerceptronGradient() weight update iteration: deltaw =  [0.2, 0.38, 1.87]
weights updated after Gradient :  [3.02, 4.038, 5.187]
converged: True
Learnt Values Weights: [[7.036, 8.0876, 9.4934], [0.11580000000000001, 0.31758, 0.52147], [3.02, 4.038, 5.187]]
Query weight for textgraph edge ( modern , modern ): 1.012
Key weight for textgraph edge ( modern , modern ): 4.024
Value weight for textgraph edge ( modern , modern ): 7.036
Query weight for textgraph edge ( modern , Olympic_Games ): 2.0132
Key weight for textgraph edge ( modern , Olympic_Games ): 5.0504
Value weight for textgraph edge ( modern , Olympic_Games ): 8.0876
Query weight for textgraph edge ( modern , warmest ): 3.0338
Key weight for textgraph edge ( modern , warmest ): 6.2636
Value weight for textgraph edge ( modern , warmest ): 9.4934
Query weight for textgraph edge ( Olympic_Games , modern ): 0.11580000000000001
Key weight for textgraph edge ( Olympic_Games , modern ): 0.11580000000000001
Value weight for textgraph edge ( Olympic_Games , modern ): 0.11580000000000001
Query weight for textgraph edge ( Olympic_Games , Olympic_Games ): 0.31758
Key weight for textgraph edge ( Olympic_Games , Olympic_Games ): 0.31758
Value weight for textgraph edge ( Olympic_Games , Olympic_Games ): 0.31758
Query weight for textgraph edge ( Olympic_Games , warmest ): 0.52147
Key weight for textgraph edge ( Olympic_Games , warmest ): 0.52147
Value weight for textgraph edge ( Olympic_Games , warmest ): 0.52147
Query weight for textgraph edge ( warmest , modern ): 3.02
Key weight for textgraph edge ( warmest , modern ): 3.02
Value weight for textgraph edge ( warmest , modern ): 3.02
Query weight for textgraph edge ( warmest , Olympic_Games ): 4.038
Key weight for textgraph edge ( warmest , Olympic_Games ): 4.038
Value weight for textgraph edge ( warmest , Olympic_Games ): 4.038
Query weight for textgraph edge ( warmest , warmest ): 5.187
Key weight for textgraph edge ( warmest , warmest ): 5.187
Value weight for textgraph edge ( warmest , warmest ): 5.187
