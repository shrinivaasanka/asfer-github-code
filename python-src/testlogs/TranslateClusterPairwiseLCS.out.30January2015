##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#2#8#0#5a#0#36#14#9#0#0#7]:[0#2#8#0#5a#0#36#14#9#0#0#7]

##################################################################
lcs= [0#2#8#0#5a#0#36#14#9#0#0#7]

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= [0#2#8#0#5a#0#36#14#9#0#0#7]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#0#8a#37#2#5#6#1#49#0#0#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#5a#

##################################################################
lcs= #0#5a#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #0#5a#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 4 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 5 ,prefix= 0#2#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Jupiter  in  Leo | | Ascendant in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#0#8#5#a#0#146#0#9#3#7#2]:a#0#

##################################################################
lcs= a#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= a#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 0 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 9 ,prefix= 0#2#8#0#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#8#0#7#0#0#56#249#13#0#0#a]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 3 ,prefix= 0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#0#8a#37#2#5#6#1#49#0#0#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#0#8a#0#2#14#36#0#9#7#0#5]:0#2#

##################################################################
lcs= 0#2#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= 0#2#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Moon  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 3 ,prefix= 0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#0#8#5#a#0#146#0#9#3#7#2]:a#0#

##################################################################
lcs= a#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= a#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 0 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 9 ,prefix= 0#2#8#0#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#57#28#0#0#3#14a#0#69#0#0#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#8#0#7#0#0#56#249#13#0#0#a]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 3 ,prefix= 0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#57a#28#0#0#3#14#0#69#0#0#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 18 ,prefix= 0#2#8#0#5a#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [7#0#2#0#9a#0#3#56#14#0#8#0]:a#0#3

##################################################################
lcs= a#0#3

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= a#0#3

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 4 ;len(str2)= 6 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 9 ,prefix= 0#2#8#0#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Leo | Unoccupied  in  Virgo | Mars  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 3 ,prefix= 0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#8#0#147#0#356#2#9#0#0#a#0]:#9#0#0#

##################################################################
lcs= #9#0#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #9#0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#0#78#a#2#5#0#13#49#6#0#0]:0#0#7

##################################################################
lcs= 0#0#7

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= 0#0#7

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 11
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#0#5#9a#0#2#3#14#67#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 3 ,prefix= 0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#8#0#147#0#356#2#9#0#0#a#0]:#9#0#0#

##################################################################
lcs= #9#0#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #9#0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 3 ,prefix= 0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#0#78#a#2#5#0#13#49#6#0#0]:0#0#7

##################################################################
lcs= 0#0#7

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= 0#0#7

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 11
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#0#8#37a#2#5#6#1#49#0#0#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#5a#

##################################################################
lcs= #0#5a#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #0#5a#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 4 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 5 ,prefix= 0#2#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Jupiter  in  Leo | | Ascendant in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#9#0#0

##################################################################
lcs= #9#0#0

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #9#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 18 ,prefix= 0#2#8#0#5a#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#0#8#2#5#0#36#14#9#0#a#7]:#0#36#14#9#0#

##################################################################
lcs= #0#36#14#9#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #0#36#14#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 14 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 14 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= 6 ; str2[s2]= 6 ;s2= 4 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 6 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 7 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 8 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 9 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 10 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 11 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 12 ;len(str2)= 14 ; s1= 10
asferfind(): issubstring = True, beg= 10
lcsbeg= 10
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 10 ,prefix= 0#2#8#0#5a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Virgo | Mars  in  Libra | Venus  in  Libra | Sun  in  Scorpio | Mercury  in  Scorpio | Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#0#36#14#9

##################################################################
lcs= #0#36#14#9

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #0#36#14#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 11 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 11 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 11 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 11 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 11 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 11 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 11 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 11 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 11 ; s1= 10
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 11 ; s1= 10
asferfind(): str1[s1+s2]= 6 ; str2[s2]= 6 ;s2= 4 ;len(str2)= 11 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 11 ; s1= 10
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 6 ;len(str2)= 11 ; s1= 10
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 7 ;len(str2)= 11 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 8 ;len(str2)= 11 ; s1= 10
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 9 ;len(str2)= 11 ; s1= 10
asferfind(): issubstring = True, beg= 10
lcsbeg= 10
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 10 ,prefix= 0#2#8#0#5a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Virgo | Mars  in  Libra | Venus  in  Libra | Sun  in  Scorpio | Mercury  in  Scorpio | Ketu  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#0#8#5#0#a#146#0#9#3#7#2]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 6
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 11
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 11
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [0#0#8#2#5#0#36#14#9#0#a#7]:#0#36#14#9#0#

##################################################################
lcs= #0#36#14#9#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #0#36#14#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 14 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 14 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= 6 ; str2[s2]= 6 ;s2= 4 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 6 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 7 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 8 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 9 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 10 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 11 ;len(str2)= 14 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 12 ;len(str2)= 14 ; s1= 10
asferfind(): issubstring = True, beg= 10
lcsbeg= 10
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 10 ,prefix= 0#2#8#0#5a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Virgo | Mars  in  Libra | Venus  in  Libra | Sun  in  Scorpio | Mercury  in  Scorpio | Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and [4#7#3#58#0#2#0#a#0#9#0#16]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 0#2#8#0#5a#0#36#14#9#0#0#7 ,lcsbeg= 18 ,prefix= 0#2#8#0#5a#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and :

##################################################################
lcs= 

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#2#8#0#5a#0#36#14#9#0#0#7] and :

##################################################################
lcs= 

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8a#37#2#5#6#1#49#0#0#0]

##################################################################
lcs= [0#0#8a#37#2#5#6#1#49#0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8a#37#2#5#6#1#49#0#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8a#37#2#5#6#1#49#0#0#0]

##################################################################
lcs= [0#0#8a#37#2#5#6#1#49#0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8a#37#2#5#6#1#49#0#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:[0#0#8a#

##################################################################
lcs= [0#0#8a#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8a#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:9#0#0#0]

##################################################################
lcs= 9#0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 9#0#0#0]

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:9#0#0#0]

##################################################################
lcs= 9#0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 9#0#0#0]

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#8

##################################################################
lcs= #0#8

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#8

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 5 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8a#37#2#5#6#1#49#0#0#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#8

##################################################################
lcs= #0#8

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#8

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 5 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8a#37#2#5#6#1#49#0#0#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:#2#5#6#1#49#0#0#0]

##################################################################
lcs= #2#5#6#1#49#0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #2#5#6#1#49#0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 19 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 19 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 19 ; s1= 6
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:9#0#0

##################################################################
lcs= 9#0#0

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 9#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#0#8a#37#2#5#6#1#49#0#0#0 ,lcsbeg= 19 ,prefix= 0#0#8a#37#2#5#6#1#4
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:9#0#

##################################################################
lcs= 9#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 9#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#0#8a#37#2#5#6#1#49#0#0#0 ,lcsbeg= 19 ,prefix= 0#0#8a#37#2#5#6#1#4
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and :

##################################################################
lcs= 

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and :

##################################################################
lcs= 

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#0#0#7

##################################################################
lcs= #0#0#7

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#7

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 5 ;len(str2)= 7 ; s1= 2
asferfind(): issubstring = True, beg= 2
lcsbeg= 2
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 2 ,prefix= 28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Saturn  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:[28#0#0#7#0#5a#9#346#1#0#0#0]

##################################################################
lcs= [28#0#0#7#0#5a#9#346#1#0#0#0]

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= [28#0#0#7#0#5a#9#346#1#0#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#9#346#1#0#0#0]

##################################################################
lcs= #9#346#1#0#0#0]

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #9#346#1#0#0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 10
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:0#0#

##################################################################
lcs= 0#0#

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 0#0#

##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 3 ,prefix= 28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#7#0#

##################################################################
lcs= #0#7#0#

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #0#7#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 4
asferfind(): issubstring = True, beg= 4
lcsbeg= 4
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 4 ,prefix= 28#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:#7#0#5

##################################################################
lcs= #7#0#5

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #7#0#5

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 6
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 7 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 6
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 5 ;len(str2)= 7 ; s1= 6
asferfind(): issubstring = True, beg= 6
lcsbeg= 6
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 6 ,prefix= 28#0#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo | Jupiter  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#7#0#

##################################################################
lcs= #0#7#0#

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #0#7#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 4
asferfind(): issubstring = True, beg= 4
lcsbeg= 4
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 4 ,prefix= 28#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:0#0#

##################################################################
lcs= 0#0#

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 0#0#

##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 3 ,prefix= 28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:28#0#0#

##################################################################
lcs= 28#0#0#

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 28#0#0#

##########################################
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 0 ;len(str2)= 8 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 8 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Aries | Rahu  in  Aries | Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#7#0#

##################################################################
lcs= #0#7#0#

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #0#7#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 4
asferfind(): issubstring = True, beg= 4
lcsbeg= 4
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 4 ,prefix= 28#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:28#0#0#

##################################################################
lcs= 28#0#0#

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 28#0#0#

##########################################
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 0 ;len(str2)= 8 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 8 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Aries | Rahu  in  Aries | Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#0#

##################################################################
lcs= #0#0#

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 2
asferfind(): issubstring = True, beg= 2
lcsbeg= 2
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 2 ,prefix= 28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:7#0#

##################################################################
lcs= 7#0#

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 7#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 0 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 7 ,prefix= 28#0#0#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:7#0#

##################################################################
lcs= 7#0#

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 7#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 0 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 7 ,prefix= 28#0#0#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:8#0#0

##################################################################
lcs= 8#0#0

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 8#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 1 ,prefix= 2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Aries | Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 2
asferfind(): issubstring = True, beg= 2
lcsbeg= 2
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 2 ,prefix= 28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:0#0#7

##################################################################
lcs= 0#0#7

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 0#0#7

##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 3 ,prefix= 28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Saturn  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:8#0#0

##################################################################
lcs= 8#0#0

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 8#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 1 ,prefix= 2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Aries | Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 2
asferfind(): issubstring = True, beg= 2
lcsbeg= 2
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 2 ,prefix= 28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:8#0#0

##################################################################
lcs= 8#0#0

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 8#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 1 ,prefix= 2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Aries | Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:0#0#7

##################################################################
lcs= 0#0#7

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 0#0#7

##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 3 ,prefix= 28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Saturn  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#9#346#1#0#0#0]

##################################################################
lcs= #9#346#1#0#0#0]

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #9#346#1#0#0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 10
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#7#0#5a#9#346#1#0#0#0]

##################################################################
lcs= #7#0#5a#9#346#1#0#0#0]

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #7#0#5a#9#346#1#0#0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 23 ; s1= 2
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#0#

##################################################################
lcs= 0#0#

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 0#0#

##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 3 ,prefix= 28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#0#0#7

##################################################################
lcs= #0#0#7

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#7

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 2
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 5 ;len(str2)= 7 ; s1= 2
asferfind(): issubstring = True, beg= 2
lcsbeg= 2
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 2 ,prefix= 28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Saturn  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:0#0#

##################################################################
lcs= 0#0#

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 0#0#

##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 3 ,prefix= 28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#0#

##################################################################
lcs= 0#0#

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 0#0#

##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 3 ,prefix= 28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:8#0#

##################################################################
lcs= 8#0#

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 28#0#0#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 1 ,prefix= 2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and :

##################################################################
lcs= 

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#0#0#7#0#5a#9#346#1#0#0#0] and :

##################################################################
lcs= 

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#9#346#1#0#0#0]

##################################################################
lcs= #9#346#1#0#0#0]

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #9#346#1#0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 8
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:[8#0#2#7a#0#5#9#346#1#0#0#0]

##################################################################
lcs= [8#0#2#7a#0#5#9#346#1#0#0#0]

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= [8#0#2#7a#0#5#9#346#1#0#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:a#0#

##################################################################
lcs= a#0#

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= a#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 0 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 8#0#2#7a#0#5#9#346#1#0#0#0 ,lcsbeg= 7 ,prefix= 8#0#2#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0#

##################################################################
lcs= #0#0#

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:#0#2#

##################################################################
lcs= #0#2#

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 8#0#2#7a#0#5#9#346#1#0#0#0 ,lcsbeg= 1 ,prefix= 8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 8#0#2#7a#0#5#9#346#1#0#0#0 ,lcsbeg= 1 ,prefix= 8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:a#0#

##################################################################
lcs= a#0#

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= a#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 0 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 8#0#2#7a#0#5#9#346#1#0#0#0 ,lcsbeg= 7 ,prefix= 8#0#2#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0#

##################################################################
lcs= #0#0#

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#5#

##################################################################
lcs= #0#5#

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#5#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 8#0#2#7a#0#5#9#346#1#0#0#0 ,lcsbeg= 8 ,prefix= 8#0#2#7a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Jupiter  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 8#0#2#7a#0#5#9#346#1#0#0#0 ,lcsbeg= 1 ,prefix= 8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 8#0#2#7a#0#5#9#346#1#0#0#0 ,lcsbeg= 1 ,prefix= 8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:#0#5#9

##################################################################
lcs= #0#5#9

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#5#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 5 ;len(str2)= 7 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 8#0#2#7a#0#5#9#346#1#0#0#0 ,lcsbeg= 8 ,prefix= 8#0#2#7a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Jupiter  in  Virgo | Ketu  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#5#9#346#1#0#0#0]

##################################################################
lcs= #0#5#9#346#1#0#0#0]

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#5#9#346#1#0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 20 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 20 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 20 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 20 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 20 ; s1= 5
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#9#346#1#0#0#0]

##################################################################
lcs= #9#346#1#0#0#0]

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #9#346#1#0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 8
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#0#

##################################################################
lcs= 0#0#

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= 0#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 2
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 9
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:#9#3

##################################################################
lcs= #9#3

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= #9#3

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 5 ; s1= 12
asferfind(): issubstring = True, beg= 12
lcsbeg= 12
computebhava(): str1= 8#0#2#7a#0#5#9#346#1#0#0#0 ,lcsbeg= 12 ,prefix= 8#0#2#7a#0#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Libra | Mars  in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#0#

##################################################################
lcs= 0#0#

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= 0#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 2
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 9
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:8#0#2#

##################################################################
lcs= 8#0#2#

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= 8#0#2#

##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 4 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 8#0#2#7a#0#5#9#346#1#0#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Aries | Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and :

##################################################################
lcs= 

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7a#0#5#9#346#1#0#0#0] and :

##################################################################
lcs= 

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#2#8#0#5a#0#36#14#9#0#0#7]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [28#0#0#7#0#5a#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [8#0#2#7a#0#5#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8#5#a#0#146#0#9#3#7#2]

##################################################################
lcs= [0#0#8#5#a#0#146#0#9#3#7#2]

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8#5#a#0#146#0#9#3#7#2]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#8#a#7#0#0#56#249#13#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8a#0#2#14#36#0#9#7#0#5]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#0#0#358#27#a#14#6#0#9#0]:6#0#9#

##################################################################
lcs= 6#0#9#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 6#0#9#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 6 ; str2[s2]= 6 ;s2= 0 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 4 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 14
asferfind(): issubstring = True, beg= 14
lcsbeg= 14
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 14 ,prefix= 0#0#8#5#a#0#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Venus  in  Libra | Unoccupied  in  Scorpio | Ketu  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#8#0#7#0#0#5#469a#13#0#2#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8#5#a#0#146#0#9#3#7#2]

##################################################################
lcs= [0#0#8#5#a#0#146#0#9#3#7#2]

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8#5#a#0#146#0#9#3#7#2]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#57#28#0#0#3#14a#0#69#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#57a#28#0#0#3#14#0#69#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#5#3#7a#8#2#16#4#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#8#

##################################################################
lcs= #0#8#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#8#

##################################################################
lcs= #0#8#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#9#

##################################################################
lcs= #0#9#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 15
asferfind(): issubstring = True, beg= 15
lcsbeg= 15
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 15 ,prefix= 0#0#8#5#a#0#146
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Scorpio | Ketu  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#14

##################################################################
lcs= #0#14

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #0#14

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 4 ;len(str2)= 6 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 9 ,prefix= 0#0#8#5#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Virgo | Sun  in  Libra | Mercury  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#5#9a#0#2#3#14#67#8#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#14

##################################################################
lcs= #0#14

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #0#14

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 4 ;len(str2)= 6 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 9 ,prefix= 0#0#8#5#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Virgo | Sun  in  Libra | Mercury  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#9#

##################################################################
lcs= #0#9#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 15
asferfind(): issubstring = True, beg= 15
lcsbeg= 15
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 15 ,prefix= 0#0#8#5#a#0#146
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Scorpio | Ketu  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8#37a#2#5#6#1#49#0#0#0]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [28#a#0#7#0#5#9#346#1#0#0#0]:#a#0#

##################################################################
lcs= #a#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #a#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 7 ,prefix= 0#0#8#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [8#0#2#7#0#5a#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#14

##################################################################
lcs= #0#14

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #0#14

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 4 ;len(str2)= 6 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 9 ,prefix= 0#0#8#5#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Virgo | Sun  in  Libra | Mercury  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8#2#5#0#36#14#9a#0#0#7]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8#5#0#a#146#0#9#3#7#2]:#146#0#9#3#7#2]

##################################################################
lcs= #146#0#9#3#7#2]

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #146#0#9#3#7#2]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 7
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [4#7#3#58#0#2#0#a#0#9#0#16]:#a#0#

##################################################################
lcs= #a#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #a#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 7 ,prefix= 0#0#8#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and :

##################################################################
lcs= 

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and :

##################################################################
lcs= 

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#a#7#0#0#56#249#13#0#0#0 ,lcsbeg= 7 ,prefix= 0#8#a#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#a#7#0#0#56#249#13#0#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:[0#8#a#7#0#0#56#249#13#0#0#0]

##################################################################
lcs= [0#8#a#7#0#0#56#249#13#0#0#0]

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= [0#8#a#7#0#0#56#249#13#0#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#7#0#0#56#249#13#0#0#

##################################################################
lcs= #7#0#0#56#249#13#0#0#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #7#0#0#56#249#13#0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 22 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 22 ; s1= 3
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:#7#0#

##################################################################
lcs= #7#0#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#8#a#7#0#0#56#249#13#0#0#0 ,lcsbeg= 5 ,prefix= 0#8#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#7#0#0#5

##################################################################
lcs= #7#0#0#5

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #7#0#0#5

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 9 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 9 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 9 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 9 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 9 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 9 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 9 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 9 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 9 ; s1= 5
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 7 ;len(str2)= 9 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#8#a#7#0#0#56#249#13#0#0#0 ,lcsbeg= 5 ,prefix= 0#8#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo | Unoccupied  in  Virgo | Jupiter  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#a#7#0#0#56#249#13#0#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#7#0#0#56#249#13#0#0#

##################################################################
lcs= #7#0#0#56#249#13#0#0#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #7#0#0#56#249#13#0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 22 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 22 ; s1= 3
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#a#7#0#0#56#249#13#0#0#0 ,lcsbeg= 7 ,prefix= 0#8#a#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#a#7#0#0#56#249#13#0#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#a#7#0#0#56#249#13#0#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:[0#8#

##################################################################
lcs= [0#8#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= [0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:0#0#5

##################################################################
lcs= 0#0#5

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= 0#0#5

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 6 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#8#a#7#0#0#56#249#13#0#0#0 ,lcsbeg= 8 ,prefix= 0#8#a#7#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo | Jupiter  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#7#0#0#

##################################################################
lcs= #7#0#0#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #7#0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#8#a#7#0#0#56#249#13#0#0#0 ,lcsbeg= 5 ,prefix= 0#8#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:[0#8#

##################################################################
lcs= [0#8#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= [0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#a#7#0#0#56#249#13#0#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#a#7#0#0#56#249#13#0#0#0 ,lcsbeg= 7 ,prefix= 0#8#a#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#a#7#0#0#56#249#13#0#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#a#7#0#0#56#249#13#0#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:#a#

##################################################################
lcs= #a#

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= #a#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 4 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 4 ; s1= 3
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 1 ;len(str2)= 4 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 4 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#a#7#0#0#56#249#13#0#0#0 ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and :

##################################################################
lcs= 

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#a#7#0#0#56#249#13#0#0#0] and :

##################################################################
lcs= 

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#7#0#

##################################################################
lcs= #0#7#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8#5#a#0#146#0#9#3#7#2]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#8#a#7#0#0#56#249#13#0#0#0]:#7#0#0#56#249#13#0#0#

##################################################################
lcs= #7#0#0#56#249#13#0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #7#0#0#56#249#13#0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 22 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 22 ; s1= 3
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#8#0#7#0#0#56#249#13#0#0#a]:[0#8#0#7#0#0#56#249#13#0#0#a]

##################################################################
lcs= [0#8#0#7#0#0#56#249#13#0#0#a]

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= [0#8#0#7#0#0#56#249#13#0#0#a]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8a#0#2#14#36#0#9#7#0#5]:#7#0#

##################################################################
lcs= #7#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 5 ,prefix= 0#8#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#8#0#7#0#0#5#469a#13#0#2#0]:[0#8#0#7#0#0#5

##################################################################
lcs= [0#8#0#7#0#0#5

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= [0#8#0#7#0#0#5

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8#5#a#0#146#0#9#3#7#2]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#8#0#7#0#0#56#249#13#0#0#a]:[0#8#0#7#0#0#56#249#13#0#0#a]

##################################################################
lcs= [0#8#0#7#0#0#56#249#13#0#0#a]

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= [0#8#0#7#0#0#56#249#13#0#0#a]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [7#0#2#0#9#0#3#56#14a#0#8#0]:0#8#0

##################################################################
lcs= 0#8#0

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 0#8#0

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [7#0#2#0#9a#0#3#56#14#0#8#0]:0#8#0

##################################################################
lcs= 0#8#0

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 0#8#0

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#8#0#147#0#356#2#9#0#0#a#0]:[0#8#0#

##################################################################
lcs= [0#8#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= [0#8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#7

##################################################################
lcs= #0#7

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#7

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#5#9a#0#2#3#14#67#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#7#0#0#

##################################################################
lcs= #7#0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #7#0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 5 ,prefix= 0#8#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#8#0#147#0#356#2#9#0#0#a#0]:[0#8#0#

##################################################################
lcs= [0#8#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= [0#8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#7

##################################################################
lcs= #0#7

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#7

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8#37a#2#5#6#1#49#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#7#0#

##################################################################
lcs= #0#7#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#7#0#

##################################################################
lcs= #7#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 5 ,prefix= 0#8#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#0

##################################################################
lcs= #0#0

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 5 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8#5#0#a#146#0#9#3#7#2]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [4#7#3#58#0#2#0#a#0#9#0#16]:8#0#

##################################################################
lcs= 8#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 8#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 5 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 2
asferfind(): issubstring = True, beg= 2
lcsbeg= 2
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 2 ,prefix= 0#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and :

##################################################################
lcs= 

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and :

##################################################################
lcs= 

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8a#37#2#5#6#1#49#0#0#0]

##################################################################
lcs= [0#0#8a#37#2#5#6#1#49#0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8a#37#2#5#6#1#49#0#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8a#37#2#5#6#1#49#0#0#0]

##################################################################
lcs= [0#0#8a#37#2#5#6#1#49#0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8a#37#2#5#6#1#49#0#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:[0#0#8a#

##################################################################
lcs= [0#0#8a#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8a#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:9#0#0#0]

##################################################################
lcs= 9#0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 9#0#0#0]

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:9#0#0#0]

##################################################################
lcs= 9#0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 9#0#0#0]

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#8

##################################################################
lcs= #0#8

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#8

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 5 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8a#37#2#5#6#1#49#0#0#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#8

##################################################################
lcs= #0#8

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#8

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 5 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8a#37#2#5#6#1#49#0#0#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:#2#5#6#1#49#0#0#0]

##################################################################
lcs= #2#5#6#1#49#0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #2#5#6#1#49#0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 19 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 19 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 19 ; s1= 6
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:9#0#0

##################################################################
lcs= 9#0#0

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 9#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#0#8a#37#2#5#6#1#49#0#0#0 ,lcsbeg= 19 ,prefix= 0#0#8a#37#2#5#6#1#4
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:9#0#

##################################################################
lcs= 9#0#

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 9#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#0#8a#37#2#5#6#1#49#0#0#0 ,lcsbeg= 19 ,prefix= 0#0#8a#37#2#5#6#1#4
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and :

##################################################################
lcs= 

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#37#2#5#6#1#49#0#0#0] and :

##################################################################
lcs= 

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#2#8#0#5a#0#36#14#9#0#0#7]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8a#0#2#14#36#0#9#7#0#5 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8a#

##################################################################
lcs= [0#0#8a#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= [0#0#8a#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#7#0#5

##################################################################
lcs= #7#0#5

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= #7#0#5

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 16
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 6
asferfind(): issubstring = True, beg= 6
lcsbeg= 6
computebhava(): str1= 0#0#8a#0#2#14#36#0#9#7#0#5 ,lcsbeg= 6 ,prefix= 0#0#8a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Moon  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#8#a#7#0#0#56#249#13#0#0#0]:#7#0#

##################################################################
lcs= #7#0#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= #7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 16
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#8#0#7#0#0#56#249#13#0#0#a]:#7#0#

##################################################################
lcs= #7#0#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= #7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 16
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8a#

##################################################################
lcs= [0#0#8a#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= [0#0#8a#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#0#8a#0#2#14#36#0#9#7#0#5]:[0#0#8a#0#2#14#36#0#9#7#0#5]

##################################################################
lcs= [0#0#8a#0#2#14#36#0#9#7#0#5]

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= [0#0#8a#0#2#14#36#0#9#7#0#5]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#0#0#0#358#27#a#14#6#0#9#0]:6#0#9#

##################################################################
lcs= 6#0#9#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= 6#0#9#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 6 ; str2[s2]= 6 ;s2= 0 ;len(str2)= 7 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 15
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 15
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 4 ;len(str2)= 7 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 15
asferfind(): issubstring = True, beg= 15
lcsbeg= 15
computebhava(): str1= 0#0#8a#0#2#14#36#0#9#7#0#5 ,lcsbeg= 15 ,prefix= 0#0#8a#0#2#14#3
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Venus  in  Libra | Unoccupied  in  Scorpio | Ketu  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 6
asferfind(): issubstring = True, beg= 6
lcsbeg= 6
computebhava(): str1= 0#0#8a#0#2#14#36#0#9#7#0#5 ,lcsbeg= 6 ,prefix= 0#0#8a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Moon  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#57#28#0#0#3#14a#0#69#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8a#0#2#14#36#0#9#7#0#5 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#8#0#7#0#0#56#249#13#0#0#a]:#7#0#

##################################################################
lcs= #7#0#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= #7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 16
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#57a#28#0#0#3#14#0#69#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8a#0#2#14#36#0#9#7#0#5 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#0#5#3#7a#8#2#16#4#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 6
asferfind(): issubstring = True, beg= 6
lcsbeg= 6
computebhava(): str1= 0#0#8a#0#2#14#36#0#9#7#0#5 ,lcsbeg= 6 ,prefix= 0#0#8a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Moon  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 6
asferfind(): issubstring = True, beg= 6
lcsbeg= 6
computebhava(): str1= 0#0#8a#0#2#14#36#0#9#7#0#5 ,lcsbeg= 6 ,prefix= 0#0#8a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Moon  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#9#

##################################################################
lcs= #0#9#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 16
asferfind(): issubstring = True, beg= 16
lcsbeg= 16
computebhava(): str1= 0#0#8a#0#2#14#36#0#9#7#0#5 ,lcsbeg= 16 ,prefix= 0#0#8a#0#2#14#36
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Scorpio | Ketu  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#8#0#147#0#356#2#9#0#0#a#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8a#0#2#14#36#0#9#7#0#5 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#0#5#9a#0#2#3#14#67#8#0#0]:a#0#2#

##################################################################
lcs= a#0#2#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= a#0#2#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 0 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 4 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#0#8a#0#2#14#36#0#9#7#0#5 ,lcsbeg= 5 ,prefix= 0#0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Gemini | Unoccupied  in  Cancer | Moon  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#8#0#147#0#356#2#9#0#0#a#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8a#0#2#14#36#0#9#7#0#5 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#9#

##################################################################
lcs= #0#9#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 16
asferfind(): issubstring = True, beg= 16
lcsbeg= 16
computebhava(): str1= 0#0#8a#0#2#14#36#0#9#7#0#5 ,lcsbeg= 16 ,prefix= 0#0#8a#0#2#14#36
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Scorpio | Ketu  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#0#8#37a#2#5#6#1#49#0#0#0]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [28#a#0#7#0#5#9#346#1#0#0#0]:#7#0#5

##################################################################
lcs= #7#0#5

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= #7#0#5

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 16
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#7#0#5

##################################################################
lcs= #7#0#5

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= #7#0#5

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 16
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#9#

##################################################################
lcs= #0#9#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 16
asferfind(): issubstring = True, beg= 16
lcsbeg= 16
computebhava(): str1= 0#0#8a#0#2#14#36#0#9#7#0#5 ,lcsbeg= 16 ,prefix= 0#0#8a#0#2#14#36
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Scorpio | Ketu  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#0#8#2#5#0#36#14#9a#0#0#7]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#0#8#5#0#a#146#0#9#3#7#2]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and [4#7#3#58#0#2#0#a#0#9#0#16]:#0#2#

##################################################################
lcs= #0#2#

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 6
asferfind(): issubstring = True, beg= 6
lcsbeg= 6
computebhava(): str1= 0#0#8a#0#2#14#36#0#9#7#0#5 ,lcsbeg= 6 ,prefix= 0#0#8a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Moon  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and :

##################################################################
lcs= 

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8a#0#2#14#36#0#9#7#0#5] and :

##################################################################
lcs= 

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:6#0#9#

##################################################################
lcs= 6#0#9#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= 6#0#9#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:6#0#9#

##################################################################
lcs= 6#0#9#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= 6#0#9#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:[0#0#0#0#358#27#a#14#6#0#9#0]

##################################################################
lcs= [0#0#0#0#358#27#a#14#6#0#9#0]

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= [0#0#0#0#358#27#a#14#6#0#9#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:6#0#9#

##################################################################
lcs= 6#0#9#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= 6#0#9#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#9#0

##################################################################
lcs= #0#9#0

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#9#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 16
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#3

##################################################################
lcs= #0#3

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#3

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 5 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 5 ,prefix= 0#0#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Mars  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#9#0

##################################################################
lcs= #0#9#0

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#9#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 16
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:[0#0#0#0#

##################################################################
lcs= [0#0#0#0#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= [0#0#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#9#0

##################################################################
lcs= #0#9#0

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#9#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 16
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#358#27#a#14#6#0#9#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#9#0

##################################################################
lcs= #0#9#0

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#9#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 16
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:6#0#9#

##################################################################
lcs= 6#0#9#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= 6#0#9#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:#0#9#0

##################################################################
lcs= #0#9#0

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= #0#9#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 16
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and :

##################################################################
lcs= 

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#358#27#a#14#6#0#9#0] and :

##################################################################
lcs= 

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#7#0#

##################################################################
lcs= #0#7#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #0#7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:#7#0#0#5

##################################################################
lcs= #7#0#0#5

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #7#0#0#5

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 9 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 9 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 9 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 9 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 9 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 9 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 9 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 9 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 9 ; s1= 5
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 7 ;len(str2)= 9 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 5 ,prefix= 0#8#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo | Unoccupied  in  Virgo | Jupiter  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:[0#8#0#7#0#0#5

##################################################################
lcs= [0#8#0#7#0#0#5

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= [0#8#0#7#0#0#5

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:#7#0#

##################################################################
lcs= #7#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 5 ,prefix= 0#8#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:[0#8#0#7#0#0#5#469a#13#0#2#0]

##################################################################
lcs= [0#8#0#7#0#0#5#469a#13#0#2#0]

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= [0#8#0#7#0#0#5#469a#13#0#2#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:[0#8#0#7#0#0#5

##################################################################
lcs= [0#8#0#7#0#0#5

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= [0#8#0#7#0#0#5

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:0#0#5#

##################################################################
lcs= 0#0#5#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= 0#0#5#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 0
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 7 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 4
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 8 ,prefix= 0#8#0#7#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo | Jupiter  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#2#0

##################################################################
lcs= #0#2#0

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #0#2#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#2#0

##################################################################
lcs= #0#2#0

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #0#2#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:[0#8#0#

##################################################################
lcs= [0#8#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= [0#8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#7

##################################################################
lcs= #0#7

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #0#7

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:0#0#5#

##################################################################
lcs= 0#0#5#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= 0#0#5#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 0
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 7 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 4
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 8 ,prefix= 0#8#0#7#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo | Jupiter  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#7#0#0#

##################################################################
lcs= #7#0#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #7#0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 5 ,prefix= 0#8#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:[0#8#0#

##################################################################
lcs= [0#8#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= [0#8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#7

##################################################################
lcs= #0#7

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #0#7

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#7#0#

##################################################################
lcs= #0#7#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #0#7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#7#0#

##################################################################
lcs= #7#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 5 ,prefix= 0#8#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#0

##################################################################
lcs= #0#0

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 5 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#5#469a#13#0#2#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:#0#2#0

##################################################################
lcs= #0#2#0

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= #0#2#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and :

##################################################################
lcs= 

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#5#469a#13#0#2#0] and :

##################################################################
lcs= 

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#2#8#0#5a#0#36#14#9#0#0#7]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [28#0#0#7#0#5a#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [8#0#2#7a#0#5#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8#5#a#0#146#0#9#3#7#2]

##################################################################
lcs= [0#0#8#5#a#0#146#0#9#3#7#2]

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8#5#a#0#146#0#9#3#7#2]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#8#a#7#0#0#56#249#13#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8a#0#2#14#36#0#9#7#0#5]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#0#0#358#27#a#14#6#0#9#0]:6#0#9#

##################################################################
lcs= 6#0#9#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 6#0#9#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 6 ; str2[s2]= 6 ;s2= 0 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 4 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 14
asferfind(): issubstring = True, beg= 14
lcsbeg= 14
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 14 ,prefix= 0#0#8#5#a#0#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Venus  in  Libra | Unoccupied  in  Scorpio | Ketu  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#8#0#7#0#0#5#469a#13#0#2#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8#5#a#0#146#0#9#3#7#2]

##################################################################
lcs= [0#0#8#5#a#0#146#0#9#3#7#2]

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8#5#a#0#146#0#9#3#7#2]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#57#28#0#0#3#14a#0#69#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#57a#28#0#0#3#14#0#69#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#5#3#7a#8#2#16#4#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#8#

##################################################################
lcs= #0#8#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#8#

##################################################################
lcs= #0#8#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#9#

##################################################################
lcs= #0#9#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 15
asferfind(): issubstring = True, beg= 15
lcsbeg= 15
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 15 ,prefix= 0#0#8#5#a#0#146
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Scorpio | Ketu  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#14

##################################################################
lcs= #0#14

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #0#14

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 4 ;len(str2)= 6 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 9 ,prefix= 0#0#8#5#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Virgo | Sun  in  Libra | Mercury  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#5#9a#0#2#3#14#67#8#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#14

##################################################################
lcs= #0#14

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #0#14

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 4 ;len(str2)= 6 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 9 ,prefix= 0#0#8#5#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Virgo | Sun  in  Libra | Mercury  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#9#

##################################################################
lcs= #0#9#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 15
asferfind(): issubstring = True, beg= 15
lcsbeg= 15
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 15 ,prefix= 0#0#8#5#a#0#146
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Scorpio | Ketu  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8#37a#2#5#6#1#49#0#0#0]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [28#a#0#7#0#5#9#346#1#0#0#0]:#a#0#

##################################################################
lcs= #a#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #a#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 7 ,prefix= 0#0#8#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [8#0#2#7#0#5a#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#14

##################################################################
lcs= #0#14

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #0#14

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 4 ;len(str2)= 6 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 9 ,prefix= 0#0#8#5#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Virgo | Sun  in  Libra | Mercury  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8#2#5#0#36#14#9a#0#0#7]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8#5#0#a#146#0#9#3#7#2]:#146#0#9#3#7#2]

##################################################################
lcs= #146#0#9#3#7#2]

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #146#0#9#3#7#2]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 7
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and [4#7#3#58#0#2#0#a#0#9#0#16]:#a#0#

##################################################################
lcs= #a#0#

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= #a#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#0#8#5#a#0#146#0#9#3#7#2 ,lcsbeg= 7 ,prefix= 0#0#8#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and :

##################################################################
lcs= 

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#a#0#146#0#9#3#7#2] and :

##################################################################
lcs= 

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:9#0#0#0]

##################################################################
lcs= 9#0#0#0]

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 9#0#0#0]

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:28#0#0#

##################################################################
lcs= 28#0#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 28#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 0 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 5 ,prefix= 0#57#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Gemini | Rahu  in  Gemini | Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 8 ,prefix= 0#57#28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 7 ,prefix= 0#57#28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:9#0#0#0]

##################################################################
lcs= 9#0#0#0]

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 9#0#0#0]

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 8 ,prefix= 0#57#28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#0#3

##################################################################
lcs= #0#0#3

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= #0#0#3

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 4
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 5 ;len(str2)= 7 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 7 ,prefix= 0#57#28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo | Mars  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 7 ,prefix= 0#57#28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 8 ,prefix= 0#57#28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:[0#57#28#0#0#3#14a#0#69#0#0#0]

##################################################################
lcs= [0#57#28#0#0#3#14a#0#69#0#0#0]

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= [0#57#28#0#0#3#14a#0#69#0#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 7 ,prefix= 0#57#28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#28#0#0#3#14

##################################################################
lcs= #28#0#0#3#14

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= #28#0#0#3#14

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 13 ; s1= 1
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 13 ; s1= 4
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 13 ; s1= 4
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 13 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 13 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 13 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 13 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 6 ;len(str2)= 13 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 7 ;len(str2)= 13 ; s1= 4
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 8 ;len(str2)= 13 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 9 ;len(str2)= 13 ; s1= 4
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 10 ;len(str2)= 13 ; s1= 4
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 11 ;len(str2)= 13 ; s1= 4
asferfind(): issubstring = True, beg= 4
lcsbeg= 4
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 4 ,prefix= 0#57
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Gemini | Rahu  in  Gemini | Unoccupied  in  Cancer | Unoccupied  in  Leo | Mars  in  Virgo | Sun  in  Libra | Mercury  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 7 ,prefix= 0#57#28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#14a#0#

##################################################################
lcs= #14a#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= #14a#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 1 ;len(str2)= 8 ; s1= 13
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 2 ;len(str2)= 8 ; s1= 13
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 3 ;len(str2)= 8 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 13
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 13
asferfind(): issubstring = True, beg= 13
lcsbeg= 13
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 13 ,prefix= 0#57#28#0#0#3
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Sun  in  Libra | Mercury  in  Libra | | Ascendant in  Libra | Unoccupied  in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#3#

##################################################################
lcs= #0#3#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= #0#3#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 9 ,prefix= 0#57#28#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Mars  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:8#0#0

##################################################################
lcs= 8#0#0

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 8#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 6
asferfind(): issubstring = True, beg= 6
lcsbeg= 6
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 6 ,prefix= 0#57#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Gemini | Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:8#0#0

##################################################################
lcs= 8#0#0

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 8#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 6
asferfind(): issubstring = True, beg= 6
lcsbeg= 6
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 6 ,prefix= 0#57#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Gemini | Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 4
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 19
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:8#0#0

##################################################################
lcs= 8#0#0

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 8#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 6
asferfind(): issubstring = True, beg= 6
lcsbeg= 6
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 6 ,prefix= 0#57#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Gemini | Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:9#0#0#0]

##################################################################
lcs= 9#0#0#0]

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 9#0#0#0]

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:9#0#0

##################################################################
lcs= 9#0#0

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 9#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 6 ; s1= 21
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 21
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 21
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 21
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 21
asferfind(): issubstring = True, beg= 21
lcsbeg= 21
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 21 ,prefix= 0#57#28#0#0#3#14a#0#6
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 8 ,prefix= 0#57#28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 7 ,prefix= 0#57#28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 8 ,prefix= 0#57#28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 8 ,prefix= 0#57#28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:8#0#

##################################################################
lcs= 8#0#

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 5 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 6
asferfind(): issubstring = True, beg= 6
lcsbeg= 6
computebhava(): str1= 0#57#28#0#0#3#14a#0#69#0#0#0 ,lcsbeg= 6 ,prefix= 0#57#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and :

##################################################################
lcs= 

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57#28#0#0#3#14a#0#69#0#0#0] and :

##################################################################
lcs= 

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#7#0#

##################################################################
lcs= #0#7#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8#5#a#0#146#0#9#3#7#2]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#8#a#7#0#0#56#249#13#0#0#0]:#7#0#0#56#249#13#0#0#

##################################################################
lcs= #7#0#0#56#249#13#0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #7#0#0#56#249#13#0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 22 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 22 ; s1= 3
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#8#0#7#0#0#56#249#13#0#0#a]:[0#8#0#7#0#0#56#249#13#0#0#a]

##################################################################
lcs= [0#8#0#7#0#0#56#249#13#0#0#a]

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= [0#8#0#7#0#0#56#249#13#0#0#a]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8a#0#2#14#36#0#9#7#0#5]:#7#0#

##################################################################
lcs= #7#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 5 ,prefix= 0#8#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#8#0#7#0#0#5#469a#13#0#2#0]:[0#8#0#7#0#0#5

##################################################################
lcs= [0#8#0#7#0#0#5

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= [0#8#0#7#0#0#5

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8#5#a#0#146#0#9#3#7#2]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#8#0#7#0#0#56#249#13#0#0#a]:[0#8#0#7#0#0#56#249#13#0#0#a]

##################################################################
lcs= [0#8#0#7#0#0#56#249#13#0#0#a]

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= [0#8#0#7#0#0#56#249#13#0#0#a]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [7#0#2#0#9#0#3#56#14a#0#8#0]:0#8#0

##################################################################
lcs= 0#8#0

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 0#8#0

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [7#0#2#0#9a#0#3#56#14#0#8#0]:0#8#0

##################################################################
lcs= 0#8#0

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 0#8#0

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#8#0#147#0#356#2#9#0#0#a#0]:[0#8#0#

##################################################################
lcs= [0#8#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= [0#8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#7

##################################################################
lcs= #0#7

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#7

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#5#9a#0#2#3#14#67#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#7#0#0#

##################################################################
lcs= #7#0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #7#0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 5 ,prefix= 0#8#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#8#0#147#0#356#2#9#0#0#a#0]:[0#8#0#

##################################################################
lcs= [0#8#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= [0#8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#7

##################################################################
lcs= #0#7

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#7

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8#37a#2#5#6#1#49#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#7#0#

##################################################################
lcs= #0#7#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#7#0#

##################################################################
lcs= #7#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 5 ,prefix= 0#8#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#0

##################################################################
lcs= #0#0

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 5 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 7 ,prefix= 0#8#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8#5#0#a#146#0#9#3#7#2]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#8#

##################################################################
lcs= 0#8#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 0#8#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and [4#7#3#58#0#2#0#a#0#9#0#16]:8#0#

##################################################################
lcs= 8#0#

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 8#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 5 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 2
asferfind(): issubstring = True, beg= 2
lcsbeg= 2
computebhava(): str1= 0#8#0#7#0#0#56#249#13#0#0#a ,lcsbeg= 2 ,prefix= 0#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and :

##################################################################
lcs= 

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#7#0#0#56#249#13#0#0#a] and :

##################################################################
lcs= 

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:9#0#0#0]

##################################################################
lcs= 9#0#0#0]

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 9#0#0#0]

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:28#0#0#

##################################################################
lcs= 28#0#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 28#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 0 ;len(str2)= 8 ; s1= 6
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 8 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 6
asferfind(): issubstring = True, beg= 6
lcsbeg= 6
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 6 ,prefix= 0#57a#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Gemini | Rahu  in  Gemini | Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 9 ,prefix= 0#57a#28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 8 ,prefix= 0#57a#28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:9#0#0#0]

##################################################################
lcs= 9#0#0#0]

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 9#0#0#0]

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 9 ,prefix= 0#57a#28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#0#3

##################################################################
lcs= #0#0#3

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #0#0#3

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 5 ;len(str2)= 7 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 8 ,prefix= 0#57a#28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo | Mars  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 8 ,prefix= 0#57a#28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 9 ,prefix= 0#57a#28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#28#0#0#3#14

##################################################################
lcs= #28#0#0#3#14

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #28#0#0#3#14

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 13 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 13 ; s1= 5
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 13 ; s1= 5
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 13 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 13 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 13 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 13 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 6 ;len(str2)= 13 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 7 ;len(str2)= 13 ; s1= 5
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 8 ;len(str2)= 13 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 9 ;len(str2)= 13 ; s1= 5
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 10 ;len(str2)= 13 ; s1= 5
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 11 ;len(str2)= 13 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 5 ,prefix= 0#57a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Gemini | Rahu  in  Gemini | Unoccupied  in  Cancer | Unoccupied  in  Leo | Mars  in  Virgo | Sun  in  Libra | Mercury  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 8 ,prefix= 0#57a#28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:[0#57a#28#0#0#3#14#0#69#0#0#0]

##################################################################
lcs= [0#57a#28#0#0#3#14#0#69#0#0#0]

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= [0#57a#28#0#0#3#14#0#69#0#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 8 ,prefix= 0#57a#28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#3#

##################################################################
lcs= #0#3#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #0#3#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 10
asferfind(): issubstring = True, beg= 10
lcsbeg= 10
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 10 ,prefix= 0#57a#28#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Mars  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#14#0#

##################################################################
lcs= #14#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #14#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 1 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 2 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 14
asferfind(): issubstring = True, beg= 14
lcsbeg= 14
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 14 ,prefix= 0#57a#28#0#0#3
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Sun  in  Libra | Mercury  in  Libra | Unoccupied  in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:8#0#0

##################################################################
lcs= 8#0#0

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 8#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 7 ,prefix= 0#57a#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Gemini | Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:#3#14#

##################################################################
lcs= #3#14#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #3#14#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 1 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 4 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 12
asferfind(): issubstring = True, beg= 12
lcsbeg= 12
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 12 ,prefix= 0#57a#28#0#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Mars  in  Virgo | Sun  in  Libra | Mercury  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 19
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:8#0#0

##################################################################
lcs= 8#0#0

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 8#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 7 ,prefix= 0#57a#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Gemini | Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:9#0#0#0]

##################################################################
lcs= 9#0#0#0]

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 9#0#0#0]

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#14#0#

##################################################################
lcs= #14#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #14#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 1 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 2 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 14
asferfind(): issubstring = True, beg= 14
lcsbeg= 14
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 14 ,prefix= 0#57a#28#0#0#3
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Sun  in  Libra | Mercury  in  Libra | Unoccupied  in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 9 ,prefix= 0#57a#28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 8 ,prefix= 0#57a#28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 9 ,prefix= 0#57a#28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 9 ,prefix= 0#57a#28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:8#0#

##################################################################
lcs= 8#0#

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#57a#28#0#0#3#14#0#69#0#0#0 ,lcsbeg= 7 ,prefix= 0#57a#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and :

##################################################################
lcs= 

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#57a#28#0#0#3#14#0#69#0#0#0] and :

##################################################################
lcs= 

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#5#

##################################################################
lcs= #0#5#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= #0#5#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#5#3#7a#8#2#16#4#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Jupiter  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#8#a#7#0#0#56#249#13#0#0#0]:0#0#5

##################################################################
lcs= 0#0#5

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= 0#0#5

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#5#3#7a#8#2#16#4#0#0#9 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus | Jupiter  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#5

##################################################################
lcs= 0#0#5

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= 0#0#5

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#5#3#7a#8#2#16#4#0#0#9 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus | Jupiter  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#0#8a#0#2#14#36#0#9#7#0#5]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#0#0#0#358#27#a#14#6#0#9#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#8#0#7#0#0#5#469a#13#0#2#0]:0#0#5#

##################################################################
lcs= 0#0#5#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= 0#0#5#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#5#3#7a#8#2#16#4#0#0#9 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus | Jupiter  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#5

##################################################################
lcs= 0#0#5

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= 0#0#5

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#5#3#7a#8#2#16#4#0#0#9 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus | Jupiter  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#0#5#3#7a#8#2#16#4#0#0#9]:[0#0#5#3#7a#8#2#16#4#0#0#9]

##################################################################
lcs= [0#0#5#3#7a#8#2#16#4#0#0#9]

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= [0#0#5#3#7a#8#2#16#4#0#0#9]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#9

##################################################################
lcs= #0#9

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= #0#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [7#0#2#0#9a#0#3#56#14#0#8#0]:4#0#

##################################################################
lcs= 4#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= 4#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 0 ;len(str2)= 5 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 0#0#5#3#7a#8#2#16#4#0#0#9 ,lcsbeg= 18 ,prefix= 0#0#5#3#7a#8#2#16#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Mercury  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0

##################################################################
lcs= #0#0

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= #0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 5 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#0#5#3#7a#8#2#16#4#0#0#9 ,lcsbeg= 19 ,prefix= 0#0#5#3#7a#8#2#16#4
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#0#5#9a#0#2#3#14#67#8#0#0]:[0#0#5#

##################################################################
lcs= [0#0#5#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= [0#0#5#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#0#0#9]

##################################################################
lcs= #0#0#9]

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= #0#0#9]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0

##################################################################
lcs= #0#0

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= #0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 5 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#0#5#3#7a#8#2#16#4#0#0#9 ,lcsbeg= 19 ,prefix= 0#0#5#3#7a#8#2#16#4
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#0#8#37a#2#5#6#1#49#0#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#5#

##################################################################
lcs= #0#5#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= #0#5#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#5#3#7a#8#2#16#4#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Jupiter  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#3#7

##################################################################
lcs= #3#7

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= #3#7

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 1 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 5 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#0#5#3#7a#8#2#16#4#0#0#9 ,lcsbeg= 5 ,prefix= 0#0#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Mars  in  Cancer | Saturn  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#0#8#2#5#0#36#14#9a#0#0#7]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#0#8#5#0#a#146#0#9#3#7#2]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and [4#7#3#58#0#2#0#a#0#9#0#16]:#0#9

##################################################################
lcs= #0#9

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= #0#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and :

##################################################################
lcs= 

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#3#7a#8#2#16#4#0#0#9] and :

##################################################################
lcs= 

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#9#0#

##################################################################
lcs= #9#0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 7 ,prefix= 7#0#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:9#0#

##################################################################
lcs= 9#0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= 9#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 8 ,prefix= 7#0#2#0#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:7#0#

##################################################################
lcs= 7#0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= 7#0#

##########################################
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 1 ,prefix= 7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#0#9#

##################################################################
lcs= #0#9#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 5 ,prefix= 7#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Ketu  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:7#0#

##################################################################
lcs= 7#0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= 7#0#

##########################################
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#8#0

##################################################################
lcs= 0#8#0

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= 0#8#0

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:9#0#

##################################################################
lcs= 9#0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= 9#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 8 ,prefix= 7#0#2#0#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:#0#2#

##################################################################
lcs= #0#2#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 1 ,prefix= 7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#9#0

##################################################################
lcs= #0#9#0

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#9#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 5 ,prefix= 7#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Ketu  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#2#0

##################################################################
lcs= #0#2#0

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#2#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 1 ,prefix= 7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#0#9#

##################################################################
lcs= #0#9#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 5 ,prefix= 7#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Ketu  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#14a#0#

##################################################################
lcs= #14a#0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #14a#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 1 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 2 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 3 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 16
asferfind(): issubstring = True, beg= 16
lcsbeg= 16
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 16 ,prefix= 7#0#2#0#9#0#3#56
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Sun  in  Sagittarius | Mercury  in  Sagittarius | | Ascendant in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#8#0

##################################################################
lcs= 0#8#0

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= 0#8#0

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#0#3#

##################################################################
lcs= #0#3#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#3#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 9 ,prefix= 7#0#2#0#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Virgo | Mars  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#9

##################################################################
lcs= #0#9

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 5 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 5 ,prefix= 7#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Ketu  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:[7#0#2#0#9#0#3#56#14a#0#8#0]

##################################################################
lcs= [7#0#2#0#9#0#3#56#14a#0#8#0]

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= [7#0#2#0#9#0#3#56#14a#0#8#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:[7#0#2#0#9

##################################################################
lcs= [7#0#2#0#9

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= [7#0#2#0#9

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#2#0#9#0#

##################################################################
lcs= #2#0#9#0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #2#0#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 10 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 10 ; s1= 3
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 10 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 10 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 10 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 10 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 5 ;len(str2)= 10 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 10 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 7 ;len(str2)= 10 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 8 ;len(str2)= 10 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 3 ,prefix= 7#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Gemini | Unoccupied  in  Cancer | Ketu  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 7 ,prefix= 7#0#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#

##################################################################
lcs= #0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 4 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 1 ,prefix= 7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 1 ,prefix= 7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:7#0#

##################################################################
lcs= 7#0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= 7#0#

##########################################
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 7 ,prefix= 7#0#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#2#0#9#0#

##################################################################
lcs= #2#0#9#0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #2#0#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 10 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 10 ; s1= 3
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 10 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 10 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 10 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 10 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 5 ;len(str2)= 10 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 10 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 7 ;len(str2)= 10 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 8 ;len(str2)= 10 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 3 ,prefix= 7#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Gemini | Unoccupied  in  Cancer | Ketu  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#

##################################################################
lcs= #0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 4 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 1 ,prefix= 7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:#0#8#

##################################################################
lcs= #0#8#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 16
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:7#0#

##################################################################
lcs= 7#0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= 7#0#

##########################################
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 1 ,prefix= 7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#9#0#

##################################################################
lcs= #0#9#0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 5 ,prefix= 7#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Ketu  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:#9#0#

##################################################################
lcs= #9#0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 7 ,prefix= 7#0#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#0#8#

##################################################################
lcs= #0#8#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 16
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:#0#9#

##################################################################
lcs= #0#9#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 5 ,prefix= 7#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Ketu  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:#9#0#

##################################################################
lcs= #9#0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 7 ,prefix= 7#0#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:#0#2#0#

##################################################################
lcs= #0#2#0#

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= #0#2#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 7#0#2#0#9#0#3#56#14a#0#8#0 ,lcsbeg= 1 ,prefix= 7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and :

##################################################################
lcs= 

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9#0#3#56#14a#0#8#0] and :

##################################################################
lcs= 

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:a#0#3

##################################################################
lcs= a#0#3

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= a#0#3

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 4 ;len(str2)= 6 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 9 ,prefix= 7#0#2#0#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Leo | Unoccupied  in  Virgo | Mars  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#8

##################################################################
lcs= #0#8

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #0#8

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 17
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 20
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 20
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 20
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 5 ; s1= 20
asferfind(): issubstring = True, beg= 20
lcsbeg= 20
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 20 ,prefix= 7#0#2#0#9a#0#3#56#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Capricorn | Rahu  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:7#0#

##################################################################
lcs= 7#0#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= 7#0#

##########################################
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 1 ,prefix= 7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#0#8#

##################################################################
lcs= #0#8#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:7#0#

##################################################################
lcs= 7#0#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= 7#0#

##########################################
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#8#0

##################################################################
lcs= 0#8#0

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= 0#8#0

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 11
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#8

##################################################################
lcs= #0#8

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #0#8

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 17
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 20
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 20
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 20
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 5 ; s1= 20
asferfind(): issubstring = True, beg= 20
lcsbeg= 20
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 20 ,prefix= 7#0#2#0#9a#0#3#56#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Capricorn | Rahu  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:#0#2#

##################################################################
lcs= #0#2#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 1 ,prefix= 7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#9

##################################################################
lcs= #0#9

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #0#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 5 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 5 ,prefix= 7#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Ketu  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#2#0

##################################################################
lcs= #0#2#0

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #0#2#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 1 ,prefix= 7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#0#8#

##################################################################
lcs= #0#8#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#0#3#

##################################################################
lcs= #0#3#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #0#3#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 10
asferfind(): issubstring = True, beg= 10
lcsbeg= 10
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 10 ,prefix= 7#0#2#0#9a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Virgo | Mars  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#8#0

##################################################################
lcs= 0#8#0

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= 0#8#0

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 11
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#14#0#

##################################################################
lcs= #14#0#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #14#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 1 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 2 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 17 ,prefix= 7#0#2#0#9a#0#3#56
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Sun  in  Sagittarius | Mercury  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#9

##################################################################
lcs= #0#9

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #0#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 5 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 5 ,prefix= 7#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Cancer | Ketu  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:[7#0#2#0#9

##################################################################
lcs= [7#0#2#0#9

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= [7#0#2#0#9

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:[7#0#2#0#9a#0#3#56#14#0#8#0]

##################################################################
lcs= [7#0#2#0#9a#0#3#56#14#0#8#0]

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= [7#0#2#0#9a#0#3#56#14#0#8#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#2#0#9

##################################################################
lcs= #2#0#9

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #2#0#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 5 ;len(str2)= 7 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 3 ,prefix= 7#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Gemini | Unoccupied  in  Cancer | Ketu  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:0#8#0

##################################################################
lcs= 0#8#0

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= 0#8#0

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 11
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#

##################################################################
lcs= #0#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 4 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 1 ,prefix= 7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:#9a#0#

##################################################################
lcs= #9a#0#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #9a#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 2 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 7 ,prefix= 7#0#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Leo | | Ascendant in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:7#0#

##################################################################
lcs= 7#0#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= 7#0#

##########################################
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:0#8#0

##################################################################
lcs= 0#8#0

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= 0#8#0

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 11
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#2#0#9

##################################################################
lcs= #2#0#9

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #2#0#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 5 ;len(str2)= 7 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 3 ,prefix= 7#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Gemini | Unoccupied  in  Cancer | Ketu  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#

##################################################################
lcs= #0#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 4 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 1 ,prefix= 7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:#0#8#

##################################################################
lcs= #0#8#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:7#0#

##################################################################
lcs= 7#0#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= 7#0#

##########################################
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 1 ,prefix= 7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#14#0#

##################################################################
lcs= #14#0#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #14#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 1 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 2 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 17 ,prefix= 7#0#2#0#9a#0#3#56
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Sun  in  Sagittarius | Mercury  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:6#14#

##################################################################
lcs= 6#14#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= 6#14#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 6 ; str2[s2]= 6 ;s2= 0 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 2 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 3 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 16
asferfind(): issubstring = True, beg= 16
lcsbeg= 16
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 16 ,prefix= 7#0#2#0#9a#0#3#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Venus  in  Scorpio | Sun  in  Sagittarius | Mercury  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#9a#0#

##################################################################
lcs= #9a#0#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #9a#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 2 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 7 ,prefix= 7#0#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Leo | | Ascendant in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:#0#8#

##################################################################
lcs= #0#8#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 10
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:6#14#

##################################################################
lcs= 6#14#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= 6#14#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 6 ; str2[s2]= 6 ;s2= 0 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 2 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 3 ;len(str2)= 6 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 16
asferfind(): issubstring = True, beg= 16
lcsbeg= 16
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 16 ,prefix= 7#0#2#0#9a#0#3#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Venus  in  Scorpio | Sun  in  Sagittarius | Mercury  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:#0#2#0#

##################################################################
lcs= #0#2#0#

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= #0#2#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 7#0#2#0#9a#0#3#56#14#0#8#0 ,lcsbeg= 1 ,prefix= 7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and :

##################################################################
lcs= 

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [7#0#2#0#9a#0#3#56#14#0#8#0] and :

##################################################################
lcs= 

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#9#0#

##################################################################
lcs= #9#0#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 5 ,prefix= 5#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#7#

##################################################################
lcs= #0#7#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#7#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 7 ,prefix= 5#2#0#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Saturn  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#0#9#

##################################################################
lcs= #0#9#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#7#

##################################################################
lcs= #0#7#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#7#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 7 ,prefix= 5#2#0#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Saturn  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:#0#9#

##################################################################
lcs= #0#9#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#9#0

##################################################################
lcs= #0#9#0

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#7#

##################################################################
lcs= #0#7#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#7#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 7 ,prefix= 5#2#0#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Saturn  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#0#9#

##################################################################
lcs= #0#9#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:8#0#0

##################################################################
lcs= 8#0#0

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= 8#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#7#

##################################################################
lcs= #0#7#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#7#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 7 ,prefix= 5#2#0#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Saturn  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:8#0#0

##################################################################
lcs= 8#0#0

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= 8#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#9

##################################################################
lcs= #0#9

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#2#0#9#0#

##################################################################
lcs= #2#0#9#0#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #2#0#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 10 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 10 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 10 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 10 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 10 ; s1= 1
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 5 ;len(str2)= 10 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 10 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 7 ;len(str2)= 10 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 8 ;len(str2)= 10 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 1 ,prefix= 5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Taurus | Unoccupied  in  Gemini | Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#2#0#9

##################################################################
lcs= #2#0#9

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #2#0#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 1 ,prefix= 5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Taurus | Unoccupied  in  Gemini | Ketu  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:[5#2#0#9#0#7#1#46a#3#8#0#0]

##################################################################
lcs= [5#2#0#9#0#7#1#46a#3#8#0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= [5#2#0#9#0#7#1#46a#3#8#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 5 ,prefix= 5#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:#8#0#0]

##################################################################
lcs= #8#0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #8#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#0#9

##################################################################
lcs= #0#9

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 5 ,prefix= 5#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:[5#2#0#9#0#7#1#46a#3#8#0#0]

##################################################################
lcs= [5#2#0#9#0#7#1#46a#3#8#0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= [5#2#0#9#0#7#1#46a#3#8#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#7#

##################################################################
lcs= #0#7#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#7#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 7 ,prefix= 5#2#0#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Saturn  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#9#0#

##################################################################
lcs= #0#9#0#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:#9#0#

##################################################################
lcs= #9#0#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 5 ,prefix= 5#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#0#7

##################################################################
lcs= #0#7

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#7

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 5 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 7 ,prefix= 5#2#0#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Saturn  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:#0#9#

##################################################################
lcs= #0#9#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:#9#0#

##################################################################
lcs= #9#0#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 5 ,prefix= 5#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:#0#9#0#

##################################################################
lcs= #0#9#0#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and :

##################################################################
lcs= 

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and :

##################################################################
lcs= 

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#9#0#0#

##################################################################
lcs= #9#0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #9#0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 17 ,prefix= 0#8#0#147#0#356#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 18 ,prefix= 0#8#0#147#0#356#2#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 19 ,prefix= 0#8#0#147#0#356#2#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 19 ,prefix= 0#8#0#147#0#356#2#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#0#14

##################################################################
lcs= #0#14

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#14

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Sun  in  Cancer | Mercury  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:[0#8#

##################################################################
lcs= [0#8#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= [0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:[0#8#0#

##################################################################
lcs= [0#8#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= [0#8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 18 ,prefix= 0#8#0#147#0#356#2#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:7#0#

##################################################################
lcs= 7#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 7#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 0 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 8 ,prefix= 0#8#0#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#35

##################################################################
lcs= #0#35

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#35

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 6 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 9 ,prefix= 0#8#0#147
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Mars  in  Virgo | Jupiter  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:[0#8#0#

##################################################################
lcs= [0#8#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= [0#8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#0#14

##################################################################
lcs= #0#14

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#14

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Sun  in  Cancer | Mercury  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 18 ,prefix= 0#8#0#147#0#356#2#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:[0#8#0#

##################################################################
lcs= [0#8#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= [0#8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 18 ,prefix= 0#8#0#147#0#356#2#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 19 ,prefix= 0#8#0#147#0#356#2#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:0#8#0

##################################################################
lcs= 0#8#0

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 0#8#0

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:0#8#0

##################################################################
lcs= 0#8#0

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 0#8#0

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:[0#8#0#147#0#356#2#9#0#0#a#0]

##################################################################
lcs= [0#8#0#147#0#356#2#9#0#0#a#0]

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= [0#8#0#147#0#356#2#9#0#0#a#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#1

##################################################################
lcs= #0#1

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#1

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Sun  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 19 ,prefix= 0#8#0#147#0#356#2#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:[0#8#0#147#0#356#2#9#0#0#a#0]

##################################################################
lcs= [0#8#0#147#0#356#2#9#0#0#a#0]

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= [0#8#0#147#0#356#2#9#0#0#a#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#1

##################################################################
lcs= #0#1

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#1

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Sun  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 18 ,prefix= 0#8#0#147#0#356#2#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 19 ,prefix= 0#8#0#147#0#356#2#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 19 ,prefix= 0#8#0#147#0#356#2#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#9#0#0

##################################################################
lcs= #9#0#0

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #9#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 17 ,prefix= 0#8#0#147#0#356#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 17 ,prefix= 0#8#0#147#0#356#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 19 ,prefix= 0#8#0#147#0#356#2#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:#0#a#

##################################################################
lcs= #0#a#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#a#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 19
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 17 ,prefix= 0#8#0#147#0#356#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:#0#a#0

##################################################################
lcs= #0#a#0

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#a#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and :

##################################################################
lcs= 

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and :

##################################################################
lcs= 

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:0#0#7

##################################################################
lcs= 0#0#7

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 0#0#7

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus | Saturn  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:0#0#7

##################################################################
lcs= 0#0#7

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 0#0#7

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus | Saturn  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#

##################################################################
lcs= #0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 4 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#

##################################################################
lcs= #0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 4 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#78#a#2#5#0#13#49#6#0#0]

##################################################################
lcs= [0#0#78#a#2#5#0#13#49#6#0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#78#a#2#5#0#13#49#6#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#78#a#2#5#0#13#49#6#0#0]

##################################################################
lcs= [0#0#78#a#2#5#0#13#49#6#0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#78#a#2#5#0#13#49#6#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:a#2#5#

##################################################################
lcs= a#2#5#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= a#2#5#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 0 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 2 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 7 ,prefix= 0#0#78#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Cancer | Moon  in  Leo | Jupiter  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#6#0#

##################################################################
lcs= #6#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #6#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:#2#5#0#

##################################################################
lcs= #2#5#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #2#5#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 8 ,prefix= 0#0#78#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Leo | Jupiter  in  Virgo | Unoccupied  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#2#5#0#

##################################################################
lcs= #2#5#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #2#5#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 8 ,prefix= 0#0#78#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Leo | Jupiter  in  Virgo | Unoccupied  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:#2#5#0#

##################################################################
lcs= #2#5#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #2#5#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 8 ,prefix= 0#0#78#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Leo | Jupiter  in  Virgo | Unoccupied  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:#0#1

##################################################################
lcs= #0#1

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#1

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 5 ; s1= 12
asferfind(): issubstring = True, beg= 12
lcsbeg= 12
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 12 ,prefix= 0#0#78#a#2#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Libra | Sun  in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and :

##################################################################
lcs= 

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and :

##################################################################
lcs= 

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:8#0#0

##################################################################
lcs= 8#0#0

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= 8#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#5#9

##################################################################
lcs= #0#5#9

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= #0#5#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#5#9a#0#2#3#14#67#8#0#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Jupiter  in  Gemini | Ketu  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:0#0#5

##################################################################
lcs= 0#0#5

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= 0#0#5

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#5#9a#0#2#3#14#67#8#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus | Jupiter  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#5

##################################################################
lcs= 0#0#5

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= 0#0#5

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#5#9a#0#2#3#14#67#8#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus | Jupiter  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:a#0#2#

##################################################################
lcs= a#0#2#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= a#0#2#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 0 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 4 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#0#5#9a#0#2#3#14#67#8#0#0 ,lcsbeg= 7 ,prefix= 0#0#5#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Cancer | Unoccupied  in  Leo | Moon  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:0#0#5#

##################################################################
lcs= 0#0#5#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= 0#0#5#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#5#9a#0#2#3#14#67#8#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus | Jupiter  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#3#14

##################################################################
lcs= #3#14

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= #3#14

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 4 ;len(str2)= 6 ; s1= 12
asferfind(): issubstring = True, beg= 12
lcsbeg= 12
computebhava(): str1= 0#0#5#9a#0#2#3#14#67#8#0#0 ,lcsbeg= 12 ,prefix= 0#0#5#9a#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Mars  in  Libra | Sun  in  Scorpio | Mercury  in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#5

##################################################################
lcs= 0#0#5

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= 0#0#5

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#5#9a#0#2#3#14#67#8#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus | Jupiter  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#3#14#

##################################################################
lcs= #3#14#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= #3#14#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 1 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 4 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 12
asferfind(): issubstring = True, beg= 12
lcsbeg= 12
computebhava(): str1= 0#0#5#9a#0#2#3#14#67#8#0#0 ,lcsbeg= 12 ,prefix= 0#0#5#9a#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Mars  in  Libra | Sun  in  Scorpio | Mercury  in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:[0#0#5#

##################################################################
lcs= [0#0#5#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= [0#0#5#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#0#5#9a#0#2#3#14#67#8#0#0 ,lcsbeg= 8 ,prefix= 0#0#5#9a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Moon  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#9a#0#

##################################################################
lcs= #9a#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= #9a#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 2 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#0#5#9a#0#2#3#14#67#8#0#0 ,lcsbeg= 5 ,prefix= 0#0#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Cancer | | Ascendant in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#8#0#0]

##################################################################
lcs= #8#0#0]

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= #8#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:[0#0#5#9a#0#2#3#14#67#8#0#0]

##################################################################
lcs= [0#0#5#9a#0#2#3#14#67#8#0#0]

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= [0#0#5#9a#0#2#3#14#67#8#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#8#0#0]

##################################################################
lcs= #8#0#0]

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= #8#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#5#9

##################################################################
lcs= #0#5#9

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= #0#5#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#5#9a#0#2#3#14#67#8#0#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Jupiter  in  Gemini | Ketu  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#0#5#9a#0#2#3#14#67#8#0#0 ,lcsbeg= 8 ,prefix= 0#0#5#9a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Moon  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#9a#0#

##################################################################
lcs= #9a#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= #9a#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 2 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#0#5#9a#0#2#3#14#67#8#0#0 ,lcsbeg= 5 ,prefix= 0#0#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Cancer | | Ascendant in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:#0#2#

##################################################################
lcs= #0#2#

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#0#5#9a#0#2#3#14#67#8#0#0 ,lcsbeg= 8 ,prefix= 0#0#5#9a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Moon  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and :

##################################################################
lcs= 

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#5#9a#0#2#3#14#67#8#0#0] and :

##################################################################
lcs= 

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#8#a#7#0#0#56#249#13#0#0#0]:#7#0#0#

##################################################################
lcs= #7#0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #7#0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#8#0#7#0#0#56#249#13#0#0#a]:#7#0#0#

##################################################################
lcs= #7#0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #7#0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#0#8a#0#2#14#36#0#9#7#0#5]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#0#0#0#358#27#a#14#6#0#9#0]:[0#0#0#0#

##################################################################
lcs= [0#0#0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= [0#0#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#7#0#0#

##################################################################
lcs= #7#0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #7#0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#8#0#7#0#0#56#249#13#0#0#a]:#7#0#0#

##################################################################
lcs= #7#0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #7#0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#0#9]

##################################################################
lcs= #0#0#9]

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#0#9]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [7#0#2#0#9#0#3#56#14a#0#8#0]:7#0#

##################################################################
lcs= 7#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= 7#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 0 ;len(str2)= 5 ; s1= 21
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 21
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 21
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 21
asferfind(): issubstring = True, beg= 21
lcsbeg= 21
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 21 ,prefix= 0#0#0#0#0#68a#2#1345#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [7#0#2#0#9a#0#3#56#14#0#8#0]:7#0#

##################################################################
lcs= 7#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= 7#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 0 ;len(str2)= 5 ; s1= 21
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 21
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 21
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 21
asferfind(): issubstring = True, beg= 21
lcsbeg= 21
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 21 ,prefix= 0#0#0#0#0#68a#2#1345#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0

##################################################################
lcs= #0#0

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 5 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#0#5#9a#0#2#3#14#67#8#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:[0#0#0#0#0#68a#2#1345#7#0#0#9]

##################################################################
lcs= [0#0#0#0#0#68a#2#1345#7#0#0#9]

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= [0#0#0#0#0#68a#2#1345#7#0#0#9]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0

##################################################################
lcs= #0#0

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 5 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#0#8#37a#2#5#6#1#49#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini | Unoccupied  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#0

##################################################################
lcs= #0#0

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 5 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#0#0#0#68a#2#1345#7#0#0#9 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#0#8#2#5#0#36#14#9a#0#0#7]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#0#8#5#0#a#146#0#9#3#7#2]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and [4#7#3#58#0#2#0#a#0#9#0#16]:#0#9

##################################################################
lcs= #0#9

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= #0#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 9
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 15
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 20
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 22
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 22
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 22
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and :

##################################################################
lcs= 

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#0#0#0#68a#2#1345#7#0#0#9] and :

##################################################################
lcs= 

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#9#0#0#

##################################################################
lcs= #9#0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #9#0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 17 ,prefix= 0#8#0#147#0#356#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 18 ,prefix= 0#8#0#147#0#356#2#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 19 ,prefix= 0#8#0#147#0#356#2#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 19 ,prefix= 0#8#0#147#0#356#2#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#0#14

##################################################################
lcs= #0#14

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#14

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Sun  in  Cancer | Mercury  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:[0#8#

##################################################################
lcs= [0#8#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= [0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:[0#8#0#

##################################################################
lcs= [0#8#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= [0#8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 18 ,prefix= 0#8#0#147#0#356#2#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:7#0#

##################################################################
lcs= 7#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 7#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 0 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 8 ,prefix= 0#8#0#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#35

##################################################################
lcs= #0#35

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#35

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 6 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 9 ,prefix= 0#8#0#147
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Mars  in  Virgo | Jupiter  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:[0#8#0#

##################################################################
lcs= [0#8#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= [0#8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#0#14

##################################################################
lcs= #0#14

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#14

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Sun  in  Cancer | Mercury  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 18 ,prefix= 0#8#0#147#0#356#2#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:[0#8#0#

##################################################################
lcs= [0#8#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= [0#8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 18 ,prefix= 0#8#0#147#0#356#2#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 19 ,prefix= 0#8#0#147#0#356#2#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:0#8#0

##################################################################
lcs= 0#8#0

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 0#8#0

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:0#8#0

##################################################################
lcs= 0#8#0

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 0#8#0

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:[0#8#0#147#0#356#2#9#0#0#a#0]

##################################################################
lcs= [0#8#0#147#0#356#2#9#0#0#a#0]

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= [0#8#0#147#0#356#2#9#0#0#a#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#1

##################################################################
lcs= #0#1

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#1

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Sun  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 19 ,prefix= 0#8#0#147#0#356#2#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:[0#8#0#147#0#356#2#9#0#0#a#0]

##################################################################
lcs= [0#8#0#147#0#356#2#9#0#0#a#0]

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= [0#8#0#147#0#356#2#9#0#0#a#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#8#0#

##################################################################
lcs= #8#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #8#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#1

##################################################################
lcs= #0#1

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#1

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 3 ,prefix= 0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Sun  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 18 ,prefix= 0#8#0#147#0#356#2#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 19 ,prefix= 0#8#0#147#0#356#2#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 19 ,prefix= 0#8#0#147#0#356#2#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#9#0#0

##################################################################
lcs= #9#0#0

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #9#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 17 ,prefix= 0#8#0#147#0#356#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 17 ,prefix= 0#8#0#147#0#356#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 19 ,prefix= 0#8#0#147#0#356#2#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:#0#a#

##################################################################
lcs= #0#a#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#a#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 19
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#8#0#147#0#356#2#9#0#0#a#0 ,lcsbeg= 17 ,prefix= 0#8#0#147#0#356#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Scorpio | Unoccupied  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:#0#a#0

##################################################################
lcs= #0#a#0

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= #0#a#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 19
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and :

##################################################################
lcs= 

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#8#0#147#0#356#2#9#0#0#a#0] and :

##################################################################
lcs= 

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#9#0#

##################################################################
lcs= #9#0#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 5 ,prefix= 5#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#7#

##################################################################
lcs= #0#7#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#7#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 7 ,prefix= 5#2#0#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Saturn  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#0#9#

##################################################################
lcs= #0#9#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#7#

##################################################################
lcs= #0#7#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#7#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 7 ,prefix= 5#2#0#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Saturn  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:#0#9#

##################################################################
lcs= #0#9#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#9#0

##################################################################
lcs= #0#9#0

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#7#

##################################################################
lcs= #0#7#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#7#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 7 ,prefix= 5#2#0#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Saturn  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#0#9#

##################################################################
lcs= #0#9#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:8#0#0

##################################################################
lcs= 8#0#0

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= 8#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#7#

##################################################################
lcs= #0#7#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#7#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 7 ,prefix= 5#2#0#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Saturn  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:8#0#0

##################################################################
lcs= 8#0#0

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= 8#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#9

##################################################################
lcs= #0#9

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#2#0#9#0#

##################################################################
lcs= #2#0#9#0#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #2#0#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 10 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 10 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 10 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 10 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 10 ; s1= 1
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 5 ;len(str2)= 10 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 10 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 7 ;len(str2)= 10 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 8 ;len(str2)= 10 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 1 ,prefix= 5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Taurus | Unoccupied  in  Gemini | Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#2#0#9

##################################################################
lcs= #2#0#9

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #2#0#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 5 ;len(str2)= 7 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 1 ,prefix= 5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Taurus | Unoccupied  in  Gemini | Ketu  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:[5#2#0#9#0#7#1#46a#3#8#0#0]

##################################################################
lcs= [5#2#0#9#0#7#1#46a#3#8#0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= [5#2#0#9#0#7#1#46a#3#8#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 5 ,prefix= 5#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:#8#0#0]

##################################################################
lcs= #8#0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #8#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#0#9

##################################################################
lcs= #0#9

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 5 ,prefix= 5#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:[5#2#0#9#0#7#1#46a#3#8#0#0]

##################################################################
lcs= [5#2#0#9#0#7#1#46a#3#8#0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= [5#2#0#9#0#7#1#46a#3#8#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#7#

##################################################################
lcs= #0#7#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#7#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 7 ,prefix= 5#2#0#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Saturn  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#9#0#

##################################################################
lcs= #0#9#0#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:#9#0#

##################################################################
lcs= #9#0#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 5 ,prefix= 5#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#0#7

##################################################################
lcs= #0#7

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#7

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 5 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 7 ,prefix= 5#2#0#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Saturn  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:#0#9#

##################################################################
lcs= #0#9#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:#9#0#

##################################################################
lcs= #9#0#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 5 ,prefix= 5#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:#0#9#0#

##################################################################
lcs= #0#9#0#

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= #0#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 5#2#0#9#0#7#1#46a#3#8#0#0 ,lcsbeg= 3 ,prefix= 5#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Ketu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and :

##################################################################
lcs= 

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [5#2#0#9#0#7#1#46a#3#8#0#0] and :

##################################################################
lcs= 

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:0#0#7

##################################################################
lcs= 0#0#7

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 0#0#7

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus | Saturn  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:0#0#7

##################################################################
lcs= 0#0#7

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 0#0#7

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 0
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 4 ;len(str2)= 6 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus | Saturn  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#

##################################################################
lcs= #0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 4 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#

##################################################################
lcs= #0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 4 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#78#a#2#5#0#13#49#6#0#0]

##################################################################
lcs= [0#0#78#a#2#5#0#13#49#6#0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#78#a#2#5#0#13#49#6#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#78#a#2#5#0#13#49#6#0#0]

##################################################################
lcs= [0#0#78#a#2#5#0#13#49#6#0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#78#a#2#5#0#13#49#6#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:a#2#5#

##################################################################
lcs= a#2#5#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= a#2#5#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 0 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 2 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 7 ,prefix= 0#0#78#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Cancer | Moon  in  Leo | Jupiter  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#6#0#

##################################################################
lcs= #6#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #6#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:#2#5#0#

##################################################################
lcs= #2#5#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #2#5#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 8 ,prefix= 0#0#78#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Leo | Jupiter  in  Virgo | Unoccupied  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#2#5#0#

##################################################################
lcs= #2#5#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #2#5#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 8 ,prefix= 0#0#78#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Leo | Jupiter  in  Virgo | Unoccupied  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:#2#5#0#

##################################################################
lcs= #2#5#0#

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #2#5#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 8 ,prefix= 0#0#78#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Leo | Jupiter  in  Virgo | Unoccupied  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:#0#1

##################################################################
lcs= #0#1

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= #0#1

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 3 ;len(str2)= 5 ; s1= 12
asferfind(): issubstring = True, beg= 12
lcsbeg= 12
computebhava(): str1= 0#0#78#a#2#5#0#13#49#6#0#0 ,lcsbeg= 12 ,prefix= 0#0#78#a#2#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Libra | Sun  in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and :

##################################################################
lcs= 

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#78#a#2#5#0#13#49#6#0#0] and :

##################################################################
lcs= 

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#2#5#6#1#49#0#0#0]

##################################################################
lcs= #2#5#6#1#49#0#0#0]

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= #2#5#6#1#49#0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 19 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 19 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 19 ; s1= 5
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#2#5#6#1#49#0#0#0]

##################################################################
lcs= #2#5#6#1#49#0#0#0]

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= #2#5#6#1#49#0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 19 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 19 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 19 ; s1= 5
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:9#0#0#0]

##################################################################
lcs= 9#0#0#0]

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= 9#0#0#0]

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:9#0#0#0]

##################################################################
lcs= 9#0#0#0]

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= 9#0#0#0]

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#8#

##################################################################
lcs= #0#8#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8#37a#2#5#6#1#49#0#0#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#8#

##################################################################
lcs= #0#8#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8#37a#2#5#6#1#49#0#0#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:a#2#5#

##################################################################
lcs= a#2#5#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= a#2#5#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 2 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#0#8#37a#2#5#6#1#49#0#0#0 ,lcsbeg= 8 ,prefix= 0#0#8#37
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Cancer | Moon  in  Leo | Jupiter  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:9#0#0#

##################################################################
lcs= 9#0#0#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= 9#0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:a#2#5#

##################################################################
lcs= a#2#5#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= a#2#5#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 2 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 4 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 0#0#8#37a#2#5#6#1#49#0#0#0 ,lcsbeg= 8 ,prefix= 0#0#8#37
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Cancer | Moon  in  Leo | Jupiter  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:[0#0#8#37a#2#5#6#1#49#0#0#0]

##################################################################
lcs= [0#0#8#37a#2#5#6#1#49#0#0#0]

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= [0#0#8#37a#2#5#6#1#49#0#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 17
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:9#0#0

##################################################################
lcs= 9#0#0

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= 9#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 6 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 6 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#0#8#37a#2#5#6#1#49#0#0#0 ,lcsbeg= 19 ,prefix= 0#0#8#37a#2#5#6#1#4
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:9#0#

##################################################################
lcs= 9#0#

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= 9#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#0#8#37a#2#5#6#1#49#0#0#0 ,lcsbeg= 19 ,prefix= 0#0#8#37a#2#5#6#1#4
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and :

##################################################################
lcs= 

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#37a#2#5#6#1#49#0#0#0] and :

##################################################################
lcs= 

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#9#346#1#0#0#0]

##################################################################
lcs= #9#346#1#0#0#0]

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #9#346#1#0#0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 8
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#5#9#346#1#0#0#0]

##################################################################
lcs= #0#5#9#346#1#0#0#0]

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#5#9#346#1#0#0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 20 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 20 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 20 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 20 ; s1= 4
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#a#0#

##################################################################
lcs= #a#0#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #a#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 1 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 2
asferfind(): issubstring = True, beg= 2
lcsbeg= 2
computebhava(): str1= 28#a#0#7#0#5#9#346#1#0#0#0 ,lcsbeg= 2 ,prefix= 28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#7#0#

##################################################################
lcs= #0#7#0#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#7#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 4
asferfind(): issubstring = True, beg= 4
lcsbeg= 4
computebhava(): str1= 28#a#0#7#0#5#9#346#1#0#0#0 ,lcsbeg= 4 ,prefix= 28#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:#7#0#5

##################################################################
lcs= #7#0#5

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #7#0#5

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 6
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 7 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 6
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 6
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 5 ;len(str2)= 7 ; s1= 6
asferfind(): issubstring = True, beg= 6
lcsbeg= 6
computebhava(): str1= 28#a#0#7#0#5#9#346#1#0#0#0 ,lcsbeg= 6 ,prefix= 28#a#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo | Jupiter  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#7#0#

##################################################################
lcs= #0#7#0#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#7#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 4
asferfind(): issubstring = True, beg= 4
lcsbeg= 4
computebhava(): str1= 28#a#0#7#0#5#9#346#1#0#0#0 ,lcsbeg= 4 ,prefix= 28#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#a#0#

##################################################################
lcs= #a#0#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #a#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 1 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 2
asferfind(): issubstring = True, beg= 2
lcsbeg= 2
computebhava(): str1= 28#a#0#7#0#5#9#346#1#0#0#0 ,lcsbeg= 2 ,prefix= 28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#7#0#

##################################################################
lcs= #0#7#0#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#7#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 4
asferfind(): issubstring = True, beg= 4
lcsbeg= 4
computebhava(): str1= 28#a#0#7#0#5#9#346#1#0#0#0 ,lcsbeg= 4 ,prefix= 28#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#5#

##################################################################
lcs= #0#5#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#5#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 28#a#0#7#0#5#9#346#1#0#0#0 ,lcsbeg= 8 ,prefix= 28#a#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Jupiter  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:a#0#

##################################################################
lcs= a#0#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= a#0#

##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 28#a#0#7#0#5#9#346#1#0#0#0 ,lcsbeg= 3 ,prefix= 28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:a#0#

##################################################################
lcs= a#0#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= a#0#

##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 0 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 3
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 3
asferfind(): issubstring = True, beg= 3
lcsbeg= 3
computebhava(): str1= 28#a#0#7#0#5#9#346#1#0#0#0 ,lcsbeg= 3 ,prefix= 28#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#7#

##################################################################
lcs= #0#7#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#7#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 4
asferfind(): issubstring = True, beg= 4
lcsbeg= 4
computebhava(): str1= 28#a#0#7#0#5#9#346#1#0#0#0 ,lcsbeg= 4 ,prefix= 28#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:#0#5#9

##################################################################
lcs= #0#5#9

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#5#9

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 5 ;len(str2)= 7 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 28#a#0#7#0#5#9#346#1#0#0#0 ,lcsbeg= 8 ,prefix= 28#a#0#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Jupiter  in  Virgo | Ketu  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#7#

##################################################################
lcs= #0#7#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#7#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 4
asferfind(): issubstring = True, beg= 4
lcsbeg= 4
computebhava(): str1= 28#a#0#7#0#5#9#346#1#0#0#0 ,lcsbeg= 4 ,prefix= 28#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Gemini | Saturn  in  Cancer |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:[28#a#0#7#0#5#9#346#1#0#0#0]

##################################################################
lcs= [28#a#0#7#0#5#9#346#1#0#0#0]

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= [28#a#0#7#0#5#9#346#1#0#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#9#346#1#0#0#0]

##################################################################
lcs= #9#346#1#0#0#0]

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #9#346#1#0#0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 8
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#0]

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#0#

##################################################################
lcs= 0#0#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= 0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 9
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 4
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:#9#3

##################################################################
lcs= #9#3

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #9#3

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 2
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 4
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 6
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 5 ; s1= 12
asferfind(): issubstring = True, beg= 12
lcsbeg= 12
computebhava(): str1= 28#a#0#7#0#5#9#346#1#0#0#0 ,lcsbeg= 12 ,prefix= 28#a#0#7#0#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Libra | Mars  in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#0#

##################################################################
lcs= 0#0#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= 0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 9
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:#a#0#

##################################################################
lcs= #a#0#

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= #a#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 1 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 2
asferfind(): issubstring = True, beg= 2
lcsbeg= 2
computebhava(): str1= 28#a#0#7#0#5#9#346#1#0#0#0 ,lcsbeg= 2 ,prefix= 28
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Taurus | Unoccupied  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and :

##################################################################
lcs= 

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [28#a#0#7#0#5#9#346#1#0#0#0] and :

##################################################################
lcs= 

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#0#5a#

##################################################################
lcs= #0#5a#

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#5a#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 4 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 8#0#2#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 7 ,prefix= 8#0#2#7
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Jupiter  in  Virgo | | Ascendant in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#7#0#5a#9#346#1#0#0#0]

##################################################################
lcs= #7#0#5a#9#346#1#0#0#0]

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #7#0#5a#9#346#1#0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 23 ; s1= 1
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#9#346#1#0#0#0]

##################################################################
lcs= #9#346#1#0#0#0]

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #9#346#1#0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 9
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#9#3

##################################################################
lcs= #9#3

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #9#3

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 5 ; s1= 12
asferfind(): issubstring = True, beg= 12
lcsbeg= 12
computebhava(): str1= 8#0#2#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 12 ,prefix= 8#0#2#7#0#5a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Libra | Mars  in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#7#0#

##################################################################
lcs= #7#0#

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 8#0#2#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 5 ,prefix= 8#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:#7#0#5

##################################################################
lcs= #7#0#5

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #7#0#5

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 5
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 5 ;len(str2)= 7 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 8#0#2#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 5 ,prefix= 8#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo | Jupiter  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 8#0#2#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 1 ,prefix= 8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#9#3

##################################################################
lcs= #9#3

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #9#3

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 5 ; s1= 12
asferfind(): issubstring = True, beg= 12
lcsbeg= 12
computebhava(): str1= 8#0#2#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 12 ,prefix= 8#0#2#7#0#5a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Libra | Mars  in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#7#0#

##################################################################
lcs= #7#0#

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #7#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 8#0#2#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 5 ,prefix= 8#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#0#

##################################################################
lcs= #0#0#

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 8#0#2#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 1 ,prefix= 8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 8#0#2#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 1 ,prefix= 8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 8#0#2#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 1 ,prefix= 8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#0#0#0

##################################################################
lcs= #0#0#0

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:#0#0#0]

##################################################################
lcs= #0#0#0]

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#9#346#1#0#0#0]

##################################################################
lcs= #9#346#1#0#0#0]

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #9#346#1#0#0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 9
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:[8#0#2#7#0#5a#9#346#1#0#0#0]

##################################################################
lcs= [8#0#2#7#0#5a#9#346#1#0#0#0]

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= [8#0#2#7#0#5a#9#346#1#0#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#0#

##################################################################
lcs= 0#0#

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= 0#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 2
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 8
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#0#0#

##################################################################
lcs= #0#0#

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:#9#3

##################################################################
lcs= #9#3

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= #9#3

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 9
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 5 ; s1= 12
asferfind(): issubstring = True, beg= 12
lcsbeg= 12
computebhava(): str1= 8#0#2#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 12 ,prefix= 8#0#2#7#0#5a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Libra | Mars  in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:0#0#

##################################################################
lcs= 0#0#

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= 0#0#

##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 2
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 2
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 8
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:8#0#2#

##################################################################
lcs= 8#0#2#

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= 8#0#2#

##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 4 ;len(str2)= 7 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 8#0#2#7#0#5a#9#346#1#0#0#0 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Aries | Unoccupied  in  Taurus | Moon  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and :

##################################################################
lcs= 

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [8#0#2#7#0#5a#9#346#1#0#0#0] and :

##################################################################
lcs= 

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#9#0#0

##################################################################
lcs= #9#0#0

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #9#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:9#0#0

##################################################################
lcs= 9#0#0

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= 9#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#3#7#

##################################################################
lcs= #3#7#

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #3#7#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#3#7#8a#25#6#0#14#0#9#0#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Mars  in  Taurus | Saturn  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0

##################################################################
lcs= #0#0

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 13
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 18
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 20
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#0#8a#37#2#5#6#1#49#0#0#0]:9#0#0

##################################################################
lcs= 9#0#0

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= 9#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#0#8a#0#2#14#36#0#9#7#0#5]:#0#9#

##################################################################
lcs= #0#9#

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 0#3#7#8a#25#6#0#14#0#9#0#0 ,lcsbeg= 18 ,prefix= 0#3#7#8a#25#6#0#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Ketu  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#9#0

##################################################################
lcs= #0#9#0

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #0#9#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 0#3#7#8a#25#6#0#14#0#9#0#0 ,lcsbeg= 18 ,prefix= 0#3#7#8a#25#6#0#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Ketu  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#0

##################################################################
lcs= #0#0

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 13
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 18
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 20
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#0#8#5#a#0#146#0#9#3#7#2]:#3#7#

##################################################################
lcs= #3#7#

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #3#7#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#3#7#8a#25#6#0#14#0#9#0#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Mars  in  Taurus | Saturn  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#57#28#0#0#3#14a#0#69#0#0#0]:9#0#0

##################################################################
lcs= 9#0#0

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= 9#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0

##################################################################
lcs= #0#0

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 13
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 18
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 20
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#14#0#

##################################################################
lcs= #14#0#

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #14#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 1 ;len(str2)= 7 ; s1= 15
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 2 ;len(str2)= 7 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 15
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 15
asferfind(): issubstring = True, beg= 15
lcsbeg= 15
computebhava(): str1= 0#3#7#8a#25#6#0#14#0#9#0#0 ,lcsbeg= 15 ,prefix= 0#3#7#8a#25#6#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Sun  in  Scorpio | Mercury  in  Scorpio | Unoccupied  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#3#7

##################################################################
lcs= #3#7

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #3#7

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 5 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#3#7#8a#25#6#0#14#0#9#0#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Mars  in  Taurus | Saturn  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#9#0#

##################################################################
lcs= #0#9#0#

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #0#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#14#0#

##################################################################
lcs= #14#0#

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #14#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 1 ;len(str2)= 7 ; s1= 15
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 2 ;len(str2)= 7 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 15
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 15
asferfind(): issubstring = True, beg= 15
lcsbeg= 15
computebhava(): str1= 0#3#7#8a#25#6#0#14#0#9#0#0 ,lcsbeg= 15 ,prefix= 0#3#7#8a#25#6#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Sun  in  Scorpio | Mercury  in  Scorpio | Unoccupied  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#9#0#

##################################################################
lcs= #0#9#0#

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #0#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#9#0#0

##################################################################
lcs= #9#0#0

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #9#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#6#0#

##################################################################
lcs= #6#0#

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #6#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
asferfind(): str1[s1+s2]= 6 ; str2[s2]= 6 ;s2= 1 ;len(str2)= 6 ; s1= 11
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 11
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 11
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 11
asferfind(): issubstring = True, beg= 11
lcsbeg= 11
computebhava(): str1= 0#3#7#8a#25#6#0#14#0#9#0#0 ,lcsbeg= 11 ,prefix= 0#3#7#8a#25
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Venus  in  Virgo | Unoccupied  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#0#5#9a#0#2#3#14#67#8#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:8a#2

##################################################################
lcs= 8a#2

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= 8a#2

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 5 ; s1= 6
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 1 ;len(str2)= 5 ; s1= 6
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 6
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 5 ; s1= 6
asferfind(): issubstring = True, beg= 6
lcsbeg= 6
computebhava(): str1= 0#3#7#8a#25#6#0#14#0#9#0#0 ,lcsbeg= 6 ,prefix= 0#3#7#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Cancer | | Ascendant in  Cancer | Moon  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#8#0#147#0#356#2#9#0#0#a#0]:#9#0#0

##################################################################
lcs= #9#0#0

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #9#0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 18
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#9#0#

##################################################################
lcs= #0#9#0#

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #0#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#0#78#a#2#5#0#13#49#6#0#0]:#6#0#

##################################################################
lcs= #6#0#

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #6#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
asferfind(): str1[s1+s2]= 6 ; str2[s2]= 6 ;s2= 1 ;len(str2)= 6 ; s1= 11
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 11
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 11
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 11
asferfind(): issubstring = True, beg= 11
lcsbeg= 11
computebhava(): str1= 0#3#7#8a#25#6#0#14#0#9#0#0 ,lcsbeg= 11 ,prefix= 0#3#7#8a#25
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Venus  in  Virgo | Unoccupied  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#0#8#37a#2#5#6#1#49#0#0#0]:9#0#0

##################################################################
lcs= 9#0#0

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= 9#0#0

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0]

##################################################################
lcs= #0#0]

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #0#0]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#3#7#8a#25#6#0#14#0#9#0#0]:[0#3#7#8a#25#6#0#14#0#9#0#0]

##################################################################
lcs= [0#3#7#8a#25#6#0#14#0#9#0#0]

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= [0#3#7#8a#25#6#0#14#0#9#0#0]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#0#8#2#5#0#36#14#9a#0#0#7]:#14#

##################################################################
lcs= #14#

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #14#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 15
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 1 ;len(str2)= 5 ; s1= 15
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 2 ;len(str2)= 5 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 15
asferfind(): issubstring = True, beg= 15
lcsbeg= 15
computebhava(): str1= 0#3#7#8a#25#6#0#14#0#9#0#0 ,lcsbeg= 15 ,prefix= 0#3#7#8a#25#6#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Sun  in  Scorpio | Mercury  in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#0#8#5#0#a#146#0#9#3#7#2]:#3#7#

##################################################################
lcs= #3#7#

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #3#7#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#3#7#8a#25#6#0#14#0#9#0#0 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Mars  in  Taurus | Saturn  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [0#0#8#2#5#0#36#14#9#0#a#7]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and [4#7#3#58#0#2#0#a#0#9#0#16]:#0#9#0#

##################################################################
lcs= #0#9#0#

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= #0#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 11
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 13
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 13
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 13
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 15
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and :

##################################################################
lcs= 

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#3#7#8a#25#6#0#14#0#9#0#0] and :

##################################################################
lcs= 

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#0#36#14#9#0#

##################################################################
lcs= #0#36#14#9#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #0#36#14#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 14 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 14 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= 6 ; str2[s2]= 6 ;s2= 4 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 6 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 7 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 8 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 9 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 10 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 11 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 12 ;len(str2)= 14 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 9 ,prefix= 0#0#8#2#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Virgo | Mars  in  Libra | Venus  in  Libra | Sun  in  Scorpio | Mercury  in  Scorpio | Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [28#0#0#7#0#5a#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [8#0#2#7a#0#5#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#8#a#7#0#0#56#249#13#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8a#0#2#14#36#0#9#7#0#5]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#0#0#358#27#a#14#6#0#9#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#8#0#7#0#0#5#469a#13#0#2#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#57#28#0#0#3#14a#0#69#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#57a#28#0#0#3#14#0#69#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#5#3#7a#8#2#16#4#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#8#

##################################################################
lcs= #0#8#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#8#

##################################################################
lcs= #0#8#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 17 ,prefix= 0#0#8#2#5#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#8#0#147#0#356#2#9#0#0#a#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 17 ,prefix= 0#0#8#2#5#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#78#a#2#5#0#13#49#6#0#0]:#2#5#0#

##################################################################
lcs= #2#5#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #2#5#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 5 ,prefix= 0#0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Cancer | Jupiter  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#5#9a#0#2#3#14#67#8#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#8#0#147#0#356#2#9#0#0#a#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 17 ,prefix= 0#0#8#2#5#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 17 ,prefix= 0#0#8#2#5#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#78#a#2#5#0#13#49#6#0#0]:#2#5#0#

##################################################################
lcs= #2#5#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #2#5#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 5 ,prefix= 0#0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Cancer | Jupiter  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8#37a#2#5#6#1#49#0#0#0]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [28#a#0#7#0#5#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [8#0#2#7#0#5a#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 17 ,prefix= 0#0#8#2#5#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8#2#5#0#36#14#9#0#a#7]

##################################################################
lcs= [0#0#8#2#5#0#36#14#9#0#a#7]

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8#2#5#0#36#14#9#0#a#7]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8#2#5#0#36#14#9a#0#0#7]:[0#0#8#2#5#0#36#14#9

##################################################################
lcs= [0#0#8#2#5#0#36#14#9

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8#2#5#0#36#14#9

##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8#5#0#a#146#0#9#3#7#2]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8#2#5#0#36#14#9#0#a#7]

##################################################################
lcs= [0#0#8#2#5#0#36#14#9#0#a#7]

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8#2#5#0#36#14#9#0#a#7]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [4#7#3#58#0#2#0#a#0#9#0#16]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 17 ,prefix= 0#0#8#2#5#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and :

##################################################################
lcs= 

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and :

##################################################################
lcs= 

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#0#36#14#9

##################################################################
lcs= #0#36#14#9

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #0#36#14#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 11 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 11 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 11 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 11 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 11 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 11 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 11 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 11 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 11 ; s1= 9
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 11 ; s1= 9
asferfind(): str1[s1+s2]= 6 ; str2[s2]= 6 ;s2= 4 ;len(str2)= 11 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 11 ; s1= 9
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 6 ;len(str2)= 11 ; s1= 9
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 7 ;len(str2)= 11 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 8 ;len(str2)= 11 ; s1= 9
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 9 ;len(str2)= 11 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#0#8#2#5#0#36#14#9a#0#0#7 ,lcsbeg= 9 ,prefix= 0#0#8#2#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Virgo | Mars  in  Libra | Venus  in  Libra | Sun  in  Scorpio | Mercury  in  Scorpio | Ketu  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [28#0#0#7#0#5a#9#346#1#0#0#0]:#0#0#7

##################################################################
lcs= #0#0#7

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #0#0#7

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [8#0#2#7a#0#5#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#8#a#7#0#0#56#249#13#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#0#8a#0#2#14#36#0#9#7#0#5]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#0#0#0#358#27#a#14#6#0#9#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#57#28#0#0#3#14a#0#69#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#8#0#7#0#0#56#249#13#0#0#a]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#57a#28#0#0#3#14#0#69#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#0#5#3#7a#8#2#16#4#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#8#

##################################################################
lcs= #0#8#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8#2#5#0#36#14#9a#0#0#7 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#9a#0#

##################################################################
lcs= #9a#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #9a#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 2 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#0#8#2#5#0#36#14#9a#0#0#7 ,lcsbeg= 17 ,prefix= 0#0#8#2#5#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | | Ascendant in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0

##################################################################
lcs= #0#0

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 17
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 20
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 20
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 20
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 5 ; s1= 20
asferfind(): issubstring = True, beg= 20
lcsbeg= 20
computebhava(): str1= 0#0#8#2#5#0#36#14#9a#0#0#7 ,lcsbeg= 20 ,prefix= 0#0#8#2#5#0#36#14#9a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#0#78#a#2#5#0#13#49#6#0#0]:#2#5#0#

##################################################################
lcs= #2#5#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #2#5#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#0#8#2#5#0#36#14#9a#0#0#7 ,lcsbeg= 5 ,prefix= 0#0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Cancer | Jupiter  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#0#5#9a#0#2#3#14#67#8#0#0]:#9a#0#

##################################################################
lcs= #9a#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #9a#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 2 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 4 ;len(str2)= 7 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#0#8#2#5#0#36#14#9a#0#0#7 ,lcsbeg= 17 ,prefix= 0#0#8#2#5#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | | Ascendant in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#0

##################################################################
lcs= #0#0

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #0#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 17
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 20
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 20
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 20
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 5 ; s1= 20
asferfind(): issubstring = True, beg= 20
lcsbeg= 20
computebhava(): str1= 0#0#8#2#5#0#36#14#9a#0#0#7 ,lcsbeg= 20 ,prefix= 0#0#8#2#5#0#36#14#9a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#0#78#a#2#5#0#13#49#6#0#0]:#2#5#0#

##################################################################
lcs= #2#5#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #2#5#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#0#8#2#5#0#36#14#9a#0#0#7 ,lcsbeg= 5 ,prefix= 0#0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Cancer | Jupiter  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#0#8#37a#2#5#6#1#49#0#0#0]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [28#a#0#7#0#5#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [8#0#2#7#0#5a#9#346#1#0#0#0]:#0#0#

##################################################################
lcs= #0#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #0#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#14#

##################################################################
lcs= #14#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= #14#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 14
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 1 ;len(str2)= 5 ; s1= 14
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 2 ;len(str2)= 5 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 14
asferfind(): issubstring = True, beg= 14
lcsbeg= 14
computebhava(): str1= 0#0#8#2#5#0#36#14#9a#0#0#7 ,lcsbeg= 14 ,prefix= 0#0#8#2#5#0#36
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Sun  in  Scorpio | Mercury  in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8#2#5#0#36#14#9

##################################################################
lcs= [0#0#8#2#5#0#36#14#9

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= [0#0#8#2#5#0#36#14#9

##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#0#8#2#5#0#36#14#9a#0#0#7]:[0#0#8#2#5#0#36#14#9a#0#0#7]

##################################################################
lcs= [0#0#8#2#5#0#36#14#9a#0#0#7]

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= [0#0#8#2#5#0#36#14#9a#0#0#7]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#0#8#5#0#a#146#0#9#3#7#2]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8#2#5#0#36#14#9

##################################################################
lcs= [0#0#8#2#5#0#36#14#9

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= [0#0#8#2#5#0#36#14#9

##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and [4#7#3#58#0#2#0#a#0#9#0#16]:a#0#

##################################################################
lcs= a#0#

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= a#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 0 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 0#0#8#2#5#0#36#14#9a#0#0#7 ,lcsbeg= 19 ,prefix= 0#0#8#2#5#0#36#14#9
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and :

##################################################################
lcs= 

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9a#0#0#7] and :

##################################################################
lcs= 

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#2#8#0#5a#0#36#14#9#0#0#7]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [28#0#0#7#0#5a#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [8#0#2#7a#0#5#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#0#8#5#a#0#146#0#9#3#7#2]:#146#0#9#3#7#2]

##################################################################
lcs= #146#0#9#3#7#2]

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= #146#0#9#3#7#2]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 7
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#8#a#7#0#0#56#249#13#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#0#8a#0#2#14#36#0#9#7#0#5]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#0#0#0#358#27#a#14#6#0#9#0]:6#0#9#

##################################################################
lcs= 6#0#9#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= 6#0#9#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 6 ; str2[s2]= 6 ;s2= 0 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 4 ;len(str2)= 7 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 14
asferfind(): issubstring = True, beg= 14
lcsbeg= 14
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 14 ,prefix= 0#0#8#5#0#a#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Venus  in  Libra | Unoccupied  in  Scorpio | Ketu  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#8#0#7#0#0#5#469a#13#0#2#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#0#8#5#a#0#146#0#9#3#7#2]:#146#0#9#3#7#2]

##################################################################
lcs= #146#0#9#3#7#2]

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= #146#0#9#3#7#2]

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 16 ; s1= 7
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#57#28#0#0#3#14a#0#69#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#57a#28#0#0#3#14#0#69#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#0#5#3#7a#8#2#16#4#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#8#

##################################################################
lcs= #0#8#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#8#

##################################################################
lcs= #0#8#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#9#

##################################################################
lcs= #0#9#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 15
asferfind(): issubstring = True, beg= 15
lcsbeg= 15
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 15 ,prefix= 0#0#8#5#0#a#146
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Scorpio | Ketu  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#a#

##################################################################
lcs= #0#a#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= #0#a#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 7 ,prefix= 0#0#8#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | | Ascendant in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#0#5#9a#0#2#3#14#67#8#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#a#

##################################################################
lcs= #0#a#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= #0#a#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 7 ,prefix= 0#0#8#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | | Ascendant in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#9#

##################################################################
lcs= #0#9#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 15
asferfind(): issubstring = True, beg= 15
lcsbeg= 15
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 15 ,prefix= 0#0#8#5#0#a#146
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Scorpio | Ketu  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#0#78#a#2#5#0#13#49#6#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#0#8#37a#2#5#6#1#49#0#0#0]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [28#a#0#7#0#5#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [8#0#2#7#0#5a#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#9#

##################################################################
lcs= #0#9#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= #0#9#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 6 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 15
asferfind(): issubstring = True, beg= 15
lcsbeg= 15
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 15 ,prefix= 0#0#8#5#0#a#146
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Scorpio | Ketu  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#0#8#2#5#0#36#14#9a#0#0#7]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#0#8#5#0#a#146#0#9#3#7#2]:[0#0#8#5#0#a#146#0#9#3#7#2]

##################################################################
lcs= [0#0#8#5#0#a#146#0#9#3#7#2]

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= [0#0#8#5#0#a#146#0#9#3#7#2]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and [4#7#3#58#0#2#0#a#0#9#0#16]:#0#a#

##################################################################
lcs= #0#a#

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= #0#a#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 3 ;len(str2)= 6 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 0#0#8#5#0#a#146#0#9#3#7#2 ,lcsbeg= 7 ,prefix= 0#0#8#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | | Ascendant in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and :

##################################################################
lcs= 

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#5#0#a#146#0#9#3#7#2] and :

##################################################################
lcs= 

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#0#36#14#9#0#

##################################################################
lcs= #0#36#14#9#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #0#36#14#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 14 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 14 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= 3 ; str2[s2]= 3 ;s2= 3 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= 6 ; str2[s2]= 6 ;s2= 4 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= 1 ; str2[s2]= 1 ;s2= 6 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= 4 ; str2[s2]= 4 ;s2= 7 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 8 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 9 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 10 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 11 ;len(str2)= 14 ; s1= 9
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 12 ;len(str2)= 14 ; s1= 9
asferfind(): issubstring = True, beg= 9
lcsbeg= 9
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 9 ,prefix= 0#0#8#2#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Virgo | Mars  in  Libra | Venus  in  Libra | Sun  in  Scorpio | Mercury  in  Scorpio | Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [28#0#0#7#0#5a#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [8#0#2#7a#0#5#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#8#a#7#0#0#56#249#13#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8a#37#2#5#6#1#49#0#0#0]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8a#0#2#14#36#0#9#7#0#5]:[0#0#8

##################################################################
lcs= [0#0#8

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#0#0#358#27#a#14#6#0#9#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#8#0#7#0#0#5#469a#13#0#2#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8#5#a#0#146#0#9#3#7#2]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#57#28#0#0#3#14a#0#69#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#8#0#7#0#0#56#249#13#0#0#a]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#57a#28#0#0#3#14#0#69#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#5#3#7a#8#2#16#4#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#8#

##################################################################
lcs= #0#8#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#8#

##################################################################
lcs= #0#8#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #0#8#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 3 ;len(str2)= 6 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 1 ,prefix= 0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Taurus | Rahu  in  Gemini |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 17 ,prefix= 0#0#8#2#5#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#8#0#147#0#356#2#9#0#0#a#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 17 ,prefix= 0#0#8#2#5#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#78#a#2#5#0#13#49#6#0#0]:#2#5#0#

##################################################################
lcs= #2#5#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #2#5#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 5 ,prefix= 0#0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Cancer | Jupiter  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#5#9a#0#2#3#14#67#8#0#0]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:[0#0#

##################################################################
lcs= [0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#8#0#147#0#356#2#9#0#0#a#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 17 ,prefix= 0#0#8#2#5#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 17 ,prefix= 0#0#8#2#5#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#78#a#2#5#0#13#49#6#0#0]:#2#5#0#

##################################################################
lcs= #2#5#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #2#5#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 1 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 5 ; str2[s2]= 5 ;s2= 3 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 5
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 5
asferfind(): issubstring = True, beg= 5
lcsbeg= 5
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 5 ,prefix= 0#0#8
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Moon  in  Cancer | Jupiter  in  Leo | Unoccupied  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8#37a#2#5#6#1#49#0#0#0]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [28#a#0#7#0#5#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [8#0#2#7#0#5a#9#346#1#0#0#0]:0#0#

##################################################################
lcs= 0#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 0#0#

##########################################
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 0 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 0
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 0
asferfind(): issubstring = True, beg= 0
lcsbeg= 0
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 0 ,prefix= 
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Aries | Unoccupied  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 17 ,prefix= 0#0#8#2#5#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8#2#5#0#36#14#9#0#a#7]

##################################################################
lcs= [0#0#8#2#5#0#36#14#9#0#a#7]

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8#2#5#0#36#14#9#0#a#7]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8#2#5#0#36#14#9a#0#0#7]:[0#0#8#2#5#0#36#14#9

##################################################################
lcs= [0#0#8#2#5#0#36#14#9

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8#2#5#0#36#14#9

##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8#5#0#a#146#0#9#3#7#2]:[0#0#8#

##################################################################
lcs= [0#0#8#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [0#0#8#2#5#0#36#14#9#0#a#7]:[0#0#8#2#5#0#36#14#9#0#a#7]

##################################################################
lcs= [0#0#8#2#5#0#36#14#9#0#a#7]

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= [0#0#8#2#5#0#36#14#9#0#a#7]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and [4#7#3#58#0#2#0#a#0#9#0#16]:#9#0#

##################################################################
lcs= #9#0#

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 7
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 9
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 11
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 17
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 17
asferfind(): issubstring = True, beg= 17
lcsbeg= 17
computebhava(): str1= 0#0#8#2#5#0#36#14#9#0#a#7 ,lcsbeg= 17 ,prefix= 0#0#8#2#5#0#36#14
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Sagittarius | Unoccupied  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and :

##################################################################
lcs= 

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [0#0#8#2#5#0#36#14#9#0#a#7] and :

##################################################################
lcs= 

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#2#8#0#5a#0#36#14#9#0#0#7]:#9#0#

##################################################################
lcs= #9#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 16
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 1 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 18
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 18
asferfind(): issubstring = True, beg= 18
lcsbeg= 18
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 18 ,prefix= 4#7#3#58#0#2#0#a#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#0#8a#37#2#5#6#1#49#0#0#0]:9#0#

##################################################################
lcs= 9#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= 9#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 19 ,prefix= 4#7#3#58#0#2#0#a#0#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [28#0#0#7#0#5a#9#346#1#0#0#0]:8#0#

##################################################################
lcs= 8#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= 8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 7 ,prefix= 4#7#3#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [8#0#2#7a#0#5#9#346#1#0#0#0]:8#0#2#

##################################################################
lcs= 8#0#2#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= 8#0#2#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 4 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 7 ,prefix= 4#7#3#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Cancer | Unoccupied  in  Leo | Moon  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#0#8#5#a#0#146#0#9#3#7#2]:#a#0#

##################################################################
lcs= #a#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #a#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 1 ;len(str2)= 6 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 14
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 14
asferfind(): issubstring = True, beg= 14
lcsbeg= 14
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 14 ,prefix= 4#7#3#58#0#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Scorpio | Unoccupied  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#8#a#7#0#0#56#249#13#0#0#0]:#7#

##################################################################
lcs= #7#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #7#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= 7 ; str2[s2]= 7 ;s2= 1 ;len(str2)= 4 ; s1= 1
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 4 ; s1= 1
asferfind(): issubstring = True, beg= 1
lcsbeg= 1
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 1 ,prefix= 4
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Saturn  in  Taurus |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#8#0#7#0#0#56#249#13#0#0#a]:8#0#

##################################################################
lcs= 8#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= 8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 7 ,prefix= 4#7#3#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#0#8a#37#2#5#6#1#49#0#0#0]:9#0#

##################################################################
lcs= 9#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= 9#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 19 ,prefix= 4#7#3#58#0#2#0#a#0#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#0#8a#0#2#14#36#0#9#7#0#5]:#0#2#

##################################################################
lcs= #0#2#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 8 ,prefix= 4#7#3#58
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Moon  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#0#0#0#358#27#a#14#6#0#9#0]:#0#9#0

##################################################################
lcs= #0#9#0

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#9#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 14
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 16
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 16
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 7 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 16
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 16
asferfind(): issubstring = True, beg= 16
lcsbeg= 16
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 16 ,prefix= 4#7#3#58#0#2#0#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Ketu  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#8#0#7#0#0#5#469a#13#0#2#0]:#0#2#0

##################################################################
lcs= #0#2#0

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#2#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 8 ,prefix= 4#7#3#58
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Moon  in  Virgo | Unoccupied  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#0#8#5#a#0#146#0#9#3#7#2]:#a#0#

##################################################################
lcs= #a#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #a#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 1 ;len(str2)= 6 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 14
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 14
asferfind(): issubstring = True, beg= 14
lcsbeg= 14
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 14 ,prefix= 4#7#3#58#0#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Scorpio | Unoccupied  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#57#28#0#0#3#14a#0#69#0#0#0]:8#0#

##################################################################
lcs= 8#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= 8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 7 ,prefix= 4#7#3#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#8#0#7#0#0#56#249#13#0#0#a]:8#0#

##################################################################
lcs= 8#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= 8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 7 ,prefix= 4#7#3#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#57a#28#0#0#3#14#0#69#0#0#0]:8#0#

##################################################################
lcs= 8#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= 8#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 7 ,prefix= 4#7#3#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Cancer | Unoccupied  in  Leo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#0#5#3#7a#8#2#16#4#0#0#9]:#0#9

##################################################################
lcs= #0#9

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 14
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 16
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 16
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 5 ; s1= 16
asferfind(): issubstring = True, beg= 16
lcsbeg= 16
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 16 ,prefix= 4#7#3#58#0#2#0#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Ketu  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [7#0#2#0#9#0#3#56#14a#0#8#0]:#0#2#0#

##################################################################
lcs= #0#2#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#2#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 8 ,prefix= 4#7#3#58
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Moon  in  Virgo | Unoccupied  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [7#0#2#0#9a#0#3#56#14#0#8#0]:#0#2#0#

##################################################################
lcs= #0#2#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#2#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 8 ,prefix= 4#7#3#58
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Moon  in  Virgo | Unoccupied  in  Libra |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#9#0#

##################################################################
lcs= #0#9#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 16
asferfind(): issubstring = True, beg= 16
lcsbeg= 16
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 16 ,prefix= 4#7#3#58#0#2#0#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Ketu  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#a#0

##################################################################
lcs= #0#a#0

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#a#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 3 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 12
asferfind(): issubstring = True, beg= 12
lcsbeg= 12
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 12 ,prefix= 4#7#3#58#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Libra | | Ascendant in  Scorpio | Unoccupied  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#1

##################################################################
lcs= #0#1

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#1

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 14
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 16
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 16
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#0#5#9a#0#2#3#14#67#8#0#0]:#0#2#

##################################################################
lcs= #0#2#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#2#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 3 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 8
asferfind(): issubstring = True, beg= 8
lcsbeg= 8
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 8 ,prefix= 4#7#3#58
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Leo | Moon  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#0#0#0#0#68a#2#1345#7#0#0#9]:#0#9

##################################################################
lcs= #0#9

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#9

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 14
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 16
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 16
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 5 ; s1= 16
asferfind(): issubstring = True, beg= 16
lcsbeg= 16
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 16 ,prefix= 4#7#3#58#0#2#0#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Ketu  in  Capricorn |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#8#0#147#0#356#2#9#0#0#a#0]:#0#a#0

##################################################################
lcs= #0#a#0

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#a#0

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 3 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 7 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 7 ; s1= 12
asferfind(): issubstring = True, beg= 12
lcsbeg= 12
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 12 ,prefix= 4#7#3#58#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Libra | | Ascendant in  Scorpio | Unoccupied  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [5#2#0#9#0#7#1#46a#3#8#0#0]:#0#9#0#

##################################################################
lcs= #0#9#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 16
asferfind(): issubstring = True, beg= 16
lcsbeg= 16
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 16 ,prefix= 4#7#3#58#0#2#0#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Ketu  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#0#78#a#2#5#0#13#49#6#0#0]:#0#1

##################################################################
lcs= #0#1

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#1

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 14
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 16
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 5 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 5 ; s1= 16
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 5 ; s1= 18
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#0#8#37a#2#5#6#1#49#0#0#0]:9#0#

##################################################################
lcs= 9#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= 9#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 0 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 19
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 19
asferfind(): issubstring = True, beg= 19
lcsbeg= 19
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 19 ,prefix= 4#7#3#58#0#2#0#a#0#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Ketu  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [28#a#0#7#0#5#9#346#1#0#0#0]:#a#0#

##################################################################
lcs= #a#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #a#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 14
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 1 ;len(str2)= 6 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 14
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 3 ;len(str2)= 6 ; s1= 14
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 14
asferfind(): issubstring = True, beg= 14
lcsbeg= 14
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 14 ,prefix= 4#7#3#58#0#2#0
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Scorpio | Unoccupied  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [8#0#2#7#0#5a#9#346#1#0#0#0]:8#0#2#

##################################################################
lcs= 8#0#2#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= 8#0#2#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= 8 ; str2[s2]= 8 ;s2= 0 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= 2 ; str2[s2]= 2 ;s2= 4 ;len(str2)= 7 ; s1= 7
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 5 ;len(str2)= 7 ; s1= 7
asferfind(): issubstring = True, beg= 7
lcsbeg= 7
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 7 ,prefix= 4#7#3#5
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Rahu  in  Cancer | Unoccupied  in  Leo | Moon  in  Virgo |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#3#7#8a#25#6#0#14#0#9#0#0]:#0#9#0#

##################################################################
lcs= #0#9#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#9#0#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 12
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 14
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= 9 ; str2[s2]= 9 ;s2= 3 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 5 ;len(str2)= 8 ; s1= 16
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 6 ;len(str2)= 8 ; s1= 16
asferfind(): issubstring = True, beg= 16
lcsbeg= 16
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 16 ,prefix= 4#7#3#58#0#2#0#a
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Sagittarius | Ketu  in  Capricorn | Unoccupied  in  Aquarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#0#8#2#5#0#36#14#9#0#a#7]:#0#a#

##################################################################
lcs= #0#a#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#a#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 3 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 12
asferfind(): issubstring = True, beg= 12
lcsbeg= 12
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 12 ,prefix= 4#7#3#58#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Libra | | Ascendant in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#0#8#2#5#0#36#14#9a#0#0#7]:a#0#

##################################################################
lcs= a#0#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= a#0#

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 0 ;len(str2)= 5 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 1 ;len(str2)= 5 ; s1= 15
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 2 ;len(str2)= 5 ; s1= 15
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 3 ;len(str2)= 5 ; s1= 15
asferfind(): issubstring = True, beg= 15
lcsbeg= 15
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 15 ,prefix= 4#7#3#58#0#2#0#
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: | Ascendant in  Scorpio | Unoccupied  in  Sagittarius |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#0#8#5#0#a#146#0#9#3#7#2]:#0#a#

##################################################################
lcs= #0#a#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#a#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 3 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 12
asferfind(): issubstring = True, beg= 12
lcsbeg= 12
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 12 ,prefix= 4#7#3#58#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Libra | | Ascendant in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [0#0#8#2#5#0#36#14#9#0#a#7]:#0#a#

##################################################################
lcs= #0#a#

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= #0#a#

##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 1
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 3
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 5
##########################################
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 8
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 8
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 10
##########################################
##########################################
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 0 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= 0 ; str2[s2]= 0 ;s2= 1 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 2 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= a ; str2[s2]= a ;s2= 3 ;len(str2)= 6 ; s1= 12
asferfind(): str1[s1+s2]= # ; str2[s2]= # ;s2= 4 ;len(str2)= 6 ; s1= 12
asferfind(): issubstring = True, beg= 12
lcsbeg= 12
computebhava(): str1= 4#7#3#58#0#2#0#a#0#9#0#16 ,lcsbeg= 12 ,prefix= 4#7#3#58#0#2
=====================================
Textually Translated Classified or Clustered LCS Pattern Rule: Unoccupied  in  Libra | | Ascendant in  Scorpio |
=====================================
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and [4#7#3#58#0#2#0#a#0#9#0#16]:[4#7#3#58#0#2#0#a#0#9#0#16]

##################################################################
lcs= [4#7#3#58#0#2#0#a#0#9#0#16]

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= [4#7#3#58#0#2#0#a#0#9#0#16]

lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and :

##################################################################
lcs= 

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for [4#7#3#58#0#2#0#a#0#9#0#16] and :

##################################################################
lcs= 

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#2#8#0#5a#0#36#14#9#0#0#7]:

##################################################################
lcs= 

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8a#37#2#5#6#1#49#0#0#0]:

##################################################################
lcs= 

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [28#0#0#7#0#5a#9#346#1#0#0#0]:

##################################################################
lcs= 

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [8#0#2#7a#0#5#9#346#1#0#0#0]:

##################################################################
lcs= 

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8#5#a#0#146#0#9#3#7#2]:

##################################################################
lcs= 

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#8#a#7#0#0#56#249#13#0#0#0]:

##################################################################
lcs= 

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#8#0#7#0#0#56#249#13#0#0#a]:

##################################################################
lcs= 

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8a#37#2#5#6#1#49#0#0#0]:

##################################################################
lcs= 

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8a#0#2#14#36#0#9#7#0#5]:

##################################################################
lcs= 

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#0#0#358#27#a#14#6#0#9#0]:

##################################################################
lcs= 

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#8#0#7#0#0#5#469a#13#0#2#0]:

##################################################################
lcs= 

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8#5#a#0#146#0#9#3#7#2]:

##################################################################
lcs= 

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#57#28#0#0#3#14a#0#69#0#0#0]:

##################################################################
lcs= 

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#8#0#7#0#0#56#249#13#0#0#a]:

##################################################################
lcs= 

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#57a#28#0#0#3#14#0#69#0#0#0]:

##################################################################
lcs= 

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#5#3#7a#8#2#16#4#0#0#9]:

##################################################################
lcs= 

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [7#0#2#0#9#0#3#56#14a#0#8#0]:

##################################################################
lcs= 

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [7#0#2#0#9a#0#3#56#14#0#8#0]:

##################################################################
lcs= 

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [5#2#0#9#0#7#1#46a#3#8#0#0]:

##################################################################
lcs= 

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#8#0#147#0#356#2#9#0#0#a#0]:

##################################################################
lcs= 

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#78#a#2#5#0#13#49#6#0#0]:

##################################################################
lcs= 

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#5#9a#0#2#3#14#67#8#0#0]:

##################################################################
lcs= 

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#0#0#0#68a#2#1345#7#0#0#9]:

##################################################################
lcs= 

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#8#0#147#0#356#2#9#0#0#a#0]:

##################################################################
lcs= 

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [5#2#0#9#0#7#1#46a#3#8#0#0]:

##################################################################
lcs= 

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#78#a#2#5#0#13#49#6#0#0]:

##################################################################
lcs= 

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8#37a#2#5#6#1#49#0#0#0]:

##################################################################
lcs= 

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [28#a#0#7#0#5#9#346#1#0#0#0]:

##################################################################
lcs= 

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [8#0#2#7#0#5a#9#346#1#0#0#0]:

##################################################################
lcs= 

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#3#7#8a#25#6#0#14#0#9#0#0]:

##################################################################
lcs= 

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8#2#5#0#36#14#9#0#a#7]:

##################################################################
lcs= 

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8#2#5#0#36#14#9a#0#0#7]:

##################################################################
lcs= 

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8#5#0#a#146#0#9#3#7#2]:

##################################################################
lcs= 

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8#2#5#0#36#14#9#0#a#7]:

##################################################################
lcs= 

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [4#7#3#58#0#2#0#a#0#9#0#16]:

##################################################################
lcs= 

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and :

##################################################################
lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and :

##################################################################
lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#2#8#0#5a#0#36#14#9#0#0#7]:

##################################################################
lcs= 

encstr= 0#2#8#0#5a#0#36#14#9#0#0#7 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8a#37#2#5#6#1#49#0#0#0]:

##################################################################
lcs= 

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [28#0#0#7#0#5a#9#346#1#0#0#0]:

##################################################################
lcs= 

encstr= 28#0#0#7#0#5a#9#346#1#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [8#0#2#7a#0#5#9#346#1#0#0#0]:

##################################################################
lcs= 

encstr= 8#0#2#7a#0#5#9#346#1#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8#5#a#0#146#0#9#3#7#2]:

##################################################################
lcs= 

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#8#a#7#0#0#56#249#13#0#0#0]:

##################################################################
lcs= 

encstr= 0#8#a#7#0#0#56#249#13#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#8#0#7#0#0#56#249#13#0#0#a]:

##################################################################
lcs= 

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8a#37#2#5#6#1#49#0#0#0]:

##################################################################
lcs= 

encstr= 0#0#8a#37#2#5#6#1#49#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8a#0#2#14#36#0#9#7#0#5]:

##################################################################
lcs= 

encstr= 0#0#8a#0#2#14#36#0#9#7#0#5 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#0#0#358#27#a#14#6#0#9#0]:

##################################################################
lcs= 

encstr= 0#0#0#0#358#27#a#14#6#0#9#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#8#0#7#0#0#5#469a#13#0#2#0]:

##################################################################
lcs= 

encstr= 0#8#0#7#0#0#5#469a#13#0#2#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8#5#a#0#146#0#9#3#7#2]:

##################################################################
lcs= 

encstr= 0#0#8#5#a#0#146#0#9#3#7#2 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#57#28#0#0#3#14a#0#69#0#0#0]:

##################################################################
lcs= 

encstr= 0#57#28#0#0#3#14a#0#69#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#8#0#7#0#0#56#249#13#0#0#a]:

##################################################################
lcs= 

encstr= 0#8#0#7#0#0#56#249#13#0#0#a ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#57a#28#0#0#3#14#0#69#0#0#0]:

##################################################################
lcs= 

encstr= 0#57a#28#0#0#3#14#0#69#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#5#3#7a#8#2#16#4#0#0#9]:

##################################################################
lcs= 

encstr= 0#0#5#3#7a#8#2#16#4#0#0#9 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [7#0#2#0#9#0#3#56#14a#0#8#0]:

##################################################################
lcs= 

encstr= 7#0#2#0#9#0#3#56#14a#0#8#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [7#0#2#0#9a#0#3#56#14#0#8#0]:

##################################################################
lcs= 

encstr= 7#0#2#0#9a#0#3#56#14#0#8#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [5#2#0#9#0#7#1#46a#3#8#0#0]:

##################################################################
lcs= 

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#8#0#147#0#356#2#9#0#0#a#0]:

##################################################################
lcs= 

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#78#a#2#5#0#13#49#6#0#0]:

##################################################################
lcs= 

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#5#9a#0#2#3#14#67#8#0#0]:

##################################################################
lcs= 

encstr= 0#0#5#9a#0#2#3#14#67#8#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#0#0#0#68a#2#1345#7#0#0#9]:

##################################################################
lcs= 

encstr= 0#0#0#0#0#68a#2#1345#7#0#0#9 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#8#0#147#0#356#2#9#0#0#a#0]:

##################################################################
lcs= 

encstr= 0#8#0#147#0#356#2#9#0#0#a#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [5#2#0#9#0#7#1#46a#3#8#0#0]:

##################################################################
lcs= 

encstr= 5#2#0#9#0#7#1#46a#3#8#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#78#a#2#5#0#13#49#6#0#0]:

##################################################################
lcs= 

encstr= 0#0#78#a#2#5#0#13#49#6#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8#37a#2#5#6#1#49#0#0#0]:

##################################################################
lcs= 

encstr= 0#0#8#37a#2#5#6#1#49#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [28#a#0#7#0#5#9#346#1#0#0#0]:

##################################################################
lcs= 

encstr= 28#a#0#7#0#5#9#346#1#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [8#0#2#7#0#5a#9#346#1#0#0#0]:

##################################################################
lcs= 

encstr= 8#0#2#7#0#5a#9#346#1#0#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#3#7#8a#25#6#0#14#0#9#0#0]:

##################################################################
lcs= 

encstr= 0#3#7#8a#25#6#0#14#0#9#0#0 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8#2#5#0#36#14#9#0#a#7]:

##################################################################
lcs= 

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8#2#5#0#36#14#9a#0#0#7]:

##################################################################
lcs= 

encstr= 0#0#8#2#5#0#36#14#9a#0#0#7 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8#5#0#a#146#0#9#3#7#2]:

##################################################################
lcs= 

encstr= 0#0#8#5#0#a#146#0#9#3#7#2 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [0#0#8#2#5#0#36#14#9#0#a#7]:

##################################################################
lcs= 

encstr= 0#0#8#2#5#0#36#14#9#0#a#7 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and [4#7#3#58#0#2#0#a#0#9#0#16]:

##################################################################
lcs= 

encstr= 4#7#3#58#0#2#0#a#0#9#0#16 ; lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and :

##################################################################
lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
##################################################################
asferencodehoro::longestCommonSubstring(): Longest Common Substring for  and :

##################################################################
lcs= 

##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
##########################################
lcsbeg= -1
