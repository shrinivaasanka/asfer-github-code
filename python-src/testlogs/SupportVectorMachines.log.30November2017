weights: var0
tuple: [1 1 1 1 1 1 1 1 1 1]
============================================
Objective Function
============================================
minimize 0.5 * abs(0.0 + abs(var0[0, 0]) + abs(var0[1, 0]) + abs(var0[2, 0]) + abs(var0[3, 0]) + abs(var0[4, 0]) + abs(var0[5, 0]) + abs(var0[6, 0]) + abs(var0[7, 0]) + abs(var0[8, 0]) + abs(var0[9, 0]))
constraint: 0.0 + 1 * var0[0, 0] + 1 * var0[1, 0] + 1 * var0[2, 0] + 1 * var0[3, 0] + 1 * var0[4, 0] + 1 * var0[5, 0] + 1 * var0[6, 0] + 1 * var0[7, 0] + 1 * var0[8, 0] + 1 * var0[9, 0] + 18.0
============================================
Constraints
============================================
[LeqConstraint(Constant(CONSTANT, POSITIVE, (1, 1)), Expression(CONVEX, POSITIVE, (1, 1)))]
=====================================
Installed Solvers:
=====================================
['CVXOPT', 'ECOS_BB', 'SCS', 'ECOS', 'LS']
Is Problem DCCP: True
=====================================
CVXPY args:
=====================================

ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  9e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +3.747e-09  +1e-01  1e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +8.292e-11  +1e-03  1e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +1.374e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +1.869e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +2.474e-16  +2e-09  2e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.6e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000389 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  5e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +1.135e-08  +1e-01  6e-04  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +2.512e-10  +1e-03  7e-06  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +4.146e-12  +1e-05  7e-08  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +5.259e-14  +2e-07  8e-10  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +6.541e-16  +2e-09  9e-12  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=9.2e-12, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000340 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  8e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +4.769e-09  +1e-01  9e-04  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +1.055e-10  +1e-03  1e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +1.748e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +2.349e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +3.072e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.4e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000337 seconds.

----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.73e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf       inf       inf  2.38e-04 
    80| 8.57e-05  4.77e-05  6.98e-04  9.45e-02  9.37e-02  7.34e-16  1.23e-03 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 1.23e-03s
	Lin-sys: avg # CG iterations: 2.37, avg solve time: 6.77e-06s
	Cones: avg projection time: 1.21e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 1.0576e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = 1.0506e-17
|Ax + s - b|_2 / (1 + |b|_2) = 8.5745e-05
|A'y + c|_2 / (1 + |c|_2) = 4.7747e-05
|c'x + b'y| / (1 + |c'x| + |b'y|) = 6.9795e-04
----------------------------------------------------------------------------
c'x = 0.0945, -b'y = 0.0937
============================================================================
----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.71e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.74e-04 
    40| 2.14e-06  2.64e-06  5.48e-06 -5.48e-06 -0.00e+00  0.00e+00  6.66e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 6.72e-04s
	Lin-sys: avg # CG iterations: 1.73, avg solve time: 5.93e-06s
	Cones: avg projection time: 1.21e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 4.2082e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -1.0934e-17
|Ax + s - b|_2 / (1 + |b|_2) = 2.1441e-06
|A'y + c|_2 / (1 + |c|_2) = 2.6438e-06
|c'x + b'y| / (1 + |c'x| + |b'y|) = 5.4806e-06
----------------------------------------------------------------------------
c'x = -0.0000, -b'y = -0.0000
============================================================================
----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.68e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.97e-04 
    40| 3.54e-06  3.24e-06  9.36e-06 -9.36e-06 -0.00e+00  3.11e-16  6.62e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 6.69e-04s
	Lin-sys: avg # CG iterations: 1.76, avg solve time: 6.53e-06s
	Cones: avg projection time: 1.20e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 8.4169e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -2.3218e-17
|Ax + s - b|_2 / (1 + |b|_2) = 3.5430e-06
|A'y + c|_2 / (1 + |c|_2) = 3.2429e-06
|c'x + b'y| / (1 + |c'x| + |b'y|) = 9.3587e-06
----------------------------------------------------------------------------
c'x = -0.0000, -b'y = -0.0000
============================================================================
=====================================
Problem value:
=====================================
None
=====================================
Result:
=====================================
(1.4969351066544823e-05, -3.1411449598096022e-06, [matrix([[ -2.99387021e-06],
        [ -2.99387021e-06],
        [ -2.99387021e-06],
        [ -2.99387021e-06],
        [ -2.99387021e-06],
        [ -2.99387021e-06],
        [ -2.99387021e-06],
        [ -2.99387021e-06],
        [ -2.99387021e-06],
        [ -2.99387021e-06]])])
weights: var128
tuple: [4 3 3 4 4 2 6 2 6 1]
============================================
Objective Function
============================================
minimize 0.5 * abs(0.0 + abs(var128[0, 0]) + abs(var128[1, 0]) + abs(var128[2, 0]) + abs(var128[3, 0]) + abs(var128[4, 0]) + abs(var128[5, 0]) + abs(var128[6, 0]) + abs(var128[7, 0]) + abs(var128[8, 0]) + abs(var128[9, 0]))
constraint: 0.0 + 4 * var128[0, 0] + 3 * var128[1, 0] + 3 * var128[2, 0] + 4 * var128[3, 0] + 4 * var128[4, 0] + 2 * var128[5, 0] + 6 * var128[6, 0] + 2 * var128[7, 0] + 6 * var128[8, 0] + 1 * var128[9, 0] + 18.0
============================================
Constraints
============================================
[LeqConstraint(Constant(CONSTANT, POSITIVE, (1, 1)), Expression(CONVEX, POSITIVE, (1, 1)))]
=====================================
Installed Solvers:
=====================================
['CVXOPT', 'ECOS_BB', 'SCS', 'ECOS', 'LS']
Is Problem DCCP: True
=====================================
CVXPY args:
=====================================

ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  7e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +5.769e-09  +1e-01  8e-04  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +1.277e-10  +1e-03  9e-06  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +2.114e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +2.807e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +3.633e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.3e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000472 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  9e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +3.749e-09  +1e-01  1e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +8.297e-11  +1e-03  1e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +1.375e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +1.871e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +2.476e-16  +2e-09  2e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.6e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000340 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  6e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +7.112e-09  +1e-01  8e-04  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +1.574e-10  +1e-03  8e-06  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +2.604e-12  +1e-05  9e-08  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +3.413e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +4.364e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.2e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000379 seconds.

----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.89e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf       inf       inf  1.75e-04 
   100| 1.60e-04  5.35e-05  8.07e-04  9.44e-02  9.35e-02  8.22e-17  1.56e-03 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 1.57e-03s
	Lin-sys: avg # CG iterations: 3.50, avg solve time: 8.40e-06s
	Cones: avg projection time: 1.19e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 4.7379e-17, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -5.0341e-19
|Ax + s - b|_2 / (1 + |b|_2) = 1.6022e-04
|A'y + c|_2 / (1 + |c|_2) = 5.3523e-05
|c'x + b'y| / (1 + |c'x| + |b'y|) = 8.0697e-04
----------------------------------------------------------------------------
c'x = 0.0944, -b'y = 0.0935
============================================================================
----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.66e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.77e-04 
    20| 6.15e-05  2.60e-04  2.37e-04  2.37e-04 -0.00e+00  0.00e+00  4.38e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.45e-04s
	Lin-sys: avg # CG iterations: 2.29, avg solve time: 7.27e-06s
	Cones: avg projection time: 1.30e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 2.3183e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -1.0503e-17
|Ax + s - b|_2 / (1 + |b|_2) = 6.1512e-05
|A'y + c|_2 / (1 + |c|_2) = 2.6028e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 2.3720e-04
----------------------------------------------------------------------------
c'x = 0.0002, -b'y = -0.0000
============================================================================
----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.64e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.72e-04 
    20| 1.39e-04  1.49e-04  3.72e-04  3.72e-04 -0.00e+00  8.58e-17  4.33e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.43e-04s
	Lin-sys: avg # CG iterations: 2.38, avg solve time: 7.19e-06s
	Cones: avg projection time: 1.23e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 2.3183e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -6.0476e-18
|Ax + s - b|_2 / (1 + |b|_2) = 1.3869e-04
|A'y + c|_2 / (1 + |c|_2) = 1.4927e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 3.7220e-04
----------------------------------------------------------------------------
c'x = 0.0004, -b'y = -0.0000
============================================================================
=====================================
Problem value:
=====================================
None
=====================================
Result:
=====================================
(0.0003909682332377388, 2.8815848999939773e-05, [matrix([[  1.07342407e-04],
        [  8.59189315e-05],
        [  8.59189315e-05],
        [  1.07342407e-04],
        [  1.07342407e-04],
        [  5.72014066e-05],
        [  7.28069367e-05],
        [  5.72014066e-05],
        [  7.28069367e-05],
        [  2.80546969e-05]])])
weights: var256
tuple: [-4 -3 -3 -4 -4 -2 -6 -2 -6 -1]
============================================
Objective Function
============================================
minimize 0.5 * abs(0.0 + abs(var256[0, 0]) + abs(var256[1, 0]) + abs(var256[2, 0]) + abs(var256[3, 0]) + abs(var256[4, 0]) + abs(var256[5, 0]) + abs(var256[6, 0]) + abs(var256[7, 0]) + abs(var256[8, 0]) + abs(var256[9, 0]))
constraint: 0.0 + -4 * var256[0, 0] + -3 * var256[1, 0] + -3 * var256[2, 0] + -4 * var256[3, 0] + -4 * var256[4, 0] + -2 * var256[5, 0] + -6 * var256[6, 0] + -2 * var256[7, 0] + -6 * var256[8, 0] + -1 * var256[9, 0] + 18.0
============================================
Constraints
============================================
[LeqConstraint(Constant(CONSTANT, POSITIVE, (1, 1)), Expression(CONVEX, POSITIVE, (1, 1)))]
=====================================
Installed Solvers:
=====================================
['CVXOPT', 'ECOS_BB', 'SCS', 'ECOS', 'LS']
Is Problem DCCP: True
=====================================
CVXPY args:
=====================================

ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  7e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +6.415e-09  +1e-01  8e-04  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +1.420e-10  +1e-03  9e-06  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +2.349e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +3.101e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +3.989e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.2e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000343 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  8e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +4.136e-09  +1e-01  1e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +9.153e-11  +1e-03  1e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +1.517e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +2.054e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +2.704e-16  +2e-09  2e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.5e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000334 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  1e-01  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +3.021e-09  +1e-01  1e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +6.686e-11  +1e-03  1e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +1.108e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +1.523e-14  +2e-07  2e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +2.037e-16  +2e-09  2e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.8e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000393 seconds.

----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.68e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.75e-04 
    20| 4.08e-05  2.26e-04  1.30e-04  1.30e-04 -0.00e+00  0.00e+00  4.37e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.44e-04s
	Lin-sys: avg # CG iterations: 2.38, avg solve time: 7.25e-06s
	Cones: avg projection time: 1.25e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 1.1591e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -1.6125e-19
|Ax + s - b|_2 / (1 + |b|_2) = 4.0811e-05
|A'y + c|_2 / (1 + |c|_2) = 2.2604e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 1.3008e-04
----------------------------------------------------------------------------
c'x = 0.0001, -b'y = -0.0000
============================================================================
----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.68e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.73e-04 
    20| 6.15e-05  2.60e-04  2.37e-04  2.37e-04 -0.00e+00  0.00e+00  4.32e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.38e-04s
	Lin-sys: avg # CG iterations: 2.29, avg solve time: 7.15e-06s
	Cones: avg projection time: 1.22e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 2.3183e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -1.0503e-17
|Ax + s - b|_2 / (1 + |b|_2) = 6.1512e-05
|A'y + c|_2 / (1 + |c|_2) = 2.6028e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 2.3720e-04
----------------------------------------------------------------------------
c'x = 0.0002, -b'y = -0.0000
============================================================================
=====================================
Problem value:
=====================================
None
=====================================
Result:
=====================================
(0.000595424252601858, 4.795197401368442e-05, [matrix([[ -1.54674052e-04],
        [ -1.31956271e-04],
        [ -1.31956271e-04],
        [ -1.54674052e-04],
        [ -1.54674052e-04],
        [ -9.23799133e-05],
        [ -1.15591726e-04],
        [ -9.23799133e-05],
        [ -1.15591726e-04],
        [ -4.69705294e-05]])])
weights: var356
tuple: [5 3 5 6 7 3 6 3 6 7]
============================================
Objective Function
============================================
minimize 0.5 * abs(0.0 + abs(var356[0, 0]) + abs(var356[1, 0]) + abs(var356[2, 0]) + abs(var356[3, 0]) + abs(var356[4, 0]) + abs(var356[5, 0]) + abs(var356[6, 0]) + abs(var356[7, 0]) + abs(var356[8, 0]) + abs(var356[9, 0]))
constraint: 0.0 + 5 * var356[0, 0] + 3 * var356[1, 0] + 5 * var356[2, 0] + 6 * var356[3, 0] + 7 * var356[4, 0] + 3 * var356[5, 0] + 6 * var356[6, 0] + 3 * var356[7, 0] + 6 * var356[8, 0] + 7 * var356[9, 0] + 18.0
============================================
Constraints
============================================
[LeqConstraint(Constant(CONSTANT, POSITIVE, (1, 1)), Expression(CONVEX, POSITIVE, (1, 1)))]
=====================================
Installed Solvers:
=====================================
['CVXOPT', 'ECOS_BB', 'SCS', 'ECOS', 'LS']
Is Problem DCCP: True
=====================================
CVXPY args:
=====================================

ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  1e-01  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +3.035e-09  +1e-01  1e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +6.718e-11  +1e-03  1e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +1.114e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +1.530e-14  +2e-07  2e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +2.046e-16  +2e-09  2e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.8e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000344 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  1e-01  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +2.734e-09  +1e-01  1e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +6.051e-11  +1e-03  1e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +1.003e-12  +1e-05  2e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +1.384e-14  +2e-07  2e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +1.859e-16  +2e-09  2e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.9e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000339 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  6e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +9.057e-09  +1e-01  7e-04  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +2.004e-10  +1e-03  8e-06  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +3.312e-12  +1e-05  8e-08  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +4.271e-14  +2e-07  9e-10  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +5.384e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.0e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000391 seconds.

----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 2.17e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.78e-04 
    20| 1.49e-04  2.71e-04  4.58e-05  4.58e-05 -0.00e+00  6.17e-17  4.40e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.47e-04s
	Lin-sys: avg # CG iterations: 2.29, avg solve time: 7.31e-06s
	Cones: avg projection time: 1.23e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 8.8894e-18, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -4.7207e-22
|Ax + s - b|_2 / (1 + |b|_2) = 1.4875e-04
|A'y + c|_2 / (1 + |c|_2) = 2.7120e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 4.5754e-05
----------------------------------------------------------------------------
c'x = 0.0000, -b'y = -0.0000
============================================================================
----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.66e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.76e-04 
    20| 1.31e-04  2.28e-04  1.76e-04  1.76e-04 -0.00e+00  6.17e-17  4.39e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.45e-04s
	Lin-sys: avg # CG iterations: 2.38, avg solve time: 7.22e-06s
	Cones: avg projection time: 1.23e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 1.7780e-17, dist(y, K*) = 0.0000e+00, s'y/|s||y| = 5.4038e-18
|Ax + s - b|_2 / (1 + |b|_2) = 1.3146e-04
|A'y + c|_2 / (1 + |c|_2) = 2.2802e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 1.7595e-04
----------------------------------------------------------------------------
c'x = 0.0002, -b'y = -0.0000
============================================================================
=====================================
Problem value:
=====================================
None
=====================================
Result:
=====================================
(0.0006454332558081153, 2.5332176815230013e-05, [matrix([[  1.28061175e-04],
        [  7.55381000e-05],
        [  1.28061175e-04],
        [  1.53284600e-04],
        [  1.74138031e-04],
        [  7.55381000e-05],
        [  1.53284600e-04],
        [  7.55381000e-05],
        [  1.53284600e-04],
        [  1.74138031e-04]])])
=======================================================
distance of Support Vector point0 -  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  : 1.49693510665e-05
distance of Support Vector point1 -  [4, 3, 3, 4, 4, 2, 6, 2, 6, 1]  : 0.000390968233238
distance of Support Vector point2  -  [-4, -3, -3, -4, -4, -2, -6, -2, -6, -1]  (diametrically 180 degrees from point1, should be equal to distance of point1): 0.000595424252602
distance of Support Vector point3 -  [5, 3, 5, 6, 7, 3, 6, 3, 6, 7]  : 0.000645433255808
====================================================================================
learn_support_vectors_from_dataset() - Support Vectors Learnt from Training Dataset:
====================================================================================
weights: var456
tuple: [1 1 1 1 1 1 1 1 1 1]
============================================
Objective Function
============================================
minimize 0.5 * abs(0.0 + abs(var456[0, 0]) + abs(var456[1, 0]) + abs(var456[2, 0]) + abs(var456[3, 0]) + abs(var456[4, 0]) + abs(var456[5, 0]) + abs(var456[6, 0]) + abs(var456[7, 0]) + abs(var456[8, 0]) + abs(var456[9, 0]))
constraint: 0.0 + 1 * var456[0, 0] + 1 * var456[1, 0] + 1 * var456[2, 0] + 1 * var456[3, 0] + 1 * var456[4, 0] + 1 * var456[5, 0] + 1 * var456[6, 0] + 1 * var456[7, 0] + 1 * var456[8, 0] + 1 * var456[9, 0] + 18.0
============================================
Constraints
============================================
[LeqConstraint(Constant(CONSTANT, POSITIVE, (1, 1)), Expression(CONVEX, POSITIVE, (1, 1)))]
=====================================
Installed Solvers:
=====================================
['CVXOPT', 'ECOS_BB', 'SCS', 'ECOS', 'LS']
Is Problem DCCP: True
=====================================
CVXPY args:
=====================================

ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  6e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +8.412e-09  +1e-01  7e-04  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +1.862e-10  +1e-03  8e-06  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +3.078e-12  +1e-05  9e-08  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +3.988e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +5.048e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.1e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000346 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  1e-01  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +1.950e-09  +1e-01  1e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +4.315e-11  +1e-03  2e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +7.158e-13  +1e-05  2e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +9.998e-15  +2e-07  2e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +1.359e-16  +2e-09  2e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=2.2e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000336 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  7e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +5.823e-09  +1e-01  8e-04  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +1.289e-10  +1e-03  9e-06  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +2.133e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +2.833e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +3.665e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.3e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000374 seconds.

----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.66e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  2.26e-04 
    40| 1.81e-05  1.61e-05  4.26e-05 -4.26e-05 -0.00e+00  0.00e+00  6.99e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 7.06e-04s
	Lin-sys: avg # CG iterations: 1.85, avg solve time: 6.12e-06s
	Cones: avg projection time: 1.22e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 4.2080e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -6.4752e-18
|Ax + s - b|_2 / (1 + |b|_2) = 1.8143e-05
|A'y + c|_2 / (1 + |c|_2) = 1.6110e-05
|c'x + b'y| / (1 + |c'x| + |b'y|) = 4.2563e-05
----------------------------------------------------------------------------
c'x = -0.0000, -b'y = -0.0000
============================================================================
----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.68e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.68e-04 
    40| 2.14e-06  2.64e-06  5.48e-06 -5.48e-06 -0.00e+00  0.00e+00  6.61e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 6.68e-04s
	Lin-sys: avg # CG iterations: 1.73, avg solve time: 6.53e-06s
	Cones: avg projection time: 1.23e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 4.2082e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -1.0934e-17
|Ax + s - b|_2 / (1 + |b|_2) = 2.1441e-06
|A'y + c|_2 / (1 + |c|_2) = 2.6438e-06
|c'x + b'y| / (1 + |c'x| + |b'y|) = 5.4806e-06
----------------------------------------------------------------------------
c'x = -0.0000, -b'y = -0.0000
============================================================================
=====================================
Problem value:
=====================================
None
=====================================
Result:
=====================================
(3.1032837454022536e-06, -1.3511304107252787e-07, [matrix([[ -6.20656749e-07],
        [ -6.20656749e-07],
        [ -6.20656749e-07],
        [ -6.20656749e-07],
        [ -6.20656749e-07],
        [ -6.20656749e-07],
        [ -6.20656749e-07],
        [ -6.20656749e-07],
        [ -6.20656749e-07],
        [ -6.20656749e-07]])])
weights: var556
tuple: [4 3 3 4 4 2 6 2 6 1]
============================================
Objective Function
============================================
minimize 0.5 * abs(0.0 + abs(var556[0, 0]) + abs(var556[1, 0]) + abs(var556[2, 0]) + abs(var556[3, 0]) + abs(var556[4, 0]) + abs(var556[5, 0]) + abs(var556[6, 0]) + abs(var556[7, 0]) + abs(var556[8, 0]) + abs(var556[9, 0]))
constraint: 0.0 + 4 * var556[0, 0] + 3 * var556[1, 0] + 3 * var556[2, 0] + 4 * var556[3, 0] + 4 * var556[4, 0] + 2 * var556[5, 0] + 6 * var556[6, 0] + 2 * var556[7, 0] + 6 * var556[8, 0] + 1 * var556[9, 0] + 18.0
============================================
Constraints
============================================
[LeqConstraint(Constant(CONSTANT, POSITIVE, (1, 1)), Expression(CONVEX, POSITIVE, (1, 1)))]
=====================================
Installed Solvers:
=====================================
['CVXOPT', 'ECOS_BB', 'SCS', 'ECOS', 'LS']
Is Problem DCCP: True
=====================================
CVXPY args:
=====================================

ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  1e-01  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +2.390e-09  +1e-01  1e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +5.291e-11  +1e-03  1e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +8.774e-13  +1e-05  2e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +1.217e-14  +2e-07  2e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +1.643e-16  +2e-09  2e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=2.0e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000350 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  1e-01  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +2.638e-09  +1e-01  1e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +5.838e-11  +1e-03  1e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +9.681e-13  +1e-05  2e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +1.338e-14  +2e-07  2e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +1.799e-16  +2e-09  2e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.9e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000335 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  7e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +5.841e-09  +1e-01  8e-04  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +1.293e-10  +1e-03  9e-06  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +2.140e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +2.840e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +3.673e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.3e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000335 seconds.

----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.64e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.76e-04 
    20| 4.08e-05  2.26e-04  1.30e-04  1.30e-04 -0.00e+00  0.00e+00  4.41e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.48e-04s
	Lin-sys: avg # CG iterations: 2.38, avg solve time: 7.43e-06s
	Cones: avg projection time: 1.25e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 1.1591e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -1.6125e-19
|Ax + s - b|_2 / (1 + |b|_2) = 4.0811e-05
|A'y + c|_2 / (1 + |c|_2) = 2.2604e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 1.3008e-04
----------------------------------------------------------------------------
c'x = 0.0001, -b'y = -0.0000
============================================================================
----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.67e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.75e-04 
    20| 6.15e-05  2.60e-04  2.37e-04  2.37e-04 -0.00e+00  0.00e+00  4.33e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.40e-04s
	Lin-sys: avg # CG iterations: 2.29, avg solve time: 7.15e-06s
	Cones: avg projection time: 1.25e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 2.3183e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -1.0503e-17
|Ax + s - b|_2 / (1 + |b|_2) = 6.1512e-05
|A'y + c|_2 / (1 + |c|_2) = 2.6028e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 2.3720e-04
----------------------------------------------------------------------------
c'x = 0.0002, -b'y = -0.0000
============================================================================
=====================================
Problem value:
=====================================
None
=====================================
Result:
=====================================
(0.0005954242526018582, 4.7951974013684427e-05, [matrix([[  1.54674052e-04],
        [  1.31956271e-04],
        [  1.31956271e-04],
        [  1.54674052e-04],
        [  1.54674052e-04],
        [  9.23799133e-05],
        [  1.15591726e-04],
        [  9.23799133e-05],
        [  1.15591726e-04],
        [  4.69705294e-05]])])
weights: var656
tuple: [-4 -3 -3 -4 -4 -2 -6 -2 -6 -1]
============================================
Objective Function
============================================
minimize 0.5 * abs(0.0 + abs(var656[0, 0]) + abs(var656[1, 0]) + abs(var656[2, 0]) + abs(var656[3, 0]) + abs(var656[4, 0]) + abs(var656[5, 0]) + abs(var656[6, 0]) + abs(var656[7, 0]) + abs(var656[8, 0]) + abs(var656[9, 0]))
constraint: 0.0 + -4 * var656[0, 0] + -3 * var656[1, 0] + -3 * var656[2, 0] + -4 * var656[3, 0] + -4 * var656[4, 0] + -2 * var656[5, 0] + -6 * var656[6, 0] + -2 * var656[7, 0] + -6 * var656[8, 0] + -1 * var656[9, 0] + 18.0
============================================
Constraints
============================================
[LeqConstraint(Constant(CONSTANT, POSITIVE, (1, 1)), Expression(CONVEX, POSITIVE, (1, 1)))]
=====================================
Installed Solvers:
=====================================
['CVXOPT', 'ECOS_BB', 'SCS', 'ECOS', 'LS']
Is Problem DCCP: True
=====================================
CVXPY args:
=====================================

ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  1e-01  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +1.844e-09  +1e-01  2e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +4.082e-11  +1e-03  2e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +6.771e-13  +1e-05  2e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +9.475e-15  +2e-07  2e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +1.291e-16  +2e-09  2e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=2.3e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000342 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  8e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +4.213e-09  +1e-01  1e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +9.325e-11  +1e-03  1e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +1.545e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +2.090e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +2.750e-16  +2e-09  2e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.5e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000342 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  9e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +3.940e-09  +1e-01  1e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +8.721e-11  +1e-03  1e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +1.445e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +1.962e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +2.590e-16  +2e-09  2e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.6e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000336 seconds.

----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.67e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf       inf       inf  1.76e-04 
   100| 1.60e-04  5.35e-05  8.07e-04  9.44e-02  9.35e-02  8.22e-17  1.56e-03 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 1.57e-03s
	Lin-sys: avg # CG iterations: 3.50, avg solve time: 8.37e-06s
	Cones: avg projection time: 1.20e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 7.6419e-17, dist(y, K*) = 0.0000e+00, s'y/|s||y| = 1.0761e-18
|Ax + s - b|_2 / (1 + |b|_2) = 1.6022e-04
|A'y + c|_2 / (1 + |c|_2) = 5.3523e-05
|c'x + b'y| / (1 + |c'x| + |b'y|) = 8.0697e-04
----------------------------------------------------------------------------
c'x = 0.0944, -b'y = 0.0935
============================================================================
----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.81e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.81e-04 
    20| 6.15e-05  2.60e-04  2.37e-04  2.37e-04 -0.00e+00  0.00e+00  5.23e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 5.31e-04s
	Lin-sys: avg # CG iterations: 2.29, avg solve time: 7.29e-06s
	Cones: avg projection time: 1.33e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 2.3183e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -1.0503e-17
|Ax + s - b|_2 / (1 + |b|_2) = 6.1512e-05
|A'y + c|_2 / (1 + |c|_2) = 2.6028e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 2.3720e-04
----------------------------------------------------------------------------
c'x = 0.0002, -b'y = -0.0000
============================================================================
----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.75e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.81e-04 
    20| 1.39e-04  1.49e-04  3.72e-04  3.72e-04 -0.00e+00  8.58e-17  4.43e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.50e-04s
	Lin-sys: avg # CG iterations: 2.38, avg solve time: 7.23e-06s
	Cones: avg projection time: 1.23e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 2.3183e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -6.0476e-18
|Ax + s - b|_2 / (1 + |b|_2) = 1.3869e-04
|A'y + c|_2 / (1 + |c|_2) = 1.4927e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 3.7220e-04
----------------------------------------------------------------------------
c'x = 0.0004, -b'y = -0.0000
============================================================================
=====================================
Problem value:
=====================================
None
=====================================
Result:
=====================================
(0.00039096823323773886, 2.8815848999939776e-05, [matrix([[ -1.07342407e-04],
        [ -8.59189315e-05],
        [ -8.59189315e-05],
        [ -1.07342407e-04],
        [ -1.07342407e-04],
        [ -5.72014066e-05],
        [ -7.28069367e-05],
        [ -5.72014066e-05],
        [ -7.28069367e-05],
        [ -2.80546969e-05]])])
weights: var784
tuple: [5 3 5 6 7 3 6 3 6 7]
============================================
Objective Function
============================================
minimize 0.5 * abs(0.0 + abs(var784[0, 0]) + abs(var784[1, 0]) + abs(var784[2, 0]) + abs(var784[3, 0]) + abs(var784[4, 0]) + abs(var784[5, 0]) + abs(var784[6, 0]) + abs(var784[7, 0]) + abs(var784[8, 0]) + abs(var784[9, 0]))
constraint: 0.0 + 5 * var784[0, 0] + 3 * var784[1, 0] + 5 * var784[2, 0] + 6 * var784[3, 0] + 7 * var784[4, 0] + 3 * var784[5, 0] + 6 * var784[6, 0] + 3 * var784[7, 0] + 6 * var784[8, 0] + 7 * var784[9, 0] + 18.0
============================================
Constraints
============================================
[LeqConstraint(Constant(CONSTANT, POSITIVE, (1, 1)), Expression(CONVEX, POSITIVE, (1, 1)))]
=====================================
Installed Solvers:
=====================================
['CVXOPT', 'ECOS_BB', 'SCS', 'ECOS', 'LS']
Is Problem DCCP: True
=====================================
CVXPY args:
=====================================

ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  6e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +9.033e-09  +1e-01  7e-04  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +1.999e-10  +1e-03  8e-06  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +3.303e-12  +1e-05  8e-08  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +4.259e-14  +2e-07  9e-10  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +5.370e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.0e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000392 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  6e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +9.034e-09  +1e-01  7e-04  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +1.999e-10  +1e-03  8e-06  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +3.304e-12  +1e-05  8e-08  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +4.260e-14  +2e-07  9e-10  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +5.370e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.0e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000327 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  1e-01  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +1.934e-09  +1e-01  1e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +4.281e-11  +1e-03  2e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +7.101e-13  +1e-05  2e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +9.919e-15  +2e-07  2e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +1.349e-16  +2e-09  2e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=2.2e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000334 seconds.

----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.91e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.77e-04 
    20| 1.49e-04  2.71e-04  4.58e-05  4.58e-05 -0.00e+00  6.17e-17  4.37e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.44e-04s
	Lin-sys: avg # CG iterations: 2.29, avg solve time: 7.12e-06s
	Cones: avg projection time: 1.22e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 8.8894e-18, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -4.7207e-22
|Ax + s - b|_2 / (1 + |b|_2) = 1.4875e-04
|A'y + c|_2 / (1 + |c|_2) = 2.7120e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 4.5754e-05
----------------------------------------------------------------------------
c'x = 0.0000, -b'y = -0.0000
============================================================================
----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 2.27e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.76e-04 
    20| 1.31e-04  2.28e-04  1.76e-04  1.76e-04 -0.00e+00  6.17e-17  4.38e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.45e-04s
	Lin-sys: avg # CG iterations: 2.38, avg solve time: 7.27e-06s
	Cones: avg projection time: 1.23e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 1.7780e-17, dist(y, K*) = 0.0000e+00, s'y/|s||y| = 5.4038e-18
|Ax + s - b|_2 / (1 + |b|_2) = 1.3146e-04
|A'y + c|_2 / (1 + |c|_2) = 2.2802e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 1.7595e-04
----------------------------------------------------------------------------
c'x = 0.0002, -b'y = -0.0000
============================================================================
=====================================
Problem value:
=====================================
None
=====================================
Result:
=====================================
(0.0006454332558081153, 2.5332176815230013e-05, [matrix([[  1.28061175e-04],
        [  7.55381000e-05],
        [  1.28061175e-04],
        [  1.53284600e-04],
        [  1.74138031e-04],
        [  7.55381000e-05],
        [  1.53284600e-04],
        [  7.55381000e-05],
        [  1.53284600e-04],
        [  1.74138031e-04]])])
weights: var884
tuple: [ 4  5  6 23  3  4  4  5 56  2]
============================================
Objective Function
============================================
minimize 0.5 * abs(0.0 + abs(var884[0, 0]) + abs(var884[1, 0]) + abs(var884[2, 0]) + abs(var884[3, 0]) + abs(var884[4, 0]) + abs(var884[5, 0]) + abs(var884[6, 0]) + abs(var884[7, 0]) + abs(var884[8, 0]) + abs(var884[9, 0]))
constraint: 0.0 + 4 * var884[0, 0] + 5 * var884[1, 0] + 6 * var884[2, 0] + 23 * var884[3, 0] + 3 * var884[4, 0] + 4 * var884[5, 0] + 4 * var884[6, 0] + 5 * var884[7, 0] + 56 * var884[8, 0] + 2 * var884[9, 0] + 18.0
============================================
Constraints
============================================
[LeqConstraint(Constant(CONSTANT, POSITIVE, (1, 1)), Expression(CONVEX, POSITIVE, (1, 1)))]
=====================================
Installed Solvers:
=====================================
['CVXOPT', 'ECOS_BB', 'SCS', 'ECOS', 'LS']
Is Problem DCCP: True
=====================================
CVXPY args:
=====================================

ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  9e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +3.566e-09  +1e-01  1e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +7.891e-11  +1e-03  1e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +1.308e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +1.784e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +2.366e-16  +2e-09  2e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.6e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000349 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  6e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +9.123e-09  +1e-01  7e-04  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +2.019e-10  +1e-03  7e-06  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +3.336e-12  +1e-05  8e-08  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +4.299e-14  +2e-07  9e-10  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +5.415e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.0e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000390 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  6e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +8.376e-09  +1e-01  7e-04  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +1.854e-10  +1e-03  8e-06  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +3.065e-12  +1e-05  9e-08  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +3.973e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +5.032e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.1e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000341 seconds.

----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.75e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.78e-04 
    20| 3.45e-04  2.09e-04  1.04e-04 -1.04e-04 -0.00e+00  0.00e+00  4.55e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.61e-04s
	Lin-sys: avg # CG iterations: 2.86, avg solve time: 7.91e-06s
	Cones: avg projection time: 1.23e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 3.5942e-18, dist(y, K*) = 0.0000e+00, s'y/|s||y| = 1.6402e-18
|Ax + s - b|_2 / (1 + |b|_2) = 3.4546e-04
|A'y + c|_2 / (1 + |c|_2) = 2.0891e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 1.0375e-04
----------------------------------------------------------------------------
c'x = -0.0001, -b'y = -0.0000
============================================================================
----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.67e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.75e-04 
    20| 3.45e-04  2.09e-04  1.04e-04 -1.04e-04 -0.00e+00  0.00e+00  4.60e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.66e-04s
	Lin-sys: avg # CG iterations: 2.86, avg solve time: 7.88e-06s
	Cones: avg projection time: 1.20e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 8.9910e-17, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -3.0581e-18
|Ax + s - b|_2 / (1 + |b|_2) = 3.4544e-04
|A'y + c|_2 / (1 + |c|_2) = 2.0881e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 1.0376e-04
----------------------------------------------------------------------------
c'x = -0.0001, -b'y = -0.0000
============================================================================
=====================================
Problem value:
=====================================
None
=====================================
Result:
=====================================
(0.00012762749815356647, -1.6884996178506883e-06, [matrix([[ -4.85621178e-06],
        [ -6.12737892e-06],
        [ -7.43655537e-06],
        [ -4.05698221e-05],
        [ -3.61550025e-06],
        [ -4.85621178e-06],
        [ -4.85621178e-06],
        [ -6.12737892e-06],
        [ -1.74412085e-04],
        [ -2.39764032e-06]])])
weights: var984
tuple: [3 3 6 3 3 4 4 5 6 2]
============================================
Objective Function
============================================
minimize 0.5 * abs(0.0 + abs(var984[0, 0]) + abs(var984[1, 0]) + abs(var984[2, 0]) + abs(var984[3, 0]) + abs(var984[4, 0]) + abs(var984[5, 0]) + abs(var984[6, 0]) + abs(var984[7, 0]) + abs(var984[8, 0]) + abs(var984[9, 0]))
constraint: 0.0 + 3 * var984[0, 0] + 3 * var984[1, 0] + 6 * var984[2, 0] + 3 * var984[3, 0] + 3 * var984[4, 0] + 4 * var984[5, 0] + 4 * var984[6, 0] + 5 * var984[7, 0] + 6 * var984[8, 0] + 2 * var984[9, 0] + 18.0
============================================
Constraints
============================================
[LeqConstraint(Constant(CONSTANT, POSITIVE, (1, 1)), Expression(CONVEX, POSITIVE, (1, 1)))]
=====================================
Installed Solvers:
=====================================
['CVXOPT', 'ECOS_BB', 'SCS', 'ECOS', 'LS']
Is Problem DCCP: True
=====================================
CVXPY args:
=====================================

ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  7e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +6.672e-09  +1e-01  8e-04  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +1.477e-10  +1e-03  9e-06  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +2.443e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +3.216e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +4.128e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.2e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000355 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  8e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +4.762e-09  +1e-01  9e-04  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +1.054e-10  +1e-03  1e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +1.746e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +2.346e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +3.069e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.4e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000339 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  8e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +4.577e-09  +1e-01  1e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +1.013e-10  +1e-03  1e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +1.678e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +2.260e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +2.961e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.4e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000418 seconds.

----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.64e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.77e-04 
    20| 2.23e-04  3.04e-04  1.88e-04  1.88e-04 -0.00e+00  7.98e-17  4.41e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.47e-04s
	Lin-sys: avg # CG iterations: 2.38, avg solve time: 7.34e-06s
	Cones: avg projection time: 1.23e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 2.1580e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -5.8675e-18
|Ax + s - b|_2 / (1 + |b|_2) = 2.2311e-04
|A'y + c|_2 / (1 + |c|_2) = 3.0356e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 1.8811e-04
----------------------------------------------------------------------------
c'x = 0.0002, -b'y = -0.0000
============================================================================
----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.68e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.76e-04 
    20| 1.14e-04  3.17e-04  1.02e-04  1.02e-04 -0.00e+00  0.00e+00  4.34e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.41e-04s
	Lin-sys: avg # CG iterations: 2.33, avg solve time: 7.14e-06s
	Cones: avg projection time: 1.23e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 1.0791e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -4.0550e-19
|Ax + s - b|_2 / (1 + |b|_2) = 1.1407e-04
|A'y + c|_2 / (1 + |c|_2) = 3.1744e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 1.0194e-04
----------------------------------------------------------------------------
c'x = 0.0001, -b'y = -0.0000
============================================================================
=====================================
Problem value:
=====================================
None
=====================================
Result:
=====================================
(0.00047916933548516324, 1.7979505514785463e-05, [matrix([[  6.65955343e-05],
        [  6.65955343e-05],
        [  1.62761415e-04],
        [  6.65955343e-05],
        [  6.65955343e-05],
        [  9.60156728e-05],
        [  9.60156728e-05],
        [  1.31328781e-04],
        [  1.62761415e-04],
        [  4.30735781e-05]])])
weights: var1084
tuple: [ 1 44 23  3  3  5  6  7  8  9]
============================================
Objective Function
============================================
minimize 0.5 * abs(0.0 + abs(var1084[0, 0]) + abs(var1084[1, 0]) + abs(var1084[2, 0]) + abs(var1084[3, 0]) + abs(var1084[4, 0]) + abs(var1084[5, 0]) + abs(var1084[6, 0]) + abs(var1084[7, 0]) + abs(var1084[8, 0]) + abs(var1084[9, 0]))
constraint: 0.0 + 1 * var1084[0, 0] + 44 * var1084[1, 0] + 23 * var1084[2, 0] + 3 * var1084[3, 0] + 3 * var1084[4, 0] + 5 * var1084[5, 0] + 6 * var1084[6, 0] + 7 * var1084[7, 0] + 8 * var1084[8, 0] + 9 * var1084[9, 0] + 18.0
============================================
Constraints
============================================
[LeqConstraint(Constant(CONSTANT, POSITIVE, (1, 1)), Expression(CONVEX, POSITIVE, (1, 1)))]
=====================================
Installed Solvers:
=====================================
['CVXOPT', 'ECOS_BB', 'SCS', 'ECOS', 'LS']
Is Problem DCCP: True
=====================================
CVXPY args:
=====================================

ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  8e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +4.492e-09  +1e-01  1e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +9.941e-11  +1e-03  1e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +1.647e-12  +1e-05  1e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +2.220e-14  +2e-07  1e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +2.912e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.5e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000342 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  6e-02  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +9.200e-09  +1e-01  7e-04  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +2.036e-10  +1e-03  7e-06  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +3.365e-12  +1e-05  8e-08  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +4.332e-14  +2e-07  9e-10  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +5.457e-16  +2e-09  1e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=1.0e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000341 seconds.


ECOS 2.0.4 - (C) embotech GmbH, Zurich Switzerland, 2012-15. Web: www.embotech.com/ECOS

It     pcost       dcost      gap   pres   dres    k/t    mu     step   sigma     IR    |   BT
 0  +0.000e+00  -0.000e+00  +1e+01  1e-01  2e-04  1e+00  6e+00    ---    ---    1  1  - |  -  - 
 1  -4.953e-04  +1.405e-09  +1e-01  2e-03  2e-06  1e-02  7e-02  0.9890  1e-04   2  1  1 |  0  0
 2  -1.092e-05  +3.109e-11  +1e-03  2e-05  3e-08  1e-04  7e-04  0.9890  1e-04   2  1  1 |  0  0
 3  -1.808e-07  +5.159e-13  +1e-05  2e-07  3e-10  2e-06  8e-06  0.9890  1e-04   4  1  1 |  0  0
 4  -2.661e-09  +7.270e-15  +2e-07  2e-09  3e-12  2e-08  9e-08  0.9890  1e-04   1  0  0 |  0  0
 5  -3.671e-11  +9.994e-17  +2e-09  3e-11  4e-14  2e-10  1e-09  0.9890  1e-04   1  0  0 |  0  0

OPTIMAL (within feastol=2.6e-11, reltol=4.9e+01, abstol=1.8e-09).
Runtime: 0.000334 seconds.

----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.69e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf       inf       inf  2.32e-04 
   100| 4.91e-04  4.31e-03  1.00e-04  2.15e-01  2.15e-01  9.57e-18  1.74e-03 
   200| 9.98e-04  4.57e-03  2.47e-04  2.14e-01  2.14e-01  3.22e-17  3.35e-03 
   300| 1.75e-03  5.18e-03  4.36e-04  2.12e-01  2.13e-01  1.33e-17  5.01e-03 
   400| 3.08e-03  6.77e-03  7.76e-04  2.10e-01  2.11e-01  1.92e-17  6.68e-03 
   500| 7.14e-03  1.29e-02  1.82e-03  2.02e-01  2.04e-01  4.01e-17  8.47e-03 
   600| 3.32e-03  5.52e-06  6.75e-04  9.44e-02  9.52e-02  4.18e-17  1.02e-02 
   620| 5.06e-04  1.96e-05  1.95e-04  9.53e-02  9.56e-02  4.21e-17  1.06e-02 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 1.06e-02s
	Lin-sys: avg # CG iterations: 5.08, avg solve time: 1.10e-05s
	Cones: avg projection time: 1.19e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 2.2449e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -3.4987e-19
|Ax + s - b|_2 / (1 + |b|_2) = 5.0600e-04
|A'y + c|_2 / (1 + |c|_2) = 1.9646e-05
|c'x + b'y| / (1 + |c'x| + |b'y|) = 1.9522e-04
----------------------------------------------------------------------------
c'x = 0.0953, -b'y = 0.0956
============================================================================
----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.68e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  1.75e-04 
    20| 1.70e-04  2.44e-04  6.04e-05 -6.04e-05 -0.00e+00  3.94e-17  4.73e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.79e-04s
	Lin-sys: avg # CG iterations: 2.95, avg solve time: 8.46e-06s
	Cones: avg projection time: 1.25e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 5.3240e-17, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -2.5052e-18
|Ax + s - b|_2 / (1 + |b|_2) = 1.6986e-04
|A'y + c|_2 / (1 + |c|_2) = 2.4369e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 6.0377e-05
----------------------------------------------------------------------------
c'x = -0.0001, -b'y = -0.0000
============================================================================
----------------------------------------------------------------------------
	SCS v1.2.6 - Splitting Conic Solver
	(c) Brendan O'Donoghue, Stanford University, 2012-2016
----------------------------------------------------------------------------
Lin-sys: sparse-indirect, nnz in A = 74, CG tol ~ 1/iter^(2.00)
eps = 1.00e-03, alpha = 1.50, max_iters = 2500, normalize = 1, scale = 1.00
Variables n = 22, constraints m = 24
Cones:	linear vars: 24
Setup time: 1.73e-04s
----------------------------------------------------------------------------
 Iter | pri res | dua res | rel gap | pri obj | dua obj | kap/tau | time (s)
----------------------------------------------------------------------------
     0|      inf       inf      -nan      -inf      -nan       inf  2.12e-04 
    20| 1.70e-04  2.44e-04  6.04e-05 -6.04e-05 -0.00e+00  0.00e+00  4.92e-04 
----------------------------------------------------------------------------
Status: Solved
Timing: Solve time: 4.99e-04s
	Lin-sys: avg # CG iterations: 2.95, avg solve time: 8.33e-06s
	Cones: avg projection time: 1.16e-06s
----------------------------------------------------------------------------
Error metrics:
dist(s, K) = 1.0648e-16, dist(y, K*) = 0.0000e+00, s'y/|s||y| = -3.5789e-18
|Ax + s - b|_2 / (1 + |b|_2) = 1.6991e-04
|A'y + c|_2 / (1 + |c|_2) = 2.4375e-04
|c'x + b'y| / (1 + |c'x| + |b'y|) = 6.0362e-05
----------------------------------------------------------------------------
c'x = -0.0001, -b'y = -0.0000
============================================================================
=====================================
Problem value:
=====================================
None
=====================================
Result:
=====================================
(0.0003662921854613924, -8.5225666867391506e-06, [matrix([[ -8.12405024e-06],
        [ -2.42344783e-04],
        [ -1.55163961e-04],
        [ -2.42935596e-05],
        [ -2.42935596e-05],
        [ -4.02316616e-05],
        [ -4.80692711e-05],
        [ -5.57973531e-05],
        [ -6.34007771e-05],
        [ -7.08653950e-05]])])
=================================================
classify() - Support Vectors:
=================================================
supportvectors: [[3.1032837454022536e-06, [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]], [0.00012762749815356647, [[4, 5, 6, 23, 3, 4, 4, 5, 56, 2]]], [0.00039096823323773886, [[-4, -3, -3, -4, -4, -2, -6, -2, -6, -1]]], [0.00047916933548516324, [[3, 3, 6, 3, 3, 4, 4, 5, 6, 2]]], [0.0005954242526018582, [[4, 3, 3, 4, 4, 2, 6, 2, 6, 1]]], [0.0006454332558081153, [[5, 3, 5, 6, 7, 3, 6, 3, 6, 7]]]]
distance =  3.1032837454e-06  : vector =  [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
distance =  0.000127627498154  : vector =  [[4, 5, 6, 23, 3, 4, 4, 5, 56, 2]]
distance =  0.000390968233238  : vector =  [[-4, -3, -3, -4, -4, -2, -6, -2, -6, -1]]
distance =  0.000479169335485  : vector =  [[3, 3, 6, 3, 3, 4, 4, 5, 6, 2]]
distance =  0.000595424252602  : vector =  [[4, 3, 3, 4, 4, 2, 6, 2, 6, 1]]
distance =  0.000645433255808  : vector =  [[5, 3, 5, 6, 7, 3, 6, 3, 6, 7]]
=================================================
classify(): distance of  [1, 44, 23, 3, 3, 5, 6, 7, 8, 9]  from decision hyperplane =  0.000366292185461
======================================================
Mercer Kernel: Feature Map and Dot Product of two lifted points
======================================================
Eigenvalues: [ 9.73040584+0.j         -1.40440913+0.39507555j -1.40440913-0.39507555j
 -0.48614600+1.08932889j -0.48614600-1.08932889j  1.38381862+0.j
  1.10763947+0.47208412j  1.10763947-0.47208412j -0.77402360+0.j
 -0.12061360+0.92278651j -0.12061360-0.92278651j  0.69698312+0.56779244j
  0.69698312-0.56779244j -0.18046480+0.52763727j -0.18046480-0.52763727j
 -0.04161947+0.58002126j -0.04161947-0.58002126j  0.66267889+0.j
 -0.01492726+0.j          0.33138070+0.j        ]
Eigenvectors: [[-0.18126400+0.j          0.06828776-0.00968026j  0.06828776+0.00968026j
  -0.24976425+0.0786552j  -0.24976425-0.0786552j   0.24758956+0.j
   0.26929262+0.21898804j  0.26929262-0.21898804j -0.14240621+0.j
  -0.17976668-0.24315157j -0.17976668+0.24315157j -0.11559573+0.07203804j
  -0.11559573-0.07203804j -0.01041719+0.02228496j -0.01041719-0.02228496j
   0.05027283+0.14552749j  0.05027283-0.14552749j -0.33928732+0.j
  -0.12889801+0.j          0.28448915+0.j        ]
 [-0.22588491+0.j          0.16032078+0.11816201j  0.16032078-0.11816201j
  -0.02124491+0.21965531j -0.02124491-0.21965531j -0.34992617+0.j
  -0.11718365-0.3193516j  -0.11718365+0.3193516j   0.06342657+0.j
  -0.18286049-0.0063122j  -0.18286049+0.0063122j   0.38114156+0.j
   0.38114156-0.j          0.09739036-0.30689263j  0.09739036+0.30689263j
   0.15935629-0.11547217j  0.15935629+0.11547217j  0.21968854+0.j
  -0.18715563+0.j          0.04690596+0.j        ]
 [-0.19840869+0.j          0.50400313+0.j          0.50400313-0.j
   0.03615205-0.30126945j  0.03615205+0.30126945j -0.03709748+0.j
   0.08738905+0.04402586j  0.08738905-0.04402586j  0.41322827+0.j
   0.39241419+0.j          0.39241419-0.j          0.14552734-0.03314865j
   0.14552734+0.03314865j -0.14103926-0.04949449j -0.14103926+0.04949449j
  -0.23646918-0.13186977j -0.23646918+0.13186977j  0.33477750+0.j
   0.11970196+0.j         -0.39746282+0.j        ]
 [-0.26488861+0.j          0.04816340-0.05588432j  0.04816340+0.05588432j
  -0.04348553-0.09852332j -0.04348553+0.09852332j  0.11704488+0.j
   0.05502157+0.10501095j  0.05502157-0.10501095j -0.34506121+0.j
  -0.05350130-0.2680129j  -0.05350130+0.2680129j  -0.33743510+0.01761575j
  -0.33743510-0.01761575j -0.19659142+0.23835117j -0.19659142-0.23835117j
  -0.26512852+0.1857087j  -0.26512852-0.1857087j  -0.12558783+0.j
   0.54274687+0.j         -0.39757385+0.j        ]
 [-0.28443200+0.j          0.15894799-0.07675819j  0.15894799+0.07675819j
  -0.06954926-0.1171022j  -0.06954926+0.1171022j   0.00416198+0.j
   0.05106260-0.20512662j  0.05106260+0.20512662j  0.17341056+0.j
   0.02222704+0.21867171j  0.02222704-0.21867171j  0.18853640+0.22681207j
   0.18853640-0.22681207j  0.17318717-0.05132974j  0.17318717+0.05132974j
   0.27604368-0.04543476j  0.27604368+0.04543476j  0.04473700+0.j
  -0.30466718+0.j          0.06555320+0.j        ]
 [-0.21345313+0.j         -0.18945330-0.08147454j -0.18945330+0.08147454j
  -0.04895949+0.25481166j -0.04895949-0.25481166j  0.47202561+0.j
   0.41333793+0.j          0.41333793-0.j          0.01748267+0.j
  -0.06731944+0.15269694j -0.06731944-0.15269694j  0.16633598+0.21445956j
   0.16633598-0.21445956j  0.27590184-0.11966714j  0.27590184+0.11966714j
   0.27300668-0.04534735j  0.27300668+0.04534735j  0.31249108+0.j
  -0.35169706+0.j          0.00077696+0.j        ]
 [-0.17545131+0.j          0.15869957-0.0047996j   0.15869957+0.0047996j
  -0.07522938-0.06467364j -0.07522938+0.06467364j  0.04491513+0.j
   0.03548679+0.18561828j  0.03548679-0.18561828j -0.06257068+0.j
  -0.13701795-0.23660273j -0.13701795+0.23660273j -0.07581543+0.15638294j
  -0.07581543-0.15638294j -0.09399565+0.05055898j -0.09399565-0.05055898j
  -0.05173580+0.11476801j -0.05173580-0.11476801j  0.20923247+0.j
   0.20444129+0.j         -0.09452459+0.j        ]
 [-0.21882180+0.j         -0.22266960+0.02286392j -0.22266960-0.02286392j
  -0.23813214-0.16988607j -0.23813214+0.16988607j  0.18804570+0.j
   0.17448496+0.06839001j  0.17448496-0.06839001j -0.35399391+0.j
  -0.21930012-0.17132248j -0.21930012+0.17132248j -0.09563829+0.13495108j
  -0.09563829-0.13495108j  0.14088231+0.1603566j   0.14088231-0.1603566j
   0.09915551+0.2012748j   0.09915551-0.2012748j  -0.23165114+0.j
   0.32206170+0.j          0.16542170+0.j        ]
 [-0.19996162+0.j          0.10767112+0.13068093j  0.10767112-0.13068093j
   0.47523482+0.j          0.47523482-0.j         -0.26647937+0.j
  -0.09571098+0.16535329j -0.09571098-0.16535329j  0.02744737+0.j
   0.03082230+0.08789354j  0.03082230-0.08789354j -0.20967300-0.1447755j
  -0.20967300+0.1447755j  -0.29974502-0.20310593j -0.29974502+0.20310593j
  -0.16652098-0.18456636j -0.16652098+0.18456636j -0.17139206+0.j
  -0.00895654+0.j          0.07051744+0.j        ]
 [-0.24589430+0.j          0.17690353+0.25103475j  0.17690353-0.25103475j
   0.17358287-0.15636476j  0.17358287+0.15636476j  0.08747349+0.j
  -0.04706658-0.08226243j -0.04706658+0.08226243j  0.30807516+0.j
  -0.16455342+0.18870744j -0.16455342-0.18870744j -0.01041486+0.02133056j
  -0.01041486-0.02133056j -0.10966344+0.00698763j -0.10966344-0.00698763j
  -0.02367275-0.09007125j -0.02367275+0.09007125j  0.14545109+0.j
  -0.12776386+0.j         -0.24219439+0.j        ]
 [-0.23459106+0.j         -0.33472154-0.06577776j -0.33472154+0.06577776j
  -0.10191736+0.29665973j -0.10191736-0.29665973j -0.13122748+0.j
   0.07740466-0.18466972j  0.07740466+0.18466972j -0.12903024+0.j
  -0.03555818+0.25239717j -0.03555818-0.25239717j  0.31593381+0.11418316j
   0.31593381-0.11418316j  0.19892611-0.01821926j  0.19892611+0.01821926j
   0.23122131-0.07420972j  0.23122131+0.07420972j  0.26280041+0.j
   0.01545549+0.j         -0.10334821+0.j        ]
 [-0.21474527+0.j         -0.07800085-0.1790245j  -0.07800085+0.1790245j
   0.02339477+0.04695299j  0.02339477-0.04695299j  0.04887399+0.j
  -0.18499475+0.0444715j  -0.18499475-0.0444715j   0.15679325+0.j
  -0.08499357-0.08594653j -0.08499357+0.08594653j -0.17023259-0.237324j
  -0.17023259+0.237324j    0.00872266+0.01326403j  0.00872266-0.01326403j
   0.05142973+0.04537231j  0.05142973-0.04537231j -0.44860878+0.j
  -0.01134192+0.j          0.30660538+0.j        ]
 [-0.26044533+0.j          0.04068562-0.09575287j  0.04068562+0.09575287j
  -0.04603376-0.07705131j -0.04603376+0.07705131j  0.16844553+0.j
   0.14563681-0.0946321j   0.14563681+0.0946321j   0.17587694+0.j
   0.01748679-0.17009723j  0.01748679+0.17009723j -0.12186077+0.14782699j
  -0.12186077-0.14782699j  0.12263456+0.19462202j  0.12263456-0.19462202j
  -0.04720199+0.18237544j -0.04720199-0.18237544j -0.35790547+0.j
  -0.14917734+0.j          0.32155935+0.j        ]
 [-0.18514305+0.j         -0.25208255-0.24675704j -0.25208255+0.24675704j
  -0.17446620-0.00922961j -0.17446620+0.00922961j -0.28897554+0.j
  -0.17653585+0.05084955j -0.17653585-0.05084955j -0.48735821+0.j
  -0.05990864+0.01939301j -0.05990864-0.01939301j -0.07229473-0.23901727j
  -0.07229473+0.23901727j -0.11867149+0.3030851j  -0.11867149-0.3030851j
  -0.13345079+0.12403275j -0.13345079-0.12403275j  0.06057621+0.j
   0.31732358+0.j         -0.10678139+0.j        ]
 [-0.20342812+0.j          0.02456219+0.00956924j  0.02456219-0.00956924j
   0.01788470-0.10325316j  0.01788470+0.10325316j -0.48489497+0.j
  -0.25523285+0.12745016j -0.25523285-0.12745016j  0.31738081+0.j
   0.22628953-0.02697165j  0.22628953+0.02697165j -0.21633474-0.07679372j
  -0.21633474+0.07679372j -0.15972106+0.00939459j -0.15972106-0.00939459j
  -0.27397633-0.00174365j -0.27397633+0.00174365j  0.02364041+0.j
   0.00386082+0.j         -0.02178878+0.j        ]
 [-0.22364885+0.j          0.02096344+0.02069331j  0.02096344-0.02069331j
   0.13663156-0.11057889j  0.13663156+0.11057889j  0.00265606+0.j
  -0.10049008+0.19638878j -0.10049008-0.19638878j -0.10254418+0.j
   0.02917872+0.05566322j  0.02917872-0.05566322j -0.03035778+0.01554177j
  -0.03035778-0.01554177j -0.04875221+0.15670269j -0.04875221-0.15670269j
  -0.08290233+0.10945641j -0.08290233-0.10945641j -0.14989538+0.j
   0.15072014+0.j         -0.15309402+0.j        ]
 [-0.25879887+0.j         -0.23011948+0.00254196j -0.23011948-0.00254196j
   0.19551559+0.11363099j  0.19551559-0.11363099j  0.05645763+0.j
  -0.17271779+0.03376236j -0.17271779-0.03376236j  0.00745158+0.j
   0.11371746+0.18804881j  0.11371746-0.18804881j -0.03499975-0.15779809j
  -0.03499975+0.15779809j -0.09144884-0.13188587j -0.09144884+0.13188587j
  -0.14934723-0.29392871j -0.14934723+0.29392871j  0.12032279+0.j
  -0.00190637+0.j         -0.31274036+0.j        ]
 [-0.22836910+0.j         -0.03847211+0.09390537j -0.03847211-0.09390537j
  -0.13023495+0.21688569j -0.13023495-0.21688569j -0.00182916+0.j
  -0.08309063+0.11720607j -0.08309063-0.11720607j -0.06062120+0.j
   0.04456543+0.20141752j  0.04456543-0.20141752j -0.07904722-0.02099425j
  -0.07904722+0.02099425j  0.40024457+0.j          0.40024457-0.j
   0.35052893+0.j          0.35052893-0.j         -0.14370925+0.j
  -0.22898602+0.j          0.25210946+0.j        ]
 [-0.24807122+0.j         -0.20979639+0.15950128j -0.20979639-0.15950128j
   0.13193443-0.0422388j   0.13193443+0.0422388j  -0.04640799+0.j
   0.03483236-0.11824783j  0.03483236+0.11824783j -0.04882696+0.j
   0.09122648-0.20363982j  0.09122648+0.20363982j  0.11151348-0.09675502j
   0.11151348+0.09675502j -0.04980299-0.09234735j -0.04980299+0.09234735j
   0.04212459-0.00572603j  0.04212459+0.00572603j -0.00911488+0.j
  -0.20945638+0.j          0.20502629+0.j        ]
 [-0.16025024+0.j          0.00863467+0.00473862j  0.00863467-0.00473862j
   0.01298462-0.03531125j  0.01298462+0.03531125j  0.30057223+0.j
  -0.11024965-0.24309854j -0.11024965+0.24309854j -0.05967682+0.j
   0.18644535+0.05108088j  0.18644535-0.05108088j  0.07190921-0.071939j
   0.07190921+0.071939j   -0.05984659-0.05135683j -0.05984659+0.05135683j
  -0.08455088-0.03412705j -0.08455088+0.03412705j -0.02878858+0.j
   0.13660645+0.j          0.22314073+0.j        ]]
square root of eigenvalue: 3.11935984447
eigenfunction(): eigenvector =  [-0.18126400+0.j          0.06828776-0.00968026j  0.06828776+0.00968026j
 -0.24976425+0.0786552j  -0.24976425-0.0786552j   0.24758956+0.j
  0.26929262+0.21898804j  0.26929262-0.21898804j -0.14240621+0.j
 -0.17976668-0.24315157j -0.17976668+0.24315157j -0.11559573+0.07203804j
 -0.11559573-0.07203804j -0.01041719+0.02228496j -0.01041719-0.02228496j
  0.05027283+0.14552749j  0.05027283-0.14552749j -0.33928732+0.j
 -0.12889801+0.j          0.28448915+0.j        ]
eigenfunction(): eigenvector[x] =  -0.181264001204
eigenfunction(): eigenvector[x] =  0.0682877560245
eigenfunction(): eigenvector[x] =  0.0682877560245
eigenfunction(): eigenvector[x] =  -0.249764246961
eigenfunction(): eigenvector[x] =  -0.249764246961
eigenfunction(): eigenvector[x] =  0.247589556648
eigenfunction(): eigenvector[x] =  0.269292621839
eigenfunction(): eigenvector[x] =  0.269292621839
eigenfunction(): eigenvector[x] =  -0.142406209693
eigenfunction(): eigenvector[x] =  -0.179766682264
eigenfunction(): ef =  -0.698127296766
eigenfunction(): eigenvector =  [-0.18126400+0.j          0.06828776-0.00968026j  0.06828776+0.00968026j
 -0.24976425+0.0786552j  -0.24976425-0.0786552j   0.24758956+0.j
  0.26929262+0.21898804j  0.26929262-0.21898804j -0.14240621+0.j
 -0.17976668-0.24315157j -0.17976668+0.24315157j -0.11559573+0.07203804j
 -0.11559573-0.07203804j -0.01041719+0.02228496j -0.01041719-0.02228496j
  0.05027283+0.14552749j  0.05027283-0.14552749j -0.33928732+0.j
 -0.12889801+0.j          0.28448915+0.j        ]
eigenfunction(): eigenvector[x] =  -0.181264001204
eigenfunction(): eigenvector[x] =  0.0682877560245
eigenfunction(): eigenvector[x] =  0.0682877560245
eigenfunction(): eigenvector[x] =  -0.249764246961
eigenfunction(): eigenvector[x] =  -0.249764246961
eigenfunction(): eigenvector[x] =  0.247589556648
eigenfunction(): eigenvector[x] =  0.269292621839
eigenfunction(): eigenvector[x] =  0.269292621839
eigenfunction(): eigenvector[x] =  -0.142406209693
eigenfunction(): eigenvector[x] =  -0.179766682264
eigenfunction(): ef =  0.698127296766
eigenfunction(): eigenvector =  [-0.18126400+0.j          0.06828776-0.00968026j  0.06828776+0.00968026j
 -0.24976425+0.0786552j  -0.24976425-0.0786552j   0.24758956+0.j
  0.26929262+0.21898804j  0.26929262-0.21898804j -0.14240621+0.j
 -0.17976668-0.24315157j -0.17976668+0.24315157j -0.11559573+0.07203804j
 -0.11559573-0.07203804j -0.01041719+0.02228496j -0.01041719-0.02228496j
  0.05027283+0.14552749j  0.05027283-0.14552749j -0.33928732+0.j
 -0.12889801+0.j          0.28448915+0.j        ]
eigenfunction(): eigenvector[x] =  -0.181264001204
eigenfunction(): eigenvector[x] =  0.0682877560245
eigenfunction(): eigenvector[x] =  0.0682877560245
eigenfunction(): eigenvector[x] =  -0.249764246961
eigenfunction(): eigenvector[x] =  -0.249764246961
eigenfunction(): eigenvector[x] =  0.247589556648
eigenfunction(): eigenvector[x] =  0.269292621839
eigenfunction(): eigenvector[x] =  0.269292621839
eigenfunction(): eigenvector[x] =  -0.142406209693
eigenfunction(): eigenvector[x] =  -0.179766682264
eigenfunction(): ef =  -0.698127296766
eigenfunction(): eigenvector =  [-0.18126400+0.j          0.06828776-0.00968026j  0.06828776+0.00968026j
 -0.24976425+0.0786552j  -0.24976425-0.0786552j   0.24758956+0.j
  0.26929262+0.21898804j  0.26929262-0.21898804j -0.14240621+0.j
 -0.17976668-0.24315157j -0.17976668+0.24315157j -0.11559573+0.07203804j
 -0.11559573-0.07203804j -0.01041719+0.02228496j -0.01041719-0.02228496j
  0.05027283+0.14552749j  0.05027283-0.14552749j -0.33928732+0.j
 -0.12889801+0.j          0.28448915+0.j        ]
eigenfunction(): eigenvector[x] =  -0.181264001204
eigenfunction(): eigenvector[x] =  0.0682877560245
eigenfunction(): eigenvector[x] =  0.0682877560245
eigenfunction(): eigenvector[x] =  -0.249764246961
eigenfunction(): eigenvector[x] =  -0.249764246961
eigenfunction(): eigenvector[x] =  0.247589556648
eigenfunction(): eigenvector[x] =  0.269292621839
eigenfunction(): eigenvector[x] =  0.269292621839
eigenfunction(): eigenvector[x] =  -0.142406209693
eigenfunction(): eigenvector[x] =  -0.179766682264
eigenfunction(): ef =  0.698127296766
square root of eigenvalue: 1.18507768804
eigenfunction(): eigenvector =  [-0.22588491+0.j          0.16032078+0.11816201j  0.16032078-0.11816201j
 -0.02124491+0.21965531j -0.02124491-0.21965531j -0.34992617+0.j
 -0.11718365-0.3193516j  -0.11718365+0.3193516j   0.06342657+0.j
 -0.18286049-0.0063122j  -0.18286049+0.0063122j   0.38114156+0.j
  0.38114156-0.j          0.09739036-0.30689263j  0.09739036+0.30689263j
  0.15935629-0.11547217j  0.15935629+0.11547217j  0.21968854+0.j
 -0.18715563+0.j          0.04690596+0.j        ]
eigenfunction(): eigenvector[x] =  -0.225884911603
eigenfunction(): eigenvector[x] =  0.160320782973
eigenfunction(): eigenvector[x] =  0.160320782973
eigenfunction(): eigenvector[x] =  -0.0212449077356
eigenfunction(): eigenvector[x] =  -0.0212449077356
eigenfunction(): eigenvector[x] =  -0.349926173996
eigenfunction(): eigenvector[x] =  -0.117183651679
eigenfunction(): eigenvector[x] =  -0.117183651679
eigenfunction(): eigenvector[x] =  0.0634265695942
eigenfunction(): eigenvector[x] =  -0.182860492173
eigenfunction(): ef =  -1.55119684649
eigenfunction(): eigenvector =  [-0.22588491+0.j          0.16032078+0.11816201j  0.16032078-0.11816201j
 -0.02124491+0.21965531j -0.02124491-0.21965531j -0.34992617+0.j
 -0.11718365-0.3193516j  -0.11718365+0.3193516j   0.06342657+0.j
 -0.18286049-0.0063122j  -0.18286049+0.0063122j   0.38114156+0.j
  0.38114156-0.j          0.09739036-0.30689263j  0.09739036+0.30689263j
  0.15935629-0.11547217j  0.15935629+0.11547217j  0.21968854+0.j
 -0.18715563+0.j          0.04690596+0.j        ]
eigenfunction(): eigenvector[x] =  -0.225884911603
eigenfunction(): eigenvector[x] =  0.160320782973
eigenfunction(): eigenvector[x] =  0.160320782973
eigenfunction(): eigenvector[x] =  -0.0212449077356
eigenfunction(): eigenvector[x] =  -0.0212449077356
eigenfunction(): eigenvector[x] =  -0.349926173996
eigenfunction(): eigenvector[x] =  -0.117183651679
eigenfunction(): eigenvector[x] =  -0.117183651679
eigenfunction(): eigenvector[x] =  0.0634265695942
eigenfunction(): eigenvector[x] =  -0.182860492173
eigenfunction(): ef =  1.55119684649
eigenfunction(): eigenvector =  [-0.22588491+0.j          0.16032078+0.11816201j  0.16032078-0.11816201j
 -0.02124491+0.21965531j -0.02124491-0.21965531j -0.34992617+0.j
 -0.11718365-0.3193516j  -0.11718365+0.3193516j   0.06342657+0.j
 -0.18286049-0.0063122j  -0.18286049+0.0063122j   0.38114156+0.j
  0.38114156-0.j          0.09739036-0.30689263j  0.09739036+0.30689263j
  0.15935629-0.11547217j  0.15935629+0.11547217j  0.21968854+0.j
 -0.18715563+0.j          0.04690596+0.j        ]
eigenfunction(): eigenvector[x] =  -0.225884911603
eigenfunction(): eigenvector[x] =  0.160320782973
eigenfunction(): eigenvector[x] =  0.160320782973
eigenfunction(): eigenvector[x] =  -0.0212449077356
eigenfunction(): eigenvector[x] =  -0.0212449077356
eigenfunction(): eigenvector[x] =  -0.349926173996
eigenfunction(): eigenvector[x] =  -0.117183651679
eigenfunction(): eigenvector[x] =  -0.117183651679
eigenfunction(): eigenvector[x] =  0.0634265695942
eigenfunction(): eigenvector[x] =  -0.182860492173
eigenfunction(): ef =  -1.55119684649
eigenfunction(): eigenvector =  [-0.22588491+0.j          0.16032078+0.11816201j  0.16032078-0.11816201j
 -0.02124491+0.21965531j -0.02124491-0.21965531j -0.34992617+0.j
 -0.11718365-0.3193516j  -0.11718365+0.3193516j   0.06342657+0.j
 -0.18286049-0.0063122j  -0.18286049+0.0063122j   0.38114156+0.j
  0.38114156-0.j          0.09739036-0.30689263j  0.09739036+0.30689263j
  0.15935629-0.11547217j  0.15935629+0.11547217j  0.21968854+0.j
 -0.18715563+0.j          0.04690596+0.j        ]
eigenfunction(): eigenvector[x] =  -0.225884911603
eigenfunction(): eigenvector[x] =  0.160320782973
eigenfunction(): eigenvector[x] =  0.160320782973
eigenfunction(): eigenvector[x] =  -0.0212449077356
eigenfunction(): eigenvector[x] =  -0.0212449077356
eigenfunction(): eigenvector[x] =  -0.349926173996
eigenfunction(): eigenvector[x] =  -0.117183651679
eigenfunction(): eigenvector[x] =  -0.117183651679
eigenfunction(): eigenvector[x] =  0.0634265695942
eigenfunction(): eigenvector[x] =  -0.182860492173
eigenfunction(): ef =  1.55119684649
square root of eigenvalue: 1.18507768804
eigenfunction(): eigenvector =  [-0.19840869+0.j          0.50400313+0.j          0.50400313-0.j
  0.03615205-0.30126945j  0.03615205+0.30126945j -0.03709748+0.j
  0.08738905+0.04402586j  0.08738905-0.04402586j  0.41322827+0.j
  0.39241419+0.j          0.39241419-0.j          0.14552734-0.03314865j
  0.14552734+0.03314865j -0.14103926-0.04949449j -0.14103926+0.04949449j
 -0.23646918-0.13186977j -0.23646918+0.13186977j  0.33477750+0.j
  0.11970196+0.j         -0.39746282+0.j        ]
eigenfunction(): eigenvector[x] =  -0.198408692705
eigenfunction(): eigenvector[x] =  0.504003133311
eigenfunction(): eigenvector[x] =  0.504003133311
eigenfunction(): eigenvector[x] =  0.0361520502163
eigenfunction(): eigenvector[x] =  0.0361520502163
eigenfunction(): eigenvector[x] =  -0.0370974816854
eigenfunction(): eigenvector[x] =  0.0873890489771
eigenfunction(): eigenvector[x] =  0.0873890489771
eigenfunction(): eigenvector[x] =  0.413228270441
eigenfunction(): eigenvector[x] =  0.392414190653
eigenfunction(): ef =  6.01630167252
eigenfunction(): eigenvector =  [-0.19840869+0.j          0.50400313+0.j          0.50400313-0.j
  0.03615205-0.30126945j  0.03615205+0.30126945j -0.03709748+0.j
  0.08738905+0.04402586j  0.08738905-0.04402586j  0.41322827+0.j
  0.39241419+0.j          0.39241419-0.j          0.14552734-0.03314865j
  0.14552734+0.03314865j -0.14103926-0.04949449j -0.14103926+0.04949449j
 -0.23646918-0.13186977j -0.23646918+0.13186977j  0.33477750+0.j
  0.11970196+0.j         -0.39746282+0.j        ]
eigenfunction(): eigenvector[x] =  -0.198408692705
eigenfunction(): eigenvector[x] =  0.504003133311
eigenfunction(): eigenvector[x] =  0.504003133311
eigenfunction(): eigenvector[x] =  0.0361520502163
eigenfunction(): eigenvector[x] =  0.0361520502163
eigenfunction(): eigenvector[x] =  -0.0370974816854
eigenfunction(): eigenvector[x] =  0.0873890489771
eigenfunction(): eigenvector[x] =  0.0873890489771
eigenfunction(): eigenvector[x] =  0.413228270441
eigenfunction(): eigenvector[x] =  0.392414190653
eigenfunction(): ef =  -6.01630167252
eigenfunction(): eigenvector =  [-0.19840869+0.j          0.50400313+0.j          0.50400313-0.j
  0.03615205-0.30126945j  0.03615205+0.30126945j -0.03709748+0.j
  0.08738905+0.04402586j  0.08738905-0.04402586j  0.41322827+0.j
  0.39241419+0.j          0.39241419-0.j          0.14552734-0.03314865j
  0.14552734+0.03314865j -0.14103926-0.04949449j -0.14103926+0.04949449j
 -0.23646918-0.13186977j -0.23646918+0.13186977j  0.33477750+0.j
  0.11970196+0.j         -0.39746282+0.j        ]
eigenfunction(): eigenvector[x] =  -0.198408692705
eigenfunction(): eigenvector[x] =  0.504003133311
eigenfunction(): eigenvector[x] =  0.504003133311
eigenfunction(): eigenvector[x] =  0.0361520502163
eigenfunction(): eigenvector[x] =  0.0361520502163
eigenfunction(): eigenvector[x] =  -0.0370974816854
eigenfunction(): eigenvector[x] =  0.0873890489771
eigenfunction(): eigenvector[x] =  0.0873890489771
eigenfunction(): eigenvector[x] =  0.413228270441
eigenfunction(): eigenvector[x] =  0.392414190653
eigenfunction(): ef =  6.01630167252
eigenfunction(): eigenvector =  [-0.19840869+0.j          0.50400313+0.j          0.50400313-0.j
  0.03615205-0.30126945j  0.03615205+0.30126945j -0.03709748+0.j
  0.08738905+0.04402586j  0.08738905-0.04402586j  0.41322827+0.j
  0.39241419+0.j          0.39241419-0.j          0.14552734-0.03314865j
  0.14552734+0.03314865j -0.14103926-0.04949449j -0.14103926+0.04949449j
 -0.23646918-0.13186977j -0.23646918+0.13186977j  0.33477750+0.j
  0.11970196+0.j         -0.39746282+0.j        ]
eigenfunction(): eigenvector[x] =  -0.198408692705
eigenfunction(): eigenvector[x] =  0.504003133311
eigenfunction(): eigenvector[x] =  0.504003133311
eigenfunction(): eigenvector[x] =  0.0361520502163
eigenfunction(): eigenvector[x] =  0.0361520502163
eigenfunction(): eigenvector[x] =  -0.0370974816854
eigenfunction(): eigenvector[x] =  0.0873890489771
eigenfunction(): eigenvector[x] =  0.0873890489771
eigenfunction(): eigenvector[x] =  0.413228270441
eigenfunction(): eigenvector[x] =  0.392414190653
eigenfunction(): ef =  -6.01630167252
square root of eigenvalue: 0.697241711425
eigenfunction(): eigenvector =  [-0.26488861+0.j          0.04816340-0.05588432j  0.04816340+0.05588432j
 -0.04348553-0.09852332j -0.04348553+0.09852332j  0.11704488+0.j
  0.05502157+0.10501095j  0.05502157-0.10501095j -0.34506121+0.j
 -0.05350130-0.2680129j  -0.05350130+0.2680129j  -0.33743510+0.01761575j
 -0.33743510-0.01761575j -0.19659142+0.23835117j -0.19659142-0.23835117j
 -0.26512852+0.1857087j  -0.26512852-0.1857087j  -0.12558783+0.j
  0.54274687+0.j         -0.39757385+0.j        ]
eigenfunction(): eigenvector[x] =  -0.264888605561
eigenfunction(): eigenvector[x] =  0.0481633957009
eigenfunction(): eigenvector[x] =  0.0481633957009
eigenfunction(): eigenvector[x] =  -0.0434855309182
eigenfunction(): eigenvector[x] =  -0.0434855309182
eigenfunction(): eigenvector[x] =  0.117044876397
eigenfunction(): eigenvector[x] =  0.0550215710172
eigenfunction(): eigenvector[x] =  0.0550215710172
eigenfunction(): eigenvector[x] =  -0.345061206682
eigenfunction(): eigenvector[x] =  -0.0535012965039
eigenfunction(): ef =  -2.56806451105
eigenfunction(): eigenvector =  [-0.26488861+0.j          0.04816340-0.05588432j  0.04816340+0.05588432j
 -0.04348553-0.09852332j -0.04348553+0.09852332j  0.11704488+0.j
  0.05502157+0.10501095j  0.05502157-0.10501095j -0.34506121+0.j
 -0.05350130-0.2680129j  -0.05350130+0.2680129j  -0.33743510+0.01761575j
 -0.33743510-0.01761575j -0.19659142+0.23835117j -0.19659142-0.23835117j
 -0.26512852+0.1857087j  -0.26512852-0.1857087j  -0.12558783+0.j
  0.54274687+0.j         -0.39757385+0.j        ]
eigenfunction(): eigenvector[x] =  -0.264888605561
eigenfunction(): eigenvector[x] =  0.0481633957009
eigenfunction(): eigenvector[x] =  0.0481633957009
eigenfunction(): eigenvector[x] =  -0.0434855309182
eigenfunction(): eigenvector[x] =  -0.0434855309182
eigenfunction(): eigenvector[x] =  0.117044876397
eigenfunction(): eigenvector[x] =  0.0550215710172
eigenfunction(): eigenvector[x] =  0.0550215710172
eigenfunction(): eigenvector[x] =  -0.345061206682
eigenfunction(): eigenvector[x] =  -0.0535012965039
eigenfunction(): ef =  2.56806451105
eigenfunction(): eigenvector =  [-0.26488861+0.j          0.04816340-0.05588432j  0.04816340+0.05588432j
 -0.04348553-0.09852332j -0.04348553+0.09852332j  0.11704488+0.j
  0.05502157+0.10501095j  0.05502157-0.10501095j -0.34506121+0.j
 -0.05350130-0.2680129j  -0.05350130+0.2680129j  -0.33743510+0.01761575j
 -0.33743510-0.01761575j -0.19659142+0.23835117j -0.19659142-0.23835117j
 -0.26512852+0.1857087j  -0.26512852-0.1857087j  -0.12558783+0.j
  0.54274687+0.j         -0.39757385+0.j        ]
eigenfunction(): eigenvector[x] =  -0.264888605561
eigenfunction(): eigenvector[x] =  0.0481633957009
eigenfunction(): eigenvector[x] =  0.0481633957009
eigenfunction(): eigenvector[x] =  -0.0434855309182
eigenfunction(): eigenvector[x] =  -0.0434855309182
eigenfunction(): eigenvector[x] =  0.117044876397
eigenfunction(): eigenvector[x] =  0.0550215710172
eigenfunction(): eigenvector[x] =  0.0550215710172
eigenfunction(): eigenvector[x] =  -0.345061206682
eigenfunction(): eigenvector[x] =  -0.0535012965039
eigenfunction(): ef =  -2.56806451105
eigenfunction(): eigenvector =  [-0.26488861+0.j          0.04816340-0.05588432j  0.04816340+0.05588432j
 -0.04348553-0.09852332j -0.04348553+0.09852332j  0.11704488+0.j
  0.05502157+0.10501095j  0.05502157-0.10501095j -0.34506121+0.j
 -0.05350130-0.2680129j  -0.05350130+0.2680129j  -0.33743510+0.01761575j
 -0.33743510-0.01761575j -0.19659142+0.23835117j -0.19659142-0.23835117j
 -0.26512852+0.1857087j  -0.26512852-0.1857087j  -0.12558783+0.j
  0.54274687+0.j         -0.39757385+0.j        ]
eigenfunction(): eigenvector[x] =  -0.264888605561
eigenfunction(): eigenvector[x] =  0.0481633957009
eigenfunction(): eigenvector[x] =  0.0481633957009
eigenfunction(): eigenvector[x] =  -0.0434855309182
eigenfunction(): eigenvector[x] =  -0.0434855309182
eigenfunction(): eigenvector[x] =  0.117044876397
eigenfunction(): eigenvector[x] =  0.0550215710172
eigenfunction(): eigenvector[x] =  0.0550215710172
eigenfunction(): eigenvector[x] =  -0.345061206682
eigenfunction(): eigenvector[x] =  -0.0535012965039
eigenfunction(): ef =  2.56806451105
square root of eigenvalue: 0.697241711425
eigenfunction(): eigenvector =  [-0.28443200+0.j          0.15894799-0.07675819j  0.15894799+0.07675819j
 -0.06954926-0.1171022j  -0.06954926+0.1171022j   0.00416198+0.j
  0.05106260-0.20512662j  0.05106260+0.20512662j  0.17341056+0.j
  0.02222704+0.21867171j  0.02222704-0.21867171j  0.18853640+0.22681207j
  0.18853640-0.22681207j  0.17318717-0.05132974j  0.17318717+0.05132974j
  0.27604368-0.04543476j  0.27604368+0.04543476j  0.04473700+0.j
 -0.30466718+0.j          0.06555320+0.j        ]
eigenfunction(): eigenvector[x] =  -0.284432000704
eigenfunction(): eigenvector[x] =  0.158947989764
eigenfunction(): eigenvector[x] =  0.158947989764
eigenfunction(): eigenvector[x] =  -0.0695492603236
eigenfunction(): eigenvector[x] =  -0.0695492603236
eigenfunction(): eigenvector[x] =  0.00416198159772
eigenfunction(): eigenvector[x] =  0.0510625950466
eigenfunction(): eigenvector[x] =  0.0510625950466
eigenfunction(): eigenvector[x] =  0.173410558396
eigenfunction(): eigenvector[x] =  0.0222270417184
eigenfunction(): ef =  0.739080968844
eigenfunction(): eigenvector =  [-0.28443200+0.j          0.15894799-0.07675819j  0.15894799+0.07675819j
 -0.06954926-0.1171022j  -0.06954926+0.1171022j   0.00416198+0.j
  0.05106260-0.20512662j  0.05106260+0.20512662j  0.17341056+0.j
  0.02222704+0.21867171j  0.02222704-0.21867171j  0.18853640+0.22681207j
  0.18853640-0.22681207j  0.17318717-0.05132974j  0.17318717+0.05132974j
  0.27604368-0.04543476j  0.27604368+0.04543476j  0.04473700+0.j
 -0.30466718+0.j          0.06555320+0.j        ]
eigenfunction(): eigenvector[x] =  -0.284432000704
eigenfunction(): eigenvector[x] =  0.158947989764
eigenfunction(): eigenvector[x] =  0.158947989764
eigenfunction(): eigenvector[x] =  -0.0695492603236
eigenfunction(): eigenvector[x] =  -0.0695492603236
eigenfunction(): eigenvector[x] =  0.00416198159772
eigenfunction(): eigenvector[x] =  0.0510625950466
eigenfunction(): eigenvector[x] =  0.0510625950466
eigenfunction(): eigenvector[x] =  0.173410558396
eigenfunction(): eigenvector[x] =  0.0222270417184
eigenfunction(): ef =  -0.739080968844
eigenfunction(): eigenvector =  [-0.28443200+0.j          0.15894799-0.07675819j  0.15894799+0.07675819j
 -0.06954926-0.1171022j  -0.06954926+0.1171022j   0.00416198+0.j
  0.05106260-0.20512662j  0.05106260+0.20512662j  0.17341056+0.j
  0.02222704+0.21867171j  0.02222704-0.21867171j  0.18853640+0.22681207j
  0.18853640-0.22681207j  0.17318717-0.05132974j  0.17318717+0.05132974j
  0.27604368-0.04543476j  0.27604368+0.04543476j  0.04473700+0.j
 -0.30466718+0.j          0.06555320+0.j        ]
eigenfunction(): eigenvector[x] =  -0.284432000704
eigenfunction(): eigenvector[x] =  0.158947989764
eigenfunction(): eigenvector[x] =  0.158947989764
eigenfunction(): eigenvector[x] =  -0.0695492603236
eigenfunction(): eigenvector[x] =  -0.0695492603236
eigenfunction(): eigenvector[x] =  0.00416198159772
eigenfunction(): eigenvector[x] =  0.0510625950466
eigenfunction(): eigenvector[x] =  0.0510625950466
eigenfunction(): eigenvector[x] =  0.173410558396
eigenfunction(): eigenvector[x] =  0.0222270417184
eigenfunction(): ef =  0.739080968844
eigenfunction(): eigenvector =  [-0.28443200+0.j          0.15894799-0.07675819j  0.15894799+0.07675819j
 -0.06954926-0.1171022j  -0.06954926+0.1171022j   0.00416198+0.j
  0.05106260-0.20512662j  0.05106260+0.20512662j  0.17341056+0.j
  0.02222704+0.21867171j  0.02222704-0.21867171j  0.18853640+0.22681207j
  0.18853640-0.22681207j  0.17318717-0.05132974j  0.17318717+0.05132974j
  0.27604368-0.04543476j  0.27604368+0.04543476j  0.04473700+0.j
 -0.30466718+0.j          0.06555320+0.j        ]
eigenfunction(): eigenvector[x] =  -0.284432000704
eigenfunction(): eigenvector[x] =  0.158947989764
eigenfunction(): eigenvector[x] =  0.158947989764
eigenfunction(): eigenvector[x] =  -0.0695492603236
eigenfunction(): eigenvector[x] =  -0.0695492603236
eigenfunction(): eigenvector[x] =  0.00416198159772
eigenfunction(): eigenvector[x] =  0.0510625950466
eigenfunction(): eigenvector[x] =  0.0510625950466
eigenfunction(): eigenvector[x] =  0.173410558396
eigenfunction(): eigenvector[x] =  0.0222270417184
eigenfunction(): ef =  -0.739080968844
square root of eigenvalue: 1.17635820247
eigenfunction(): eigenvector =  [-0.21345313+0.j         -0.18945330-0.08147454j -0.18945330+0.08147454j
 -0.04895949+0.25481166j -0.04895949-0.25481166j  0.47202561+0.j
  0.41333793+0.j          0.41333793-0.j          0.01748267+0.j
 -0.06731944+0.15269694j -0.06731944-0.15269694j  0.16633598+0.21445956j
  0.16633598-0.21445956j  0.27590184-0.11966714j  0.27590184+0.11966714j
  0.27300668-0.04534735j  0.27300668+0.04534735j  0.31249108+0.j
 -0.35169706+0.j          0.00077696+0.j        ]
eigenfunction(): eigenvector[x] =  -0.213453132428
eigenfunction(): eigenvector[x] =  -0.189453297029
eigenfunction(): eigenvector[x] =  -0.189453297029
eigenfunction(): eigenvector[x] =  -0.0489594936128
eigenfunction(): eigenvector[x] =  -0.0489594936128
eigenfunction(): eigenvector[x] =  0.472025611607
eigenfunction(): eigenvector[x] =  0.413337927745
eigenfunction(): eigenvector[x] =  0.413337927745
eigenfunction(): eigenvector[x] =  0.017482666042
eigenfunction(): eigenvector[x] =  -0.067319437704
eigenfunction(): ef =  1.90612294294
eigenfunction(): eigenvector =  [-0.21345313+0.j         -0.18945330-0.08147454j -0.18945330+0.08147454j
 -0.04895949+0.25481166j -0.04895949-0.25481166j  0.47202561+0.j
  0.41333793+0.j          0.41333793-0.j          0.01748267+0.j
 -0.06731944+0.15269694j -0.06731944-0.15269694j  0.16633598+0.21445956j
  0.16633598-0.21445956j  0.27590184-0.11966714j  0.27590184+0.11966714j
  0.27300668-0.04534735j  0.27300668+0.04534735j  0.31249108+0.j
 -0.35169706+0.j          0.00077696+0.j        ]
eigenfunction(): eigenvector[x] =  -0.213453132428
eigenfunction(): eigenvector[x] =  -0.189453297029
eigenfunction(): eigenvector[x] =  -0.189453297029
eigenfunction(): eigenvector[x] =  -0.0489594936128
eigenfunction(): eigenvector[x] =  -0.0489594936128
eigenfunction(): eigenvector[x] =  0.472025611607
eigenfunction(): eigenvector[x] =  0.413337927745
eigenfunction(): eigenvector[x] =  0.413337927745
eigenfunction(): eigenvector[x] =  0.017482666042
eigenfunction(): eigenvector[x] =  -0.067319437704
eigenfunction(): ef =  -1.90612294294
eigenfunction(): eigenvector =  [-0.21345313+0.j         -0.18945330-0.08147454j -0.18945330+0.08147454j
 -0.04895949+0.25481166j -0.04895949-0.25481166j  0.47202561+0.j
  0.41333793+0.j          0.41333793-0.j          0.01748267+0.j
 -0.06731944+0.15269694j -0.06731944-0.15269694j  0.16633598+0.21445956j
  0.16633598-0.21445956j  0.27590184-0.11966714j  0.27590184+0.11966714j
  0.27300668-0.04534735j  0.27300668+0.04534735j  0.31249108+0.j
 -0.35169706+0.j          0.00077696+0.j        ]
eigenfunction(): eigenvector[x] =  -0.213453132428
eigenfunction(): eigenvector[x] =  -0.189453297029
eigenfunction(): eigenvector[x] =  -0.189453297029
eigenfunction(): eigenvector[x] =  -0.0489594936128
eigenfunction(): eigenvector[x] =  -0.0489594936128
eigenfunction(): eigenvector[x] =  0.472025611607
eigenfunction(): eigenvector[x] =  0.413337927745
eigenfunction(): eigenvector[x] =  0.413337927745
eigenfunction(): eigenvector[x] =  0.017482666042
eigenfunction(): eigenvector[x] =  -0.067319437704
eigenfunction(): ef =  1.90612294294
eigenfunction(): eigenvector =  [-0.21345313+0.j         -0.18945330-0.08147454j -0.18945330+0.08147454j
 -0.04895949+0.25481166j -0.04895949-0.25481166j  0.47202561+0.j
  0.41333793+0.j          0.41333793-0.j          0.01748267+0.j
 -0.06731944+0.15269694j -0.06731944-0.15269694j  0.16633598+0.21445956j
  0.16633598-0.21445956j  0.27590184-0.11966714j  0.27590184+0.11966714j
  0.27300668-0.04534735j  0.27300668+0.04534735j  0.31249108+0.j
 -0.35169706+0.j          0.00077696+0.j        ]
eigenfunction(): eigenvector[x] =  -0.213453132428
eigenfunction(): eigenvector[x] =  -0.189453297029
eigenfunction(): eigenvector[x] =  -0.189453297029
eigenfunction(): eigenvector[x] =  -0.0489594936128
eigenfunction(): eigenvector[x] =  -0.0489594936128
eigenfunction(): eigenvector[x] =  0.472025611607
eigenfunction(): eigenvector[x] =  0.413337927745
eigenfunction(): eigenvector[x] =  0.413337927745
eigenfunction(): eigenvector[x] =  0.017482666042
eigenfunction(): eigenvector[x] =  -0.067319437704
eigenfunction(): ef =  -1.90612294294
square root of eigenvalue: 1.05244452241
eigenfunction(): eigenvector =  [-0.17545131+0.j          0.15869957-0.0047996j   0.15869957+0.0047996j
 -0.07522938-0.06467364j -0.07522938+0.06467364j  0.04491513+0.j
  0.03548679+0.18561828j  0.03548679-0.18561828j -0.06257068+0.j
 -0.13701795-0.23660273j -0.13701795+0.23660273j -0.07581543+0.15638294j
 -0.07581543-0.15638294j -0.09399565+0.05055898j -0.09399565-0.05055898j
 -0.05173580+0.11476801j -0.05173580-0.11476801j  0.20923247+0.j
  0.20444129+0.j         -0.09452459+0.j        ]
eigenfunction(): eigenvector[x] =  -0.175451309541
eigenfunction(): eigenvector[x] =  0.158699574417
eigenfunction(): eigenvector[x] =  0.158699574417
eigenfunction(): eigenvector[x] =  -0.0752293826915
eigenfunction(): eigenvector[x] =  -0.0752293826915
eigenfunction(): eigenvector[x] =  0.0449151296599
eigenfunction(): eigenvector[x] =  0.0354867896275
eigenfunction(): eigenvector[x] =  0.0354867896275
eigenfunction(): eigenvector[x] =  -0.0625706763206
eigenfunction(): eigenvector[x] =  -0.137017947504
eigenfunction(): ef =  -0.490160282282
eigenfunction(): eigenvector =  [-0.17545131+0.j          0.15869957-0.0047996j   0.15869957+0.0047996j
 -0.07522938-0.06467364j -0.07522938+0.06467364j  0.04491513+0.j
  0.03548679+0.18561828j  0.03548679-0.18561828j -0.06257068+0.j
 -0.13701795-0.23660273j -0.13701795+0.23660273j -0.07581543+0.15638294j
 -0.07581543-0.15638294j -0.09399565+0.05055898j -0.09399565-0.05055898j
 -0.05173580+0.11476801j -0.05173580-0.11476801j  0.20923247+0.j
  0.20444129+0.j         -0.09452459+0.j        ]
eigenfunction(): eigenvector[x] =  -0.175451309541
eigenfunction(): eigenvector[x] =  0.158699574417
eigenfunction(): eigenvector[x] =  0.158699574417
eigenfunction(): eigenvector[x] =  -0.0752293826915
eigenfunction(): eigenvector[x] =  -0.0752293826915
eigenfunction(): eigenvector[x] =  0.0449151296599
eigenfunction(): eigenvector[x] =  0.0354867896275
eigenfunction(): eigenvector[x] =  0.0354867896275
eigenfunction(): eigenvector[x] =  -0.0625706763206
eigenfunction(): eigenvector[x] =  -0.137017947504
eigenfunction(): ef =  0.490160282282
eigenfunction(): eigenvector =  [-0.17545131+0.j          0.15869957-0.0047996j   0.15869957+0.0047996j
 -0.07522938-0.06467364j -0.07522938+0.06467364j  0.04491513+0.j
  0.03548679+0.18561828j  0.03548679-0.18561828j -0.06257068+0.j
 -0.13701795-0.23660273j -0.13701795+0.23660273j -0.07581543+0.15638294j
 -0.07581543-0.15638294j -0.09399565+0.05055898j -0.09399565-0.05055898j
 -0.05173580+0.11476801j -0.05173580-0.11476801j  0.20923247+0.j
  0.20444129+0.j         -0.09452459+0.j        ]
eigenfunction(): eigenvector[x] =  -0.175451309541
eigenfunction(): eigenvector[x] =  0.158699574417
eigenfunction(): eigenvector[x] =  0.158699574417
eigenfunction(): eigenvector[x] =  -0.0752293826915
eigenfunction(): eigenvector[x] =  -0.0752293826915
eigenfunction(): eigenvector[x] =  0.0449151296599
eigenfunction(): eigenvector[x] =  0.0354867896275
eigenfunction(): eigenvector[x] =  0.0354867896275
eigenfunction(): eigenvector[x] =  -0.0625706763206
eigenfunction(): eigenvector[x] =  -0.137017947504
eigenfunction(): ef =  -0.490160282282
eigenfunction(): eigenvector =  [-0.17545131+0.j          0.15869957-0.0047996j   0.15869957+0.0047996j
 -0.07522938-0.06467364j -0.07522938+0.06467364j  0.04491513+0.j
  0.03548679+0.18561828j  0.03548679-0.18561828j -0.06257068+0.j
 -0.13701795-0.23660273j -0.13701795+0.23660273j -0.07581543+0.15638294j
 -0.07581543-0.15638294j -0.09399565+0.05055898j -0.09399565-0.05055898j
 -0.05173580+0.11476801j -0.05173580-0.11476801j  0.20923247+0.j
  0.20444129+0.j         -0.09452459+0.j        ]
eigenfunction(): eigenvector[x] =  -0.175451309541
eigenfunction(): eigenvector[x] =  0.158699574417
eigenfunction(): eigenvector[x] =  0.158699574417
eigenfunction(): eigenvector[x] =  -0.0752293826915
eigenfunction(): eigenvector[x] =  -0.0752293826915
eigenfunction(): eigenvector[x] =  0.0449151296599
eigenfunction(): eigenvector[x] =  0.0354867896275
eigenfunction(): eigenvector[x] =  0.0354867896275
eigenfunction(): eigenvector[x] =  -0.0625706763206
eigenfunction(): eigenvector[x] =  -0.137017947504
eigenfunction(): ef =  0.490160282282
square root of eigenvalue: 1.05244452241
eigenfunction(): eigenvector =  [-0.21882180+0.j         -0.22266960+0.02286392j -0.22266960-0.02286392j
 -0.23813214-0.16988607j -0.23813214+0.16988607j  0.18804570+0.j
  0.17448496+0.06839001j  0.17448496-0.06839001j -0.35399391+0.j
 -0.21930012-0.17132248j -0.21930012+0.17132248j -0.09563829+0.13495108j
 -0.09563829-0.13495108j  0.14088231+0.1603566j   0.14088231-0.1603566j
  0.09915551+0.2012748j   0.09915551-0.2012748j  -0.23165114+0.j
  0.32206170+0.j          0.16542170+0.j        ]
eigenfunction(): eigenvector[x] =  -0.218821796101
eigenfunction(): eigenvector[x] =  -0.222669596182
eigenfunction(): eigenvector[x] =  -0.222669596182
eigenfunction(): eigenvector[x] =  -0.238132135321
eigenfunction(): eigenvector[x] =  -0.238132135321
eigenfunction(): eigenvector[x] =  0.188045695793
eigenfunction(): eigenvector[x] =  0.174484956294
eigenfunction(): eigenvector[x] =  0.174484956294
eigenfunction(): eigenvector[x] =  -0.353993913071
eigenfunction(): eigenvector[x] =  -0.219300117184
eigenfunction(): ef =  -4.68765439774
eigenfunction(): eigenvector =  [-0.21882180+0.j         -0.22266960+0.02286392j -0.22266960-0.02286392j
 -0.23813214-0.16988607j -0.23813214+0.16988607j  0.18804570+0.j
  0.17448496+0.06839001j  0.17448496-0.06839001j -0.35399391+0.j
 -0.21930012-0.17132248j -0.21930012+0.17132248j -0.09563829+0.13495108j
 -0.09563829-0.13495108j  0.14088231+0.1603566j   0.14088231-0.1603566j
  0.09915551+0.2012748j   0.09915551-0.2012748j  -0.23165114+0.j
  0.32206170+0.j          0.16542170+0.j        ]
eigenfunction(): eigenvector[x] =  -0.218821796101
eigenfunction(): eigenvector[x] =  -0.222669596182
eigenfunction(): eigenvector[x] =  -0.222669596182
eigenfunction(): eigenvector[x] =  -0.238132135321
eigenfunction(): eigenvector[x] =  -0.238132135321
eigenfunction(): eigenvector[x] =  0.188045695793
eigenfunction(): eigenvector[x] =  0.174484956294
eigenfunction(): eigenvector[x] =  0.174484956294
eigenfunction(): eigenvector[x] =  -0.353993913071
eigenfunction(): eigenvector[x] =  -0.219300117184
eigenfunction(): ef =  4.68765439774
eigenfunction(): eigenvector =  [-0.21882180+0.j         -0.22266960+0.02286392j -0.22266960-0.02286392j
 -0.23813214-0.16988607j -0.23813214+0.16988607j  0.18804570+0.j
  0.17448496+0.06839001j  0.17448496-0.06839001j -0.35399391+0.j
 -0.21930012-0.17132248j -0.21930012+0.17132248j -0.09563829+0.13495108j
 -0.09563829-0.13495108j  0.14088231+0.1603566j   0.14088231-0.1603566j
  0.09915551+0.2012748j   0.09915551-0.2012748j  -0.23165114+0.j
  0.32206170+0.j          0.16542170+0.j        ]
eigenfunction(): eigenvector[x] =  -0.218821796101
eigenfunction(): eigenvector[x] =  -0.222669596182
eigenfunction(): eigenvector[x] =  -0.222669596182
eigenfunction(): eigenvector[x] =  -0.238132135321
eigenfunction(): eigenvector[x] =  -0.238132135321
eigenfunction(): eigenvector[x] =  0.188045695793
eigenfunction(): eigenvector[x] =  0.174484956294
eigenfunction(): eigenvector[x] =  0.174484956294
eigenfunction(): eigenvector[x] =  -0.353993913071
eigenfunction(): eigenvector[x] =  -0.219300117184
eigenfunction(): ef =  -4.68765439774
eigenfunction(): eigenvector =  [-0.21882180+0.j         -0.22266960+0.02286392j -0.22266960-0.02286392j
 -0.23813214-0.16988607j -0.23813214+0.16988607j  0.18804570+0.j
  0.17448496+0.06839001j  0.17448496-0.06839001j -0.35399391+0.j
 -0.21930012-0.17132248j -0.21930012+0.17132248j -0.09563829+0.13495108j
 -0.09563829-0.13495108j  0.14088231+0.1603566j   0.14088231-0.1603566j
  0.09915551+0.2012748j   0.09915551-0.2012748j  -0.23165114+0.j
  0.32206170+0.j          0.16542170+0.j        ]
eigenfunction(): eigenvector[x] =  -0.218821796101
eigenfunction(): eigenvector[x] =  -0.222669596182
eigenfunction(): eigenvector[x] =  -0.222669596182
eigenfunction(): eigenvector[x] =  -0.238132135321
eigenfunction(): eigenvector[x] =  -0.238132135321
eigenfunction(): eigenvector[x] =  0.188045695793
eigenfunction(): eigenvector[x] =  0.174484956294
eigenfunction(): eigenvector[x] =  0.174484956294
eigenfunction(): eigenvector[x] =  -0.353993913071
eigenfunction(): eigenvector[x] =  -0.219300117184
eigenfunction(): ef =  4.68765439774
square root of eigenvalue: 0.879786108239
eigenfunction(): eigenvector =  [-0.19996162+0.j          0.10767112+0.13068093j  0.10767112-0.13068093j
  0.47523482+0.j          0.47523482-0.j         -0.26647937+0.j
 -0.09571098+0.16535329j -0.09571098-0.16535329j  0.02744737+0.j
  0.03082230+0.08789354j  0.03082230-0.08789354j -0.20967300-0.1447755j
 -0.20967300+0.1447755j  -0.29974502-0.20310593j -0.29974502+0.20310593j
 -0.16652098-0.18456636j -0.16652098+0.18456636j -0.17139206+0.j
 -0.00895654+0.j          0.07051744+0.j        ]
eigenfunction(): eigenvector[x] =  -0.199961619837
eigenfunction(): eigenvector[x] =  0.107671118163
eigenfunction(): eigenvector[x] =  0.107671118163
eigenfunction(): eigenvector[x] =  0.475234824785
eigenfunction(): eigenvector[x] =  0.475234824785
eigenfunction(): eigenvector[x] =  -0.266479369711
eigenfunction(): eigenvector[x] =  -0.0957109813756
eigenfunction(): eigenvector[x] =  -0.0957109813756
eigenfunction(): eigenvector[x] =  0.0274473654809
eigenfunction(): eigenvector[x] =  0.0308223005809
eigenfunction(): ef =  2.54491873095
eigenfunction(): eigenvector =  [-0.19996162+0.j          0.10767112+0.13068093j  0.10767112-0.13068093j
  0.47523482+0.j          0.47523482-0.j         -0.26647937+0.j
 -0.09571098+0.16535329j -0.09571098-0.16535329j  0.02744737+0.j
  0.03082230+0.08789354j  0.03082230-0.08789354j -0.20967300-0.1447755j
 -0.20967300+0.1447755j  -0.29974502-0.20310593j -0.29974502+0.20310593j
 -0.16652098-0.18456636j -0.16652098+0.18456636j -0.17139206+0.j
 -0.00895654+0.j          0.07051744+0.j        ]
eigenfunction(): eigenvector[x] =  -0.199961619837
eigenfunction(): eigenvector[x] =  0.107671118163
eigenfunction(): eigenvector[x] =  0.107671118163
eigenfunction(): eigenvector[x] =  0.475234824785
eigenfunction(): eigenvector[x] =  0.475234824785
eigenfunction(): eigenvector[x] =  -0.266479369711
eigenfunction(): eigenvector[x] =  -0.0957109813756
eigenfunction(): eigenvector[x] =  -0.0957109813756
eigenfunction(): eigenvector[x] =  0.0274473654809
eigenfunction(): eigenvector[x] =  0.0308223005809
eigenfunction(): ef =  -2.54491873095
eigenfunction(): eigenvector =  [-0.19996162+0.j          0.10767112+0.13068093j  0.10767112-0.13068093j
  0.47523482+0.j          0.47523482-0.j         -0.26647937+0.j
 -0.09571098+0.16535329j -0.09571098-0.16535329j  0.02744737+0.j
  0.03082230+0.08789354j  0.03082230-0.08789354j -0.20967300-0.1447755j
 -0.20967300+0.1447755j  -0.29974502-0.20310593j -0.29974502+0.20310593j
 -0.16652098-0.18456636j -0.16652098+0.18456636j -0.17139206+0.j
 -0.00895654+0.j          0.07051744+0.j        ]
eigenfunction(): eigenvector[x] =  -0.199961619837
eigenfunction(): eigenvector[x] =  0.107671118163
eigenfunction(): eigenvector[x] =  0.107671118163
eigenfunction(): eigenvector[x] =  0.475234824785
eigenfunction(): eigenvector[x] =  0.475234824785
eigenfunction(): eigenvector[x] =  -0.266479369711
eigenfunction(): eigenvector[x] =  -0.0957109813756
eigenfunction(): eigenvector[x] =  -0.0957109813756
eigenfunction(): eigenvector[x] =  0.0274473654809
eigenfunction(): eigenvector[x] =  0.0308223005809
eigenfunction(): ef =  2.54491873095
eigenfunction(): eigenvector =  [-0.19996162+0.j          0.10767112+0.13068093j  0.10767112-0.13068093j
  0.47523482+0.j          0.47523482-0.j         -0.26647937+0.j
 -0.09571098+0.16535329j -0.09571098-0.16535329j  0.02744737+0.j
  0.03082230+0.08789354j  0.03082230-0.08789354j -0.20967300-0.1447755j
 -0.20967300+0.1447755j  -0.29974502-0.20310593j -0.29974502+0.20310593j
 -0.16652098-0.18456636j -0.16652098+0.18456636j -0.17139206+0.j
 -0.00895654+0.j          0.07051744+0.j        ]
eigenfunction(): eigenvector[x] =  -0.199961619837
eigenfunction(): eigenvector[x] =  0.107671118163
eigenfunction(): eigenvector[x] =  0.107671118163
eigenfunction(): eigenvector[x] =  0.475234824785
eigenfunction(): eigenvector[x] =  0.475234824785
eigenfunction(): eigenvector[x] =  -0.266479369711
eigenfunction(): eigenvector[x] =  -0.0957109813756
eigenfunction(): eigenvector[x] =  -0.0957109813756
eigenfunction(): eigenvector[x] =  0.0274473654809
eigenfunction(): eigenvector[x] =  0.0308223005809
eigenfunction(): ef =  -2.54491873095
square root of eigenvalue: 0.347294693211
eigenfunction(): eigenvector =  [-0.24589430+0.j          0.17690353+0.25103475j  0.17690353-0.25103475j
  0.17358287-0.15636476j  0.17358287+0.15636476j  0.08747349+0.j
 -0.04706658-0.08226243j -0.04706658+0.08226243j  0.30807516+0.j
 -0.16455342+0.18870744j -0.16455342-0.18870744j -0.01041486+0.02133056j
 -0.01041486-0.02133056j -0.10966344+0.00698763j -0.10966344-0.00698763j
 -0.02367275-0.09007125j -0.02367275+0.09007125j  0.14545109+0.j
 -0.12776386+0.j         -0.24219439+0.j        ]
eigenfunction(): eigenvector[x] =  -0.245894302692
eigenfunction(): eigenvector[x] =  0.176903530186
eigenfunction(): eigenvector[x] =  0.176903530186
eigenfunction(): eigenvector[x] =  0.173582868233
eigenfunction(): eigenvector[x] =  0.173582868233
eigenfunction(): eigenvector[x] =  0.0874734904507
eigenfunction(): eigenvector[x] =  -0.0470665779822
eigenfunction(): eigenvector[x] =  -0.0470665779822
eigenfunction(): eigenvector[x] =  0.308075159512
eigenfunction(): eigenvector[x] =  -0.16455342198
eigenfunction(): ef =  2.94881880835
eigenfunction(): eigenvector =  [-0.24589430+0.j          0.17690353+0.25103475j  0.17690353-0.25103475j
  0.17358287-0.15636476j  0.17358287+0.15636476j  0.08747349+0.j
 -0.04706658-0.08226243j -0.04706658+0.08226243j  0.30807516+0.j
 -0.16455342+0.18870744j -0.16455342-0.18870744j -0.01041486+0.02133056j
 -0.01041486-0.02133056j -0.10966344+0.00698763j -0.10966344-0.00698763j
 -0.02367275-0.09007125j -0.02367275+0.09007125j  0.14545109+0.j
 -0.12776386+0.j         -0.24219439+0.j        ]
eigenfunction(): eigenvector[x] =  -0.245894302692
eigenfunction(): eigenvector[x] =  0.176903530186
eigenfunction(): eigenvector[x] =  0.176903530186
eigenfunction(): eigenvector[x] =  0.173582868233
eigenfunction(): eigenvector[x] =  0.173582868233
eigenfunction(): eigenvector[x] =  0.0874734904507
eigenfunction(): eigenvector[x] =  -0.0470665779822
eigenfunction(): eigenvector[x] =  -0.0470665779822
eigenfunction(): eigenvector[x] =  0.308075159512
eigenfunction(): eigenvector[x] =  -0.16455342198
eigenfunction(): ef =  -2.94881880835
eigenfunction(): eigenvector =  [-0.24589430+0.j          0.17690353+0.25103475j  0.17690353-0.25103475j
  0.17358287-0.15636476j  0.17358287+0.15636476j  0.08747349+0.j
 -0.04706658-0.08226243j -0.04706658+0.08226243j  0.30807516+0.j
 -0.16455342+0.18870744j -0.16455342-0.18870744j -0.01041486+0.02133056j
 -0.01041486-0.02133056j -0.10966344+0.00698763j -0.10966344-0.00698763j
 -0.02367275-0.09007125j -0.02367275+0.09007125j  0.14545109+0.j
 -0.12776386+0.j         -0.24219439+0.j        ]
eigenfunction(): eigenvector[x] =  -0.245894302692
eigenfunction(): eigenvector[x] =  0.176903530186
eigenfunction(): eigenvector[x] =  0.176903530186
eigenfunction(): eigenvector[x] =  0.173582868233
eigenfunction(): eigenvector[x] =  0.173582868233
eigenfunction(): eigenvector[x] =  0.0874734904507
eigenfunction(): eigenvector[x] =  -0.0470665779822
eigenfunction(): eigenvector[x] =  -0.0470665779822
eigenfunction(): eigenvector[x] =  0.308075159512
eigenfunction(): eigenvector[x] =  -0.16455342198
eigenfunction(): ef =  2.94881880835
eigenfunction(): eigenvector =  [-0.24589430+0.j          0.17690353+0.25103475j  0.17690353-0.25103475j
  0.17358287-0.15636476j  0.17358287+0.15636476j  0.08747349+0.j
 -0.04706658-0.08226243j -0.04706658+0.08226243j  0.30807516+0.j
 -0.16455342+0.18870744j -0.16455342-0.18870744j -0.01041486+0.02133056j
 -0.01041486-0.02133056j -0.10966344+0.00698763j -0.10966344-0.00698763j
 -0.02367275-0.09007125j -0.02367275+0.09007125j  0.14545109+0.j
 -0.12776386+0.j         -0.24219439+0.j        ]
eigenfunction(): eigenvector[x] =  -0.245894302692
eigenfunction(): eigenvector[x] =  0.176903530186
eigenfunction(): eigenvector[x] =  0.176903530186
eigenfunction(): eigenvector[x] =  0.173582868233
eigenfunction(): eigenvector[x] =  0.173582868233
eigenfunction(): eigenvector[x] =  0.0874734904507
eigenfunction(): eigenvector[x] =  -0.0470665779822
eigenfunction(): eigenvector[x] =  -0.0470665779822
eigenfunction(): eigenvector[x] =  0.308075159512
eigenfunction(): eigenvector[x] =  -0.16455342198
eigenfunction(): ef =  -2.94881880835
square root of eigenvalue: 0.347294693211
eigenfunction(): eigenvector =  [-0.23459106+0.j         -0.33472154-0.06577776j -0.33472154+0.06577776j
 -0.10191736+0.29665973j -0.10191736-0.29665973j -0.13122748+0.j
  0.07740466-0.18466972j  0.07740466+0.18466972j -0.12903024+0.j
 -0.03555818+0.25239717j -0.03555818-0.25239717j  0.31593381+0.11418316j
  0.31593381-0.11418316j  0.19892611-0.01821926j  0.19892611+0.01821926j
  0.23122131-0.07420972j  0.23122131+0.07420972j  0.26280041+0.j
  0.01545549+0.j         -0.10334821+0.j        ]
eigenfunction(): eigenvector[x] =  -0.234591058056
eigenfunction(): eigenvector[x] =  -0.334721538912
eigenfunction(): eigenvector[x] =  -0.334721538912
eigenfunction(): eigenvector[x] =  -0.10191735506
eigenfunction(): eigenvector[x] =  -0.10191735506
eigenfunction(): eigenvector[x] =  -0.131227484695
eigenfunction(): eigenvector[x] =  0.0774046640849
eigenfunction(): eigenvector[x] =  0.0774046640849
eigenfunction(): eigenvector[x] =  -0.129030238374
eigenfunction(): eigenvector[x] =  -0.0355581794204
eigenfunction(): ef =  -4.21498957255
eigenfunction(): eigenvector =  [-0.23459106+0.j         -0.33472154-0.06577776j -0.33472154+0.06577776j
 -0.10191736+0.29665973j -0.10191736-0.29665973j -0.13122748+0.j
  0.07740466-0.18466972j  0.07740466+0.18466972j -0.12903024+0.j
 -0.03555818+0.25239717j -0.03555818-0.25239717j  0.31593381+0.11418316j
  0.31593381-0.11418316j  0.19892611-0.01821926j  0.19892611+0.01821926j
  0.23122131-0.07420972j  0.23122131+0.07420972j  0.26280041+0.j
  0.01545549+0.j         -0.10334821+0.j        ]
eigenfunction(): eigenvector[x] =  -0.234591058056
eigenfunction(): eigenvector[x] =  -0.334721538912
eigenfunction(): eigenvector[x] =  -0.334721538912
eigenfunction(): eigenvector[x] =  -0.10191735506
eigenfunction(): eigenvector[x] =  -0.10191735506
eigenfunction(): eigenvector[x] =  -0.131227484695
eigenfunction(): eigenvector[x] =  0.0774046640849
eigenfunction(): eigenvector[x] =  0.0774046640849
eigenfunction(): eigenvector[x] =  -0.129030238374
eigenfunction(): eigenvector[x] =  -0.0355581794204
eigenfunction(): ef =  4.21498957255
eigenfunction(): eigenvector =  [-0.23459106+0.j         -0.33472154-0.06577776j -0.33472154+0.06577776j
 -0.10191736+0.29665973j -0.10191736-0.29665973j -0.13122748+0.j
  0.07740466-0.18466972j  0.07740466+0.18466972j -0.12903024+0.j
 -0.03555818+0.25239717j -0.03555818-0.25239717j  0.31593381+0.11418316j
  0.31593381-0.11418316j  0.19892611-0.01821926j  0.19892611+0.01821926j
  0.23122131-0.07420972j  0.23122131+0.07420972j  0.26280041+0.j
  0.01545549+0.j         -0.10334821+0.j        ]
eigenfunction(): eigenvector[x] =  -0.234591058056
eigenfunction(): eigenvector[x] =  -0.334721538912
eigenfunction(): eigenvector[x] =  -0.334721538912
eigenfunction(): eigenvector[x] =  -0.10191735506
eigenfunction(): eigenvector[x] =  -0.10191735506
eigenfunction(): eigenvector[x] =  -0.131227484695
eigenfunction(): eigenvector[x] =  0.0774046640849
eigenfunction(): eigenvector[x] =  0.0774046640849
eigenfunction(): eigenvector[x] =  -0.129030238374
eigenfunction(): eigenvector[x] =  -0.0355581794204
eigenfunction(): ef =  -4.21498957255
eigenfunction(): eigenvector =  [-0.23459106+0.j         -0.33472154-0.06577776j -0.33472154+0.06577776j
 -0.10191736+0.29665973j -0.10191736-0.29665973j -0.13122748+0.j
  0.07740466-0.18466972j  0.07740466+0.18466972j -0.12903024+0.j
 -0.03555818+0.25239717j -0.03555818-0.25239717j  0.31593381+0.11418316j
  0.31593381-0.11418316j  0.19892611-0.01821926j  0.19892611+0.01821926j
  0.23122131-0.07420972j  0.23122131+0.07420972j  0.26280041+0.j
  0.01545549+0.j         -0.10334821+0.j        ]
eigenfunction(): eigenvector[x] =  -0.234591058056
eigenfunction(): eigenvector[x] =  -0.334721538912
eigenfunction(): eigenvector[x] =  -0.334721538912
eigenfunction(): eigenvector[x] =  -0.10191735506
eigenfunction(): eigenvector[x] =  -0.10191735506
eigenfunction(): eigenvector[x] =  -0.131227484695
eigenfunction(): eigenvector[x] =  0.0774046640849
eigenfunction(): eigenvector[x] =  0.0774046640849
eigenfunction(): eigenvector[x] =  -0.129030238374
eigenfunction(): eigenvector[x] =  -0.0355581794204
eigenfunction(): ef =  4.21498957255
square root of eigenvalue: 0.83485514828
eigenfunction(): eigenvector =  [-0.21474527+0.j         -0.07800085-0.1790245j  -0.07800085+0.1790245j
  0.02339477+0.04695299j  0.02339477-0.04695299j  0.04887399+0.j
 -0.18499475+0.0444715j  -0.18499475-0.0444715j   0.15679325+0.j
 -0.08499357-0.08594653j -0.08499357+0.08594653j -0.17023259-0.237324j
 -0.17023259+0.237324j    0.00872266+0.01326403j  0.00872266-0.01326403j
  0.05142973+0.04537231j  0.05142973-0.04537231j -0.44860878+0.j
 -0.01134192+0.j          0.30660538+0.j        ]
eigenfunction(): eigenvector[x] =  -0.2147452669
eigenfunction(): eigenvector[x] =  -0.0780008450352
eigenfunction(): eigenvector[x] =  -0.0780008450352
eigenfunction(): eigenvector[x] =  0.023394774521
eigenfunction(): eigenvector[x] =  0.023394774521
eigenfunction(): eigenvector[x] =  0.0488739914455
eigenfunction(): eigenvector[x] =  -0.184994747123
eigenfunction(): eigenvector[x] =  -0.184994747123
eigenfunction(): eigenvector[x] =  0.156793254472
eigenfunction(): eigenvector[x] =  -0.0849935694166
eigenfunction(): ef =  -1.66627197833
eigenfunction(): eigenvector =  [-0.21474527+0.j         -0.07800085-0.1790245j  -0.07800085+0.1790245j
  0.02339477+0.04695299j  0.02339477-0.04695299j  0.04887399+0.j
 -0.18499475+0.0444715j  -0.18499475-0.0444715j   0.15679325+0.j
 -0.08499357-0.08594653j -0.08499357+0.08594653j -0.17023259-0.237324j
 -0.17023259+0.237324j    0.00872266+0.01326403j  0.00872266-0.01326403j
  0.05142973+0.04537231j  0.05142973-0.04537231j -0.44860878+0.j
 -0.01134192+0.j          0.30660538+0.j        ]
eigenfunction(): eigenvector[x] =  -0.2147452669
eigenfunction(): eigenvector[x] =  -0.0780008450352
eigenfunction(): eigenvector[x] =  -0.0780008450352
eigenfunction(): eigenvector[x] =  0.023394774521
eigenfunction(): eigenvector[x] =  0.023394774521
eigenfunction(): eigenvector[x] =  0.0488739914455
eigenfunction(): eigenvector[x] =  -0.184994747123
eigenfunction(): eigenvector[x] =  -0.184994747123
eigenfunction(): eigenvector[x] =  0.156793254472
eigenfunction(): eigenvector[x] =  -0.0849935694166
eigenfunction(): ef =  1.66627197833
eigenfunction(): eigenvector =  [-0.21474527+0.j         -0.07800085-0.1790245j  -0.07800085+0.1790245j
  0.02339477+0.04695299j  0.02339477-0.04695299j  0.04887399+0.j
 -0.18499475+0.0444715j  -0.18499475-0.0444715j   0.15679325+0.j
 -0.08499357-0.08594653j -0.08499357+0.08594653j -0.17023259-0.237324j
 -0.17023259+0.237324j    0.00872266+0.01326403j  0.00872266-0.01326403j
  0.05142973+0.04537231j  0.05142973-0.04537231j -0.44860878+0.j
 -0.01134192+0.j          0.30660538+0.j        ]
eigenfunction(): eigenvector[x] =  -0.2147452669
eigenfunction(): eigenvector[x] =  -0.0780008450352
eigenfunction(): eigenvector[x] =  -0.0780008450352
eigenfunction(): eigenvector[x] =  0.023394774521
eigenfunction(): eigenvector[x] =  0.023394774521
eigenfunction(): eigenvector[x] =  0.0488739914455
eigenfunction(): eigenvector[x] =  -0.184994747123
eigenfunction(): eigenvector[x] =  -0.184994747123
eigenfunction(): eigenvector[x] =  0.156793254472
eigenfunction(): eigenvector[x] =  -0.0849935694166
eigenfunction(): ef =  -1.66627197833
eigenfunction(): eigenvector =  [-0.21474527+0.j         -0.07800085-0.1790245j  -0.07800085+0.1790245j
  0.02339477+0.04695299j  0.02339477-0.04695299j  0.04887399+0.j
 -0.18499475+0.0444715j  -0.18499475-0.0444715j   0.15679325+0.j
 -0.08499357-0.08594653j -0.08499357+0.08594653j -0.17023259-0.237324j
 -0.17023259+0.237324j    0.00872266+0.01326403j  0.00872266-0.01326403j
  0.05142973+0.04537231j  0.05142973-0.04537231j -0.44860878+0.j
 -0.01134192+0.j          0.30660538+0.j        ]
eigenfunction(): eigenvector[x] =  -0.2147452669
eigenfunction(): eigenvector[x] =  -0.0780008450352
eigenfunction(): eigenvector[x] =  -0.0780008450352
eigenfunction(): eigenvector[x] =  0.023394774521
eigenfunction(): eigenvector[x] =  0.023394774521
eigenfunction(): eigenvector[x] =  0.0488739914455
eigenfunction(): eigenvector[x] =  -0.184994747123
eigenfunction(): eigenvector[x] =  -0.184994747123
eigenfunction(): eigenvector[x] =  0.156793254472
eigenfunction(): eigenvector[x] =  -0.0849935694166
eigenfunction(): ef =  1.66627197833
square root of eigenvalue: 0.83485514828
eigenfunction(): eigenvector =  [-0.26044533+0.j          0.04068562-0.09575287j  0.04068562+0.09575287j
 -0.04603376-0.07705131j -0.04603376+0.07705131j  0.16844553+0.j
  0.14563681-0.0946321j   0.14563681+0.0946321j   0.17587694+0.j
  0.01748679-0.17009723j  0.01748679+0.17009723j -0.12186077+0.14782699j
 -0.12186077-0.14782699j  0.12263456+0.19462202j  0.12263456-0.19462202j
 -0.04720199+0.18237544j -0.04720199-0.18237544j -0.35790547+0.j
 -0.14917734+0.j          0.32155935+0.j        ]
eigenfunction(): eigenvector[x] =  -0.260445326306
eigenfunction(): eigenvector[x] =  0.040685621896
eigenfunction(): eigenvector[x] =  0.040685621896
eigenfunction(): eigenvector[x] =  -0.0460337609976
eigenfunction(): eigenvector[x] =  -0.0460337609976
eigenfunction(): eigenvector[x] =  0.168445528896
eigenfunction(): eigenvector[x] =  0.145636811877
eigenfunction(): eigenvector[x] =  0.145636811877
eigenfunction(): eigenvector[x] =  0.175876944046
eigenfunction(): eigenvector[x] =  0.0174867920013
eigenfunction(): ef =  1.40879634726
eigenfunction(): eigenvector =  [-0.26044533+0.j          0.04068562-0.09575287j  0.04068562+0.09575287j
 -0.04603376-0.07705131j -0.04603376+0.07705131j  0.16844553+0.j
  0.14563681-0.0946321j   0.14563681+0.0946321j   0.17587694+0.j
  0.01748679-0.17009723j  0.01748679+0.17009723j -0.12186077+0.14782699j
 -0.12186077-0.14782699j  0.12263456+0.19462202j  0.12263456-0.19462202j
 -0.04720199+0.18237544j -0.04720199-0.18237544j -0.35790547+0.j
 -0.14917734+0.j          0.32155935+0.j        ]
eigenfunction(): eigenvector[x] =  -0.260445326306
eigenfunction(): eigenvector[x] =  0.040685621896
eigenfunction(): eigenvector[x] =  0.040685621896
eigenfunction(): eigenvector[x] =  -0.0460337609976
eigenfunction(): eigenvector[x] =  -0.0460337609976
eigenfunction(): eigenvector[x] =  0.168445528896
eigenfunction(): eigenvector[x] =  0.145636811877
eigenfunction(): eigenvector[x] =  0.145636811877
eigenfunction(): eigenvector[x] =  0.175876944046
eigenfunction(): eigenvector[x] =  0.0174867920013
eigenfunction(): ef =  -1.40879634726
eigenfunction(): eigenvector =  [-0.26044533+0.j          0.04068562-0.09575287j  0.04068562+0.09575287j
 -0.04603376-0.07705131j -0.04603376+0.07705131j  0.16844553+0.j
  0.14563681-0.0946321j   0.14563681+0.0946321j   0.17587694+0.j
  0.01748679-0.17009723j  0.01748679+0.17009723j -0.12186077+0.14782699j
 -0.12186077-0.14782699j  0.12263456+0.19462202j  0.12263456-0.19462202j
 -0.04720199+0.18237544j -0.04720199-0.18237544j -0.35790547+0.j
 -0.14917734+0.j          0.32155935+0.j        ]
eigenfunction(): eigenvector[x] =  -0.260445326306
eigenfunction(): eigenvector[x] =  0.040685621896
eigenfunction(): eigenvector[x] =  0.040685621896
eigenfunction(): eigenvector[x] =  -0.0460337609976
eigenfunction(): eigenvector[x] =  -0.0460337609976
eigenfunction(): eigenvector[x] =  0.168445528896
eigenfunction(): eigenvector[x] =  0.145636811877
eigenfunction(): eigenvector[x] =  0.145636811877
eigenfunction(): eigenvector[x] =  0.175876944046
eigenfunction(): eigenvector[x] =  0.0174867920013
eigenfunction(): ef =  1.40879634726
eigenfunction(): eigenvector =  [-0.26044533+0.j          0.04068562-0.09575287j  0.04068562+0.09575287j
 -0.04603376-0.07705131j -0.04603376+0.07705131j  0.16844553+0.j
  0.14563681-0.0946321j   0.14563681+0.0946321j   0.17587694+0.j
  0.01748679-0.17009723j  0.01748679+0.17009723j -0.12186077+0.14782699j
 -0.12186077-0.14782699j  0.12263456+0.19462202j  0.12263456-0.19462202j
 -0.04720199+0.18237544j -0.04720199-0.18237544j -0.35790547+0.j
 -0.14917734+0.j          0.32155935+0.j        ]
eigenfunction(): eigenvector[x] =  -0.260445326306
eigenfunction(): eigenvector[x] =  0.040685621896
eigenfunction(): eigenvector[x] =  0.040685621896
eigenfunction(): eigenvector[x] =  -0.0460337609976
eigenfunction(): eigenvector[x] =  -0.0460337609976
eigenfunction(): eigenvector[x] =  0.168445528896
eigenfunction(): eigenvector[x] =  0.145636811877
eigenfunction(): eigenvector[x] =  0.145636811877
eigenfunction(): eigenvector[x] =  0.175876944046
eigenfunction(): eigenvector[x] =  0.0174867920013
eigenfunction(): ef =  -1.40879634726
square root of eigenvalue: 0.424811488074
eigenfunction(): eigenvector =  [-0.18514305+0.j         -0.25208255-0.24675704j -0.25208255+0.24675704j
 -0.17446620-0.00922961j -0.17446620+0.00922961j -0.28897554+0.j
 -0.17653585+0.05084955j -0.17653585-0.05084955j -0.48735821+0.j
 -0.05990864+0.01939301j -0.05990864-0.01939301j -0.07229473-0.23901727j
 -0.07229473+0.23901727j -0.11867149+0.3030851j  -0.11867149-0.3030851j
 -0.13345079+0.12403275j -0.13345079-0.12403275j  0.06057621+0.j
  0.31732358+0.j         -0.10678139+0.j        ]
eigenfunction(): eigenvector[x] =  -0.185143049965
eigenfunction(): eigenvector[x] =  -0.25208255349
eigenfunction(): eigenvector[x] =  -0.25208255349
eigenfunction(): eigenvector[x] =  -0.174466202939
eigenfunction(): eigenvector[x] =  -0.174466202939
eigenfunction(): eigenvector[x] =  -0.288975537304
eigenfunction(): eigenvector[x] =  -0.17653585169
eigenfunction(): eigenvector[x] =  -0.17653585169
eigenfunction(): eigenvector[x] =  -0.487358213746
eigenfunction(): eigenvector[x] =  -0.0599086356394
eigenfunction(): ef =  -8.62309295055
eigenfunction(): eigenvector =  [-0.18514305+0.j         -0.25208255-0.24675704j -0.25208255+0.24675704j
 -0.17446620-0.00922961j -0.17446620+0.00922961j -0.28897554+0.j
 -0.17653585+0.05084955j -0.17653585-0.05084955j -0.48735821+0.j
 -0.05990864+0.01939301j -0.05990864-0.01939301j -0.07229473-0.23901727j
 -0.07229473+0.23901727j -0.11867149+0.3030851j  -0.11867149-0.3030851j
 -0.13345079+0.12403275j -0.13345079-0.12403275j  0.06057621+0.j
  0.31732358+0.j         -0.10678139+0.j        ]
eigenfunction(): eigenvector[x] =  -0.185143049965
eigenfunction(): eigenvector[x] =  -0.25208255349
eigenfunction(): eigenvector[x] =  -0.25208255349
eigenfunction(): eigenvector[x] =  -0.174466202939
eigenfunction(): eigenvector[x] =  -0.174466202939
eigenfunction(): eigenvector[x] =  -0.288975537304
eigenfunction(): eigenvector[x] =  -0.17653585169
eigenfunction(): eigenvector[x] =  -0.17653585169
eigenfunction(): eigenvector[x] =  -0.487358213746
eigenfunction(): eigenvector[x] =  -0.0599086356394
eigenfunction(): ef =  8.62309295055
eigenfunction(): eigenvector =  [-0.18514305+0.j         -0.25208255-0.24675704j -0.25208255+0.24675704j
 -0.17446620-0.00922961j -0.17446620+0.00922961j -0.28897554+0.j
 -0.17653585+0.05084955j -0.17653585-0.05084955j -0.48735821+0.j
 -0.05990864+0.01939301j -0.05990864-0.01939301j -0.07229473-0.23901727j
 -0.07229473+0.23901727j -0.11867149+0.3030851j  -0.11867149-0.3030851j
 -0.13345079+0.12403275j -0.13345079-0.12403275j  0.06057621+0.j
  0.31732358+0.j         -0.10678139+0.j        ]
eigenfunction(): eigenvector[x] =  -0.185143049965
eigenfunction(): eigenvector[x] =  -0.25208255349
eigenfunction(): eigenvector[x] =  -0.25208255349
eigenfunction(): eigenvector[x] =  -0.174466202939
eigenfunction(): eigenvector[x] =  -0.174466202939
eigenfunction(): eigenvector[x] =  -0.288975537304
eigenfunction(): eigenvector[x] =  -0.17653585169
eigenfunction(): eigenvector[x] =  -0.17653585169
eigenfunction(): eigenvector[x] =  -0.487358213746
eigenfunction(): eigenvector[x] =  -0.0599086356394
eigenfunction(): ef =  -8.62309295055
eigenfunction(): eigenvector =  [-0.18514305+0.j         -0.25208255-0.24675704j -0.25208255+0.24675704j
 -0.17446620-0.00922961j -0.17446620+0.00922961j -0.28897554+0.j
 -0.17653585+0.05084955j -0.17653585-0.05084955j -0.48735821+0.j
 -0.05990864+0.01939301j -0.05990864-0.01939301j -0.07229473-0.23901727j
 -0.07229473+0.23901727j -0.11867149+0.3030851j  -0.11867149-0.3030851j
 -0.13345079+0.12403275j -0.13345079-0.12403275j  0.06057621+0.j
  0.31732358+0.j         -0.10678139+0.j        ]
eigenfunction(): eigenvector[x] =  -0.185143049965
eigenfunction(): eigenvector[x] =  -0.25208255349
eigenfunction(): eigenvector[x] =  -0.25208255349
eigenfunction(): eigenvector[x] =  -0.174466202939
eigenfunction(): eigenvector[x] =  -0.174466202939
eigenfunction(): eigenvector[x] =  -0.288975537304
eigenfunction(): eigenvector[x] =  -0.17653585169
eigenfunction(): eigenvector[x] =  -0.17653585169
eigenfunction(): eigenvector[x] =  -0.487358213746
eigenfunction(): eigenvector[x] =  -0.0599086356394
eigenfunction(): ef =  8.62309295055
square root of eigenvalue: 0.424811488074
eigenfunction(): eigenvector =  [-0.20342812+0.j          0.02456219+0.00956924j  0.02456219-0.00956924j
  0.01788470-0.10325316j  0.01788470+0.10325316j -0.48489497+0.j
 -0.25523285+0.12745016j -0.25523285-0.12745016j  0.31738081+0.j
  0.22628953-0.02697165j  0.22628953+0.02697165j -0.21633474-0.07679372j
 -0.21633474+0.07679372j -0.15972106+0.00939459j -0.15972106-0.00939459j
 -0.27397633-0.00174365j -0.27397633+0.00174365j  0.02364041+0.j
  0.00386082+0.j         -0.02178878+0.j        ]
eigenfunction(): eigenvector[x] =  -0.203428116017
eigenfunction(): eigenvector[x] =  0.0245621878746
eigenfunction(): eigenvector[x] =  0.0245621878746
eigenfunction(): eigenvector[x] =  0.0178847047594
eigenfunction(): eigenvector[x] =  0.0178847047594
eigenfunction(): eigenvector[x] =  -0.4848949656
eigenfunction(): eigenvector[x] =  -0.255232851272
eigenfunction(): eigenvector[x] =  -0.255232851272
eigenfunction(): eigenvector[x] =  0.317380812599
eigenfunction(): eigenvector[x] =  0.226289527525
eigenfunction(): ef =  -1.404340037
eigenfunction(): eigenvector =  [-0.20342812+0.j          0.02456219+0.00956924j  0.02456219-0.00956924j
  0.01788470-0.10325316j  0.01788470+0.10325316j -0.48489497+0.j
 -0.25523285+0.12745016j -0.25523285-0.12745016j  0.31738081+0.j
  0.22628953-0.02697165j  0.22628953+0.02697165j -0.21633474-0.07679372j
 -0.21633474+0.07679372j -0.15972106+0.00939459j -0.15972106-0.00939459j
 -0.27397633-0.00174365j -0.27397633+0.00174365j  0.02364041+0.j
  0.00386082+0.j         -0.02178878+0.j        ]
eigenfunction(): eigenvector[x] =  -0.203428116017
eigenfunction(): eigenvector[x] =  0.0245621878746
eigenfunction(): eigenvector[x] =  0.0245621878746
eigenfunction(): eigenvector[x] =  0.0178847047594
eigenfunction(): eigenvector[x] =  0.0178847047594
eigenfunction(): eigenvector[x] =  -0.4848949656
eigenfunction(): eigenvector[x] =  -0.255232851272
eigenfunction(): eigenvector[x] =  -0.255232851272
eigenfunction(): eigenvector[x] =  0.317380812599
eigenfunction(): eigenvector[x] =  0.226289527525
eigenfunction(): ef =  1.404340037
eigenfunction(): eigenvector =  [-0.20342812+0.j          0.02456219+0.00956924j  0.02456219-0.00956924j
  0.01788470-0.10325316j  0.01788470+0.10325316j -0.48489497+0.j
 -0.25523285+0.12745016j -0.25523285-0.12745016j  0.31738081+0.j
  0.22628953-0.02697165j  0.22628953+0.02697165j -0.21633474-0.07679372j
 -0.21633474+0.07679372j -0.15972106+0.00939459j -0.15972106-0.00939459j
 -0.27397633-0.00174365j -0.27397633+0.00174365j  0.02364041+0.j
  0.00386082+0.j         -0.02178878+0.j        ]
eigenfunction(): eigenvector[x] =  -0.203428116017
eigenfunction(): eigenvector[x] =  0.0245621878746
eigenfunction(): eigenvector[x] =  0.0245621878746
eigenfunction(): eigenvector[x] =  0.0178847047594
eigenfunction(): eigenvector[x] =  0.0178847047594
eigenfunction(): eigenvector[x] =  -0.4848949656
eigenfunction(): eigenvector[x] =  -0.255232851272
eigenfunction(): eigenvector[x] =  -0.255232851272
eigenfunction(): eigenvector[x] =  0.317380812599
eigenfunction(): eigenvector[x] =  0.226289527525
eigenfunction(): ef =  -1.404340037
eigenfunction(): eigenvector =  [-0.20342812+0.j          0.02456219+0.00956924j  0.02456219-0.00956924j
  0.01788470-0.10325316j  0.01788470+0.10325316j -0.48489497+0.j
 -0.25523285+0.12745016j -0.25523285-0.12745016j  0.31738081+0.j
  0.22628953-0.02697165j  0.22628953+0.02697165j -0.21633474-0.07679372j
 -0.21633474+0.07679372j -0.15972106+0.00939459j -0.15972106-0.00939459j
 -0.27397633-0.00174365j -0.27397633+0.00174365j  0.02364041+0.j
  0.00386082+0.j         -0.02178878+0.j        ]
eigenfunction(): eigenvector[x] =  -0.203428116017
eigenfunction(): eigenvector[x] =  0.0245621878746
eigenfunction(): eigenvector[x] =  0.0245621878746
eigenfunction(): eigenvector[x] =  0.0178847047594
eigenfunction(): eigenvector[x] =  0.0178847047594
eigenfunction(): eigenvector[x] =  -0.4848949656
eigenfunction(): eigenvector[x] =  -0.255232851272
eigenfunction(): eigenvector[x] =  -0.255232851272
eigenfunction(): eigenvector[x] =  0.317380812599
eigenfunction(): eigenvector[x] =  0.226289527525
eigenfunction(): ef =  1.404340037
square root of eigenvalue: 0.204008513714
eigenfunction(): eigenvector =  [-0.22364885+0.j          0.02096344+0.02069331j  0.02096344-0.02069331j
  0.13663156-0.11057889j  0.13663156+0.11057889j  0.00265606+0.j
 -0.10049008+0.19638878j -0.10049008-0.19638878j -0.10254418+0.j
  0.02917872+0.05566322j  0.02917872-0.05566322j -0.03035778+0.01554177j
 -0.03035778-0.01554177j -0.04875221+0.15670269j -0.04875221-0.15670269j
 -0.08290233+0.10945641j -0.08290233-0.10945641j -0.14989538+0.j
  0.15072014+0.j         -0.15309402+0.j        ]
eigenfunction(): eigenvector[x] =  -0.223648851054
eigenfunction(): eigenvector[x] =  0.0209634353517
eigenfunction(): eigenvector[x] =  0.0209634353517
eigenfunction(): eigenvector[x] =  0.136631563399
eigenfunction(): eigenvector[x] =  0.136631563399
eigenfunction(): eigenvector[x] =  0.00265605985586
eigenfunction(): eigenvector[x] =  -0.100490075712
eigenfunction(): eigenvector[x] =  -0.100490075712
eigenfunction(): eigenvector[x] =  -0.102544179379
eigenfunction(): eigenvector[x] =  0.0291787249774
eigenfunction(): ef =  -1.0604571222
eigenfunction(): eigenvector =  [-0.22364885+0.j          0.02096344+0.02069331j  0.02096344-0.02069331j
  0.13663156-0.11057889j  0.13663156+0.11057889j  0.00265606+0.j
 -0.10049008+0.19638878j -0.10049008-0.19638878j -0.10254418+0.j
  0.02917872+0.05566322j  0.02917872-0.05566322j -0.03035778+0.01554177j
 -0.03035778-0.01554177j -0.04875221+0.15670269j -0.04875221-0.15670269j
 -0.08290233+0.10945641j -0.08290233-0.10945641j -0.14989538+0.j
  0.15072014+0.j         -0.15309402+0.j        ]
eigenfunction(): eigenvector[x] =  -0.223648851054
eigenfunction(): eigenvector[x] =  0.0209634353517
eigenfunction(): eigenvector[x] =  0.0209634353517
eigenfunction(): eigenvector[x] =  0.136631563399
eigenfunction(): eigenvector[x] =  0.136631563399
eigenfunction(): eigenvector[x] =  0.00265605985586
eigenfunction(): eigenvector[x] =  -0.100490075712
eigenfunction(): eigenvector[x] =  -0.100490075712
eigenfunction(): eigenvector[x] =  -0.102544179379
eigenfunction(): eigenvector[x] =  0.0291787249774
eigenfunction(): ef =  1.0604571222
eigenfunction(): eigenvector =  [-0.22364885+0.j          0.02096344+0.02069331j  0.02096344-0.02069331j
  0.13663156-0.11057889j  0.13663156+0.11057889j  0.00265606+0.j
 -0.10049008+0.19638878j -0.10049008-0.19638878j -0.10254418+0.j
  0.02917872+0.05566322j  0.02917872-0.05566322j -0.03035778+0.01554177j
 -0.03035778-0.01554177j -0.04875221+0.15670269j -0.04875221-0.15670269j
 -0.08290233+0.10945641j -0.08290233-0.10945641j -0.14989538+0.j
  0.15072014+0.j         -0.15309402+0.j        ]
eigenfunction(): eigenvector[x] =  -0.223648851054
eigenfunction(): eigenvector[x] =  0.0209634353517
eigenfunction(): eigenvector[x] =  0.0209634353517
eigenfunction(): eigenvector[x] =  0.136631563399
eigenfunction(): eigenvector[x] =  0.136631563399
eigenfunction(): eigenvector[x] =  0.00265605985586
eigenfunction(): eigenvector[x] =  -0.100490075712
eigenfunction(): eigenvector[x] =  -0.100490075712
eigenfunction(): eigenvector[x] =  -0.102544179379
eigenfunction(): eigenvector[x] =  0.0291787249774
eigenfunction(): ef =  -1.0604571222
eigenfunction(): eigenvector =  [-0.22364885+0.j          0.02096344+0.02069331j  0.02096344-0.02069331j
  0.13663156-0.11057889j  0.13663156+0.11057889j  0.00265606+0.j
 -0.10049008+0.19638878j -0.10049008-0.19638878j -0.10254418+0.j
  0.02917872+0.05566322j  0.02917872-0.05566322j -0.03035778+0.01554177j
 -0.03035778-0.01554177j -0.04875221+0.15670269j -0.04875221-0.15670269j
 -0.08290233+0.10945641j -0.08290233-0.10945641j -0.14989538+0.j
  0.15072014+0.j         -0.15309402+0.j        ]
eigenfunction(): eigenvector[x] =  -0.223648851054
eigenfunction(): eigenvector[x] =  0.0209634353517
eigenfunction(): eigenvector[x] =  0.0209634353517
eigenfunction(): eigenvector[x] =  0.136631563399
eigenfunction(): eigenvector[x] =  0.136631563399
eigenfunction(): eigenvector[x] =  0.00265605985586
eigenfunction(): eigenvector[x] =  -0.100490075712
eigenfunction(): eigenvector[x] =  -0.100490075712
eigenfunction(): eigenvector[x] =  -0.102544179379
eigenfunction(): eigenvector[x] =  0.0291787249774
eigenfunction(): ef =  1.0604571222
square root of eigenvalue: 0.204008513714
eigenfunction(): eigenvector =  [-0.25879887+0.j         -0.23011948+0.00254196j -0.23011948-0.00254196j
  0.19551559+0.11363099j  0.19551559-0.11363099j  0.05645763+0.j
 -0.17271779+0.03376236j -0.17271779-0.03376236j  0.00745158+0.j
  0.11371746+0.18804881j  0.11371746-0.18804881j -0.03499975-0.15779809j
 -0.03499975+0.15779809j -0.09144884-0.13188587j -0.09144884+0.13188587j
 -0.14934723-0.29392871j -0.14934723+0.29392871j  0.12032279+0.j
 -0.00190637+0.j         -0.31274036+0.j        ]
eigenfunction(): eigenvector[x] =  -0.258798873858
eigenfunction(): eigenvector[x] =  -0.230119481617
eigenfunction(): eigenvector[x] =  -0.230119481617
eigenfunction(): eigenvector[x] =  0.195515588092
eigenfunction(): eigenvector[x] =  0.195515588092
eigenfunction(): eigenvector[x] =  0.0564576294112
eigenfunction(): eigenvector[x] =  -0.172717789218
eigenfunction(): eigenvector[x] =  -0.172717789218
eigenfunction(): eigenvector[x] =  0.0074515824291
eigenfunction(): eigenvector[x] =  0.113717463014
eigenfunction(): ef =  -1.96218777773
eigenfunction(): eigenvector =  [-0.25879887+0.j         -0.23011948+0.00254196j -0.23011948-0.00254196j
  0.19551559+0.11363099j  0.19551559-0.11363099j  0.05645763+0.j
 -0.17271779+0.03376236j -0.17271779-0.03376236j  0.00745158+0.j
  0.11371746+0.18804881j  0.11371746-0.18804881j -0.03499975-0.15779809j
 -0.03499975+0.15779809j -0.09144884-0.13188587j -0.09144884+0.13188587j
 -0.14934723-0.29392871j -0.14934723+0.29392871j  0.12032279+0.j
 -0.00190637+0.j         -0.31274036+0.j        ]
eigenfunction(): eigenvector[x] =  -0.258798873858
eigenfunction(): eigenvector[x] =  -0.230119481617
eigenfunction(): eigenvector[x] =  -0.230119481617
eigenfunction(): eigenvector[x] =  0.195515588092
eigenfunction(): eigenvector[x] =  0.195515588092
eigenfunction(): eigenvector[x] =  0.0564576294112
eigenfunction(): eigenvector[x] =  -0.172717789218
eigenfunction(): eigenvector[x] =  -0.172717789218
eigenfunction(): eigenvector[x] =  0.0074515824291
eigenfunction(): eigenvector[x] =  0.113717463014
eigenfunction(): ef =  1.96218777773
eigenfunction(): eigenvector =  [-0.25879887+0.j         -0.23011948+0.00254196j -0.23011948-0.00254196j
  0.19551559+0.11363099j  0.19551559-0.11363099j  0.05645763+0.j
 -0.17271779+0.03376236j -0.17271779-0.03376236j  0.00745158+0.j
  0.11371746+0.18804881j  0.11371746-0.18804881j -0.03499975-0.15779809j
 -0.03499975+0.15779809j -0.09144884-0.13188587j -0.09144884+0.13188587j
 -0.14934723-0.29392871j -0.14934723+0.29392871j  0.12032279+0.j
 -0.00190637+0.j         -0.31274036+0.j        ]
eigenfunction(): eigenvector[x] =  -0.258798873858
eigenfunction(): eigenvector[x] =  -0.230119481617
eigenfunction(): eigenvector[x] =  -0.230119481617
eigenfunction(): eigenvector[x] =  0.195515588092
eigenfunction(): eigenvector[x] =  0.195515588092
eigenfunction(): eigenvector[x] =  0.0564576294112
eigenfunction(): eigenvector[x] =  -0.172717789218
eigenfunction(): eigenvector[x] =  -0.172717789218
eigenfunction(): eigenvector[x] =  0.0074515824291
eigenfunction(): eigenvector[x] =  0.113717463014
eigenfunction(): ef =  -1.96218777773
eigenfunction(): eigenvector =  [-0.25879887+0.j         -0.23011948+0.00254196j -0.23011948-0.00254196j
  0.19551559+0.11363099j  0.19551559-0.11363099j  0.05645763+0.j
 -0.17271779+0.03376236j -0.17271779-0.03376236j  0.00745158+0.j
  0.11371746+0.18804881j  0.11371746-0.18804881j -0.03499975-0.15779809j
 -0.03499975+0.15779809j -0.09144884-0.13188587j -0.09144884+0.13188587j
 -0.14934723-0.29392871j -0.14934723+0.29392871j  0.12032279+0.j
 -0.00190637+0.j         -0.31274036+0.j        ]
eigenfunction(): eigenvector[x] =  -0.258798873858
eigenfunction(): eigenvector[x] =  -0.230119481617
eigenfunction(): eigenvector[x] =  -0.230119481617
eigenfunction(): eigenvector[x] =  0.195515588092
eigenfunction(): eigenvector[x] =  0.195515588092
eigenfunction(): eigenvector[x] =  0.0564576294112
eigenfunction(): eigenvector[x] =  -0.172717789218
eigenfunction(): eigenvector[x] =  -0.172717789218
eigenfunction(): eigenvector[x] =  0.0074515824291
eigenfunction(): eigenvector[x] =  0.113717463014
eigenfunction(): ef =  1.96218777773
square root of eigenvalue: 0.814050912793
eigenfunction(): eigenvector =  [-0.22836910+0.j         -0.03847211+0.09390537j -0.03847211-0.09390537j
 -0.13023495+0.21688569j -0.13023495-0.21688569j -0.00182916+0.j
 -0.08309063+0.11720607j -0.08309063-0.11720607j -0.06062120+0.j
  0.04456543+0.20141752j  0.04456543-0.20141752j -0.07904722-0.02099425j
 -0.07904722+0.02099425j  0.40024457+0.j          0.40024457-0.j
  0.35052893+0.j          0.35052893-0.j         -0.14370925+0.j
 -0.22898602+0.j          0.25210946+0.j        ]
eigenfunction(): eigenvector[x] =  -0.228369095946
eigenfunction(): eigenvector[x] =  -0.0384721094247
eigenfunction(): eigenvector[x] =  -0.0384721094247
eigenfunction(): eigenvector[x] =  -0.130234954105
eigenfunction(): eigenvector[x] =  -0.130234954105
eigenfunction(): eigenvector[x] =  -0.00182915759185
eigenfunction(): eigenvector[x] =  -0.0830906332715
eigenfunction(): eigenvector[x] =  -0.0830906332715
eigenfunction(): eigenvector[x] =  -0.0606211979011
eigenfunction(): eigenvector[x] =  0.0445654334321
eigenfunction(): ef =  -3.17373380851
eigenfunction(): eigenvector =  [-0.22836910+0.j         -0.03847211+0.09390537j -0.03847211-0.09390537j
 -0.13023495+0.21688569j -0.13023495-0.21688569j -0.00182916+0.j
 -0.08309063+0.11720607j -0.08309063-0.11720607j -0.06062120+0.j
  0.04456543+0.20141752j  0.04456543-0.20141752j -0.07904722-0.02099425j
 -0.07904722+0.02099425j  0.40024457+0.j          0.40024457-0.j
  0.35052893+0.j          0.35052893-0.j         -0.14370925+0.j
 -0.22898602+0.j          0.25210946+0.j        ]
eigenfunction(): eigenvector[x] =  -0.228369095946
eigenfunction(): eigenvector[x] =  -0.0384721094247
eigenfunction(): eigenvector[x] =  -0.0384721094247
eigenfunction(): eigenvector[x] =  -0.130234954105
eigenfunction(): eigenvector[x] =  -0.130234954105
eigenfunction(): eigenvector[x] =  -0.00182915759185
eigenfunction(): eigenvector[x] =  -0.0830906332715
eigenfunction(): eigenvector[x] =  -0.0830906332715
eigenfunction(): eigenvector[x] =  -0.0606211979011
eigenfunction(): eigenvector[x] =  0.0445654334321
eigenfunction(): ef =  3.17373380851
eigenfunction(): eigenvector =  [-0.22836910+0.j         -0.03847211+0.09390537j -0.03847211-0.09390537j
 -0.13023495+0.21688569j -0.13023495-0.21688569j -0.00182916+0.j
 -0.08309063+0.11720607j -0.08309063-0.11720607j -0.06062120+0.j
  0.04456543+0.20141752j  0.04456543-0.20141752j -0.07904722-0.02099425j
 -0.07904722+0.02099425j  0.40024457+0.j          0.40024457-0.j
  0.35052893+0.j          0.35052893-0.j         -0.14370925+0.j
 -0.22898602+0.j          0.25210946+0.j        ]
eigenfunction(): eigenvector[x] =  -0.228369095946
eigenfunction(): eigenvector[x] =  -0.0384721094247
eigenfunction(): eigenvector[x] =  -0.0384721094247
eigenfunction(): eigenvector[x] =  -0.130234954105
eigenfunction(): eigenvector[x] =  -0.130234954105
eigenfunction(): eigenvector[x] =  -0.00182915759185
eigenfunction(): eigenvector[x] =  -0.0830906332715
eigenfunction(): eigenvector[x] =  -0.0830906332715
eigenfunction(): eigenvector[x] =  -0.0606211979011
eigenfunction(): eigenvector[x] =  0.0445654334321
eigenfunction(): ef =  -3.17373380851
eigenfunction(): eigenvector =  [-0.22836910+0.j         -0.03847211+0.09390537j -0.03847211-0.09390537j
 -0.13023495+0.21688569j -0.13023495-0.21688569j -0.00182916+0.j
 -0.08309063+0.11720607j -0.08309063-0.11720607j -0.06062120+0.j
  0.04456543+0.20141752j  0.04456543-0.20141752j -0.07904722-0.02099425j
 -0.07904722+0.02099425j  0.40024457+0.j          0.40024457-0.j
  0.35052893+0.j          0.35052893-0.j         -0.14370925+0.j
 -0.22898602+0.j          0.25210946+0.j        ]
eigenfunction(): eigenvector[x] =  -0.228369095946
eigenfunction(): eigenvector[x] =  -0.0384721094247
eigenfunction(): eigenvector[x] =  -0.0384721094247
eigenfunction(): eigenvector[x] =  -0.130234954105
eigenfunction(): eigenvector[x] =  -0.130234954105
eigenfunction(): eigenvector[x] =  -0.00182915759185
eigenfunction(): eigenvector[x] =  -0.0830906332715
eigenfunction(): eigenvector[x] =  -0.0830906332715
eigenfunction(): eigenvector[x] =  -0.0606211979011
eigenfunction(): eigenvector[x] =  0.0445654334321
eigenfunction(): ef =  3.17373380851
square root of eigenvalue: 0.122177147255
eigenfunction(): eigenvector =  [-0.24807122+0.j         -0.20979639+0.15950128j -0.20979639-0.15950128j
  0.13193443-0.0422388j   0.13193443+0.0422388j  -0.04640799+0.j
  0.03483236-0.11824783j  0.03483236+0.11824783j -0.04882696+0.j
  0.09122648-0.20363982j  0.09122648+0.20363982j  0.11151348-0.09675502j
  0.11151348+0.09675502j -0.04980299-0.09234735j -0.04980299+0.09234735j
  0.04212459-0.00572603j  0.04212459+0.00572603j -0.00911488+0.j
 -0.20945638+0.j          0.20502629+0.j        ]
eigenfunction(): eigenvector[x] =  -0.24807121579
eigenfunction(): eigenvector[x] =  -0.209796390958
eigenfunction(): eigenvector[x] =  -0.209796390958
eigenfunction(): eigenvector[x] =  0.131934428821
eigenfunction(): eigenvector[x] =  0.131934428821
eigenfunction(): eigenvector[x] =  -0.046407993172
eigenfunction(): eigenvector[x] =  0.0348323555978
eigenfunction(): eigenvector[x] =  0.0348323555978
eigenfunction(): eigenvector[x] =  -0.0488269612966
eigenfunction(): eigenvector[x] =  0.0912264770108
eigenfunction(): ef =  -1.21148021066
eigenfunction(): eigenvector =  [-0.24807122+0.j         -0.20979639+0.15950128j -0.20979639-0.15950128j
  0.13193443-0.0422388j   0.13193443+0.0422388j  -0.04640799+0.j
  0.03483236-0.11824783j  0.03483236+0.11824783j -0.04882696+0.j
  0.09122648-0.20363982j  0.09122648+0.20363982j  0.11151348-0.09675502j
  0.11151348+0.09675502j -0.04980299-0.09234735j -0.04980299+0.09234735j
  0.04212459-0.00572603j  0.04212459+0.00572603j -0.00911488+0.j
 -0.20945638+0.j          0.20502629+0.j        ]
eigenfunction(): eigenvector[x] =  -0.24807121579
eigenfunction(): eigenvector[x] =  -0.209796390958
eigenfunction(): eigenvector[x] =  -0.209796390958
eigenfunction(): eigenvector[x] =  0.131934428821
eigenfunction(): eigenvector[x] =  0.131934428821
eigenfunction(): eigenvector[x] =  -0.046407993172
eigenfunction(): eigenvector[x] =  0.0348323555978
eigenfunction(): eigenvector[x] =  0.0348323555978
eigenfunction(): eigenvector[x] =  -0.0488269612966
eigenfunction(): eigenvector[x] =  0.0912264770108
eigenfunction(): ef =  1.21148021066
eigenfunction(): eigenvector =  [-0.24807122+0.j         -0.20979639+0.15950128j -0.20979639-0.15950128j
  0.13193443-0.0422388j   0.13193443+0.0422388j  -0.04640799+0.j
  0.03483236-0.11824783j  0.03483236+0.11824783j -0.04882696+0.j
  0.09122648-0.20363982j  0.09122648+0.20363982j  0.11151348-0.09675502j
  0.11151348+0.09675502j -0.04980299-0.09234735j -0.04980299+0.09234735j
  0.04212459-0.00572603j  0.04212459+0.00572603j -0.00911488+0.j
 -0.20945638+0.j          0.20502629+0.j        ]
eigenfunction(): eigenvector[x] =  -0.24807121579
eigenfunction(): eigenvector[x] =  -0.209796390958
eigenfunction(): eigenvector[x] =  -0.209796390958
eigenfunction(): eigenvector[x] =  0.131934428821
eigenfunction(): eigenvector[x] =  0.131934428821
eigenfunction(): eigenvector[x] =  -0.046407993172
eigenfunction(): eigenvector[x] =  0.0348323555978
eigenfunction(): eigenvector[x] =  0.0348323555978
eigenfunction(): eigenvector[x] =  -0.0488269612966
eigenfunction(): eigenvector[x] =  0.0912264770108
eigenfunction(): ef =  -1.21148021066
eigenfunction(): eigenvector =  [-0.24807122+0.j         -0.20979639+0.15950128j -0.20979639-0.15950128j
  0.13193443-0.0422388j   0.13193443+0.0422388j  -0.04640799+0.j
  0.03483236-0.11824783j  0.03483236+0.11824783j -0.04882696+0.j
  0.09122648-0.20363982j  0.09122648+0.20363982j  0.11151348-0.09675502j
  0.11151348+0.09675502j -0.04980299-0.09234735j -0.04980299+0.09234735j
  0.04212459-0.00572603j  0.04212459+0.00572603j -0.00911488+0.j
 -0.20945638+0.j          0.20502629+0.j        ]
eigenfunction(): eigenvector[x] =  -0.24807121579
eigenfunction(): eigenvector[x] =  -0.209796390958
eigenfunction(): eigenvector[x] =  -0.209796390958
eigenfunction(): eigenvector[x] =  0.131934428821
eigenfunction(): eigenvector[x] =  0.131934428821
eigenfunction(): eigenvector[x] =  -0.046407993172
eigenfunction(): eigenvector[x] =  0.0348323555978
eigenfunction(): eigenvector[x] =  0.0348323555978
eigenfunction(): eigenvector[x] =  -0.0488269612966
eigenfunction(): eigenvector[x] =  0.0912264770108
eigenfunction(): ef =  1.21148021066
square root of eigenvalue: 0.575656757303
eigenfunction(): eigenvector =  [-0.16025024+0.j          0.00863467+0.00473862j  0.00863467-0.00473862j
  0.01298462-0.03531125j  0.01298462+0.03531125j  0.30057223+0.j
 -0.11024965-0.24309854j -0.11024965+0.24309854j -0.05967682+0.j
  0.18644535+0.05108088j  0.18644535-0.05108088j  0.07190921-0.071939j
  0.07190921+0.071939j   -0.05984659-0.05135683j -0.05984659+0.05135683j
 -0.08455088-0.03412705j -0.08455088+0.03412705j -0.02878858+0.j
  0.13660645+0.j          0.22314073+0.j        ]
eigenfunction(): eigenvector[x] =  -0.160250235128
eigenfunction(): eigenvector[x] =  0.00863467461125
eigenfunction(): eigenvector[x] =  0.00863467461125
eigenfunction(): eigenvector[x] =  0.0129846202307
eigenfunction(): eigenvector[x] =  0.0129846202307
eigenfunction(): eigenvector[x] =  0.300572234625
eigenfunction(): eigenvector[x] =  -0.110249645705
eigenfunction(): eigenvector[x] =  -0.110249645705
eigenfunction(): eigenvector[x] =  -0.0596768202039
eigenfunction(): eigenvector[x] =  0.186445347803
eigenfunction(): ef =  -0.93778420081
eigenfunction(): eigenvector =  [-0.16025024+0.j          0.00863467+0.00473862j  0.00863467-0.00473862j
  0.01298462-0.03531125j  0.01298462+0.03531125j  0.30057223+0.j
 -0.11024965-0.24309854j -0.11024965+0.24309854j -0.05967682+0.j
  0.18644535+0.05108088j  0.18644535-0.05108088j  0.07190921-0.071939j
  0.07190921+0.071939j   -0.05984659-0.05135683j -0.05984659+0.05135683j
 -0.08455088-0.03412705j -0.08455088+0.03412705j -0.02878858+0.j
  0.13660645+0.j          0.22314073+0.j        ]
eigenfunction(): eigenvector[x] =  -0.160250235128
eigenfunction(): eigenvector[x] =  0.00863467461125
eigenfunction(): eigenvector[x] =  0.00863467461125
eigenfunction(): eigenvector[x] =  0.0129846202307
eigenfunction(): eigenvector[x] =  0.0129846202307
eigenfunction(): eigenvector[x] =  0.300572234625
eigenfunction(): eigenvector[x] =  -0.110249645705
eigenfunction(): eigenvector[x] =  -0.110249645705
eigenfunction(): eigenvector[x] =  -0.0596768202039
eigenfunction(): eigenvector[x] =  0.186445347803
eigenfunction(): ef =  0.93778420081
eigenfunction(): eigenvector =  [-0.16025024+0.j          0.00863467+0.00473862j  0.00863467-0.00473862j
  0.01298462-0.03531125j  0.01298462+0.03531125j  0.30057223+0.j
 -0.11024965-0.24309854j -0.11024965+0.24309854j -0.05967682+0.j
  0.18644535+0.05108088j  0.18644535-0.05108088j  0.07190921-0.071939j
  0.07190921+0.071939j   -0.05984659-0.05135683j -0.05984659+0.05135683j
 -0.08455088-0.03412705j -0.08455088+0.03412705j -0.02878858+0.j
  0.13660645+0.j          0.22314073+0.j        ]
eigenfunction(): eigenvector[x] =  -0.160250235128
eigenfunction(): eigenvector[x] =  0.00863467461125
eigenfunction(): eigenvector[x] =  0.00863467461125
eigenfunction(): eigenvector[x] =  0.0129846202307
eigenfunction(): eigenvector[x] =  0.0129846202307
eigenfunction(): eigenvector[x] =  0.300572234625
eigenfunction(): eigenvector[x] =  -0.110249645705
eigenfunction(): eigenvector[x] =  -0.110249645705
eigenfunction(): eigenvector[x] =  -0.0596768202039
eigenfunction(): eigenvector[x] =  0.186445347803
eigenfunction(): ef =  -0.93778420081
eigenfunction(): eigenvector =  [-0.16025024+0.j          0.00863467+0.00473862j  0.00863467-0.00473862j
  0.01298462-0.03531125j  0.01298462+0.03531125j  0.30057223+0.j
 -0.11024965-0.24309854j -0.11024965+0.24309854j -0.05967682+0.j
  0.18644535+0.05108088j  0.18644535-0.05108088j  0.07190921-0.071939j
  0.07190921+0.071939j   -0.05984659-0.05135683j -0.05984659+0.05135683j
 -0.08455088-0.03412705j -0.08455088+0.03412705j -0.02878858+0.j
  0.13660645+0.j          0.22314073+0.j        ]
eigenfunction(): eigenvector[x] =  -0.160250235128
eigenfunction(): eigenvector[x] =  0.00863467461125
eigenfunction(): eigenvector[x] =  0.00863467461125
eigenfunction(): eigenvector[x] =  0.0129846202307
eigenfunction(): eigenvector[x] =  0.0129846202307
eigenfunction(): eigenvector[x] =  0.300572234625
eigenfunction(): eigenvector[x] =  -0.110249645705
eigenfunction(): eigenvector[x] =  -0.110249645705
eigenfunction(): eigenvector[x] =  -0.0596768202039
eigenfunction(): eigenvector[x] =  0.186445347803
eigenfunction(): ef =  0.93778420081
Point  [4, 3, 3, 4, 4, 2, 6, 2, 6, 1]  is mapped to : [-2.177710255858881, -1.8382887725424439, 7.1297848766397323, -1.7905616947327843, 0.5153180795981398, 2.242283358831767, -0.51586650419136992, -4.9334961938620863, 2.2389841460837565, 1.024109123381632, -1.4638435104884844, -1.3910957395395382, 1.1761408833841782, -3.6631889481215723, -0.59657978088051422, -0.21634228135648836, -0.40030301216141423, -2.5835809037758537, -0.14801519609454325, -0.53984181208841886]
Point  [-4, -3, -3, -4, -4, -2, -6, -2, -6, -1]  is mapped to : [2.177710255858881, 1.8382887725424439, -7.1297848766397323, 1.7905616947327843, -0.5153180795981398, -2.242283358831767, 0.51586650419136992, 4.9334961938620863, -2.2389841460837565, -1.024109123381632, 1.4638435104884844, 1.3910957395395382, -1.1761408833841782, 3.6631889481215723, 0.59657978088051422, 0.21634228135648836, 0.40030301216141423, 2.5835809037758537, 0.14801519609454325, 0.53984181208841886]
Dot product of the two points in kernel : 35.2327711502
