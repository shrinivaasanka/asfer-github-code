// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: currency.proto

#ifndef PROTOBUF_currency_2eproto__INCLUDED
#define PROTOBUF_currency_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_currency_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCurrencyImpl();
void InitDefaultsCurrency();
inline void InitDefaults() {
  InitDefaultsCurrency();
}
}  // namespace protobuf_currency_2eproto
namespace currency {
class Currency;
class CurrencyDefaultTypeInternal;
extern CurrencyDefaultTypeInternal _Currency_default_instance_;
}  // namespace currency
namespace currency {

// ===================================================================

class Currency : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:currency.Currency) */ {
 public:
  Currency();
  virtual ~Currency();

  Currency(const Currency& from);

  inline Currency& operator=(const Currency& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Currency(Currency&& from) noexcept
    : Currency() {
    *this = ::std::move(from);
  }

  inline Currency& operator=(Currency&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Currency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Currency* internal_default_instance() {
    return reinterpret_cast<const Currency*>(
               &_Currency_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Currency* other);
  friend void swap(Currency& a, Currency& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Currency* New() const PROTOBUF_FINAL { return New(NULL); }

  Currency* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Currency& from);
  void MergeFrom(const Currency& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Currency* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid_and_denom = 2;
  bool has_uuid_and_denom() const;
  void clear_uuid_and_denom();
  static const int kUuidAndDenomFieldNumber = 2;
  const ::std::string& uuid_and_denom() const;
  void set_uuid_and_denom(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid_and_denom(::std::string&& value);
  #endif
  void set_uuid_and_denom(const char* value);
  void set_uuid_and_denom(const char* value, size_t size);
  ::std::string* mutable_uuid_and_denom();
  ::std::string* release_uuid_and_denom();
  void set_allocated_uuid_and_denom(::std::string* uuid_and_denom);

  // @@protoc_insertion_point(class_scope:currency.Currency)
 private:
  void set_has_uuid_and_denom();
  void clear_has_uuid_and_denom();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuid_and_denom_;
  friend struct ::protobuf_currency_2eproto::TableStruct;
  friend void ::protobuf_currency_2eproto::InitDefaultsCurrencyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Currency

// required string uuid_and_denom = 2;
inline bool Currency::has_uuid_and_denom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Currency::set_has_uuid_and_denom() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Currency::clear_has_uuid_and_denom() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Currency::clear_uuid_and_denom() {
  uuid_and_denom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid_and_denom();
}
inline const ::std::string& Currency::uuid_and_denom() const {
  // @@protoc_insertion_point(field_get:currency.Currency.uuid_and_denom)
  return uuid_and_denom_.GetNoArena();
}
inline void Currency::set_uuid_and_denom(const ::std::string& value) {
  set_has_uuid_and_denom();
  uuid_and_denom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:currency.Currency.uuid_and_denom)
}
#if LANG_CXX11
inline void Currency::set_uuid_and_denom(::std::string&& value) {
  set_has_uuid_and_denom();
  uuid_and_denom_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:currency.Currency.uuid_and_denom)
}
#endif
inline void Currency::set_uuid_and_denom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid_and_denom();
  uuid_and_denom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:currency.Currency.uuid_and_denom)
}
inline void Currency::set_uuid_and_denom(const char* value, size_t size) {
  set_has_uuid_and_denom();
  uuid_and_denom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:currency.Currency.uuid_and_denom)
}
inline ::std::string* Currency::mutable_uuid_and_denom() {
  set_has_uuid_and_denom();
  // @@protoc_insertion_point(field_mutable:currency.Currency.uuid_and_denom)
  return uuid_and_denom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Currency::release_uuid_and_denom() {
  // @@protoc_insertion_point(field_release:currency.Currency.uuid_and_denom)
  clear_has_uuid_and_denom();
  return uuid_and_denom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Currency::set_allocated_uuid_and_denom(::std::string* uuid_and_denom) {
  if (uuid_and_denom != NULL) {
    set_has_uuid_and_denom();
  } else {
    clear_has_uuid_and_denom();
  }
  uuid_and_denom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid_and_denom);
  // @@protoc_insertion_point(field_set_allocated:currency.Currency.uuid_and_denom)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace currency

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_currency_2eproto__INCLUDED
